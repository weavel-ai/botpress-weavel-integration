{
  "version": 3,
  "sources": ["../src/errors.ts"],
  "sourcesContent": ["import { isApiError, ApiError, UnknownError } from '@botpress/client'\nimport axios, { AxiosError } from 'axios'\nimport { VError } from 'verror'\nimport * as consts from './consts'\n\ntype KnownApiError = Exclude<ApiError, UnknownError>\nconst isKnownApiError = (e: unknown): e is KnownApiError => isApiError(e) && !(e instanceof UnknownError)\n\nexport class BotpressCLIError extends VError {\n  public static wrap(thrown: unknown, message: string): BotpressCLIError {\n    const err = BotpressCLIError.map(thrown)\n    return new BotpressCLIError(err, message ?? '')\n  }\n\n  public static map(thrown: unknown): BotpressCLIError {\n    if (thrown instanceof BotpressCLIError) {\n      return thrown\n    }\n    if (thrown instanceof UnknownError) {\n      const inst = new HTTPError(500, 'An unknown error has occurred.')\n      inst.debug = thrown.message\n      return inst\n    }\n    if (isKnownApiError(thrown)) {\n      return HTTPError.fromApi(thrown)\n    }\n    if (axios.isAxiosError(thrown)) {\n      return HTTPError.fromAxios(thrown)\n    }\n    if (thrown instanceof Error) {\n      const { message } = thrown\n      return new BotpressCLIError(message)\n    }\n    return new BotpressCLIError(`${thrown}`)\n  }\n\n  private readonly _debug: string[]\n\n  constructor(error: BotpressCLIError, message: string)\n  constructor(message: string)\n  public constructor(first: BotpressCLIError | string, second?: string) {\n    if (typeof first === 'string') {\n      super(first)\n      this._debug = []\n      return\n    }\n    super(first, second!)\n    this._debug = [...first._debug]\n  }\n\n  public set debug(msg: string) {\n    this._debug.push(msg)\n  }\n\n  public get debug(): string {\n    const dbgMsgs = this._debug.filter((s) => s.length)\n    if (!dbgMsgs.length) {\n      return ''\n    }\n    return 'Error: \\n' + dbgMsgs.map((s) => `  ${s}`).join('\\n')\n  }\n}\n\nexport class ExclusiveBotFeatureError extends BotpressCLIError {\n  constructor() {\n    const message = 'This feature is only available for bots. This project is an integration'\n    super(message)\n  }\n}\n\nexport class ExclusiveIntegrationFeatureError extends BotpressCLIError {\n  constructor() {\n    const message = 'This feature is only available for integration. This project is a bot'\n    super(message)\n  }\n}\n\nexport class HTTPError extends BotpressCLIError {\n  constructor(public readonly status: number | undefined, message: string) {\n    super(message)\n  }\n\n  public static fromAxios(e: AxiosError<{ message?: string }>): HTTPError {\n    const message = this._axiosMsg(e)\n    return new HTTPError(e.response?.status, message)\n  }\n\n  public static fromApi(e: KnownApiError): HTTPError {\n    const { message, code } = e\n    return new HTTPError(code, message)\n  }\n\n  private static _axiosMsg(e: AxiosError<{ message?: string }>): string {\n    let message = e.message\n    if (e.response?.statusText) {\n      message += `\\n  ${e.response?.statusText}`\n    }\n    if (e.response?.status && e.request?.method && e.request?.path) {\n      message += `\\n  (${e.response?.status}) ${e.request.method} ${e.request.path}`\n    }\n    if (e.response?.data?.message) {\n      message += `\\n  ${e.response?.data?.message}`\n    }\n    return message\n  }\n}\n\nexport class NoBundleFoundError extends BotpressCLIError {\n  constructor() {\n    const message = 'No bundle found. Please run `bp bundle` first.'\n    super(message)\n  }\n}\n\nexport class NoBotsFoundError extends BotpressCLIError {\n  constructor() {\n    const message = `No Bot found in your Workspace. Please create one first at ${consts.defaultBotpressAppUrl}.`\n    super(message)\n  }\n}\n\nexport class NoWorkspacesFoundError extends BotpressCLIError {\n  constructor() {\n    const message = 'No Workspace found. Please create one first.'\n    super(message)\n  }\n}\n\nexport class NotLoggedInError extends BotpressCLIError {\n  constructor() {\n    const message = 'Not logged in. Please run `bp login` first.'\n    super(message)\n  }\n}\n\nexport class ParamRequiredError extends BotpressCLIError {\n  constructor(param: string) {\n    const message = `${param} is required.`\n    super(message)\n  }\n}\n\nexport class InvalidIntegrationReferenceError extends BotpressCLIError {\n  constructor(ref: string) {\n    const message = `Invalid integration reference \"${ref}\".`\n    super(message)\n  }\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
