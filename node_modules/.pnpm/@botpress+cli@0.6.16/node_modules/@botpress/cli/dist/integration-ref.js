"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var integration_ref_exports = {};
__export(integration_ref_exports, {
  formatIntegrationRef: () => formatIntegrationRef,
  parseIntegrationRef: () => parseIntegrationRef
});
module.exports = __toCommonJS(integration_ref_exports);
var import_semver = __toESM(require("semver"));
var utils = __toESM(require("./utils"));
const LATEST_TAG = "latest";
const formatIntegrationRef = (ref) => {
  if (ref.type === "path") {
    return ref.path;
  }
  if (ref.type === "id") {
    return ref.id;
  }
  return `${ref.name}@${ref.version}`;
};
const parseIntegrationRef = (ref) => {
  if (!ref) {
    return;
  }
  if (utils.id.isValidID(ref)) {
    return { type: "id", id: ref };
  }
  if (utils.path.isAbsolute(ref)) {
    return { type: "path", path: ref };
  }
  if (!ref.includes("@")) {
    return { type: "name", name: ref, version: LATEST_TAG };
  }
  const [name, version] = ref.split("@");
  if (!name || !version) {
    return;
  }
  const cleanedVersion = version === LATEST_TAG ? version : import_semver.default.clean(version);
  if (!cleanedVersion) {
    return;
  }
  return { type: "name", name, version: cleanedVersion };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  formatIntegrationRef,
  parseIntegrationRef
});
//# sourceMappingURL=integration-ref.js.map
