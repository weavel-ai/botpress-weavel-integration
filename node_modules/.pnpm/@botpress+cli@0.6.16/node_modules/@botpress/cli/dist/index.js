"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_config = require("dotenv/config");
var import_yargs_extra = __toESM(require("@bpinternal/yargs-extra"));
var import_command_definitions = __toESM(require("./command-definitions"));
var import_command_implementations = __toESM(require("./command-implementations"));
var tree = __toESM(require("./command-tree"));
var errors = __toESM(require("./errors"));
var import_logger = require("./logger");
var import_register_yargs = require("./register-yargs");
const logError = (thrown) => {
  const error = errors.BotpressCLIError.map(thrown);
  new import_logger.Logger().error(error.message);
};
const onError = (thrown) => {
  logError(thrown);
  process.exit(1);
};
const yargsFail = (msg) => {
  logError(`${msg}
`);
  import_yargs_extra.default.showHelp();
  process.exit(1);
};
process.on("uncaughtException", (thrown) => onError(thrown));
process.on("unhandledRejection", (thrown) => onError(thrown));
const commands = tree.zipTree(import_command_definitions.default, import_command_implementations.default);
(0, import_register_yargs.registerYargs)(import_yargs_extra.default, commands);
void import_yargs_extra.default.version().scriptName("bp").demandCommand(1, "You didn't provide any command. Use the --help flag to see the list of available commands.").recommendCommands().strict().help().fail(yargsFail).parse();
//# sourceMappingURL=index.js.map
