"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var command_tree_exports = {};
__export(command_tree_exports, {
  guards: () => guards,
  zipTree: () => zipTree
});
module.exports = __toCommonJS(command_tree_exports);
const guards = {
  definition: {
    isDef: (x) => "schema" in x,
    isSubTree: (x) => "subcommands" in x
  },
  implementation: {
    isImpl: (x) => typeof x === "function",
    isSubTree: (x) => typeof x === "object"
  },
  command: {
    isLeaf: (x) => "handler" in x,
    isSubTree: (x) => "subcommands" in x
  }
};
const zipTree = (defTree, implTree) => {
  const tree = {};
  for (const key in defTree) {
    const def = defTree[key];
    const impl = implTree[key];
    if (guards.definition.isDef(def) && guards.implementation.isImpl(impl)) {
      tree[key] = { ...def, handler: impl };
      continue;
    }
    if (guards.definition.isSubTree(def) && guards.implementation.isSubTree(impl)) {
      tree[key] = { ...def, subcommands: zipTree(def.subcommands, impl.subcommands) };
      continue;
    }
  }
  return tree;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  guards,
  zipTree
});
//# sourceMappingURL=command-tree.js.map
