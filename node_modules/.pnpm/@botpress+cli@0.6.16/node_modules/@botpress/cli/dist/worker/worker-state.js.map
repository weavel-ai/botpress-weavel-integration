{
  "version": 3,
  "sources": ["../../src/worker/worker-state.ts"],
  "sourcesContent": ["import type { ChildProcessWrapper } from './child-wrapper'\n\nexport type WorkerStatus = WorkerState['status']\nexport type WorkerState =\n  | { status: 'errored'; thrown: unknown } // only occurs if the event error is emitted https://nodejs.org/api/child_process.html#event-error\n  | { status: 'dead'; murdered: boolean }\n  | { status: 'killing' }\n  | { status: 'reloading' }\n  | {\n      status: 'live'\n      child: ChildProcessWrapper\n    }\n\nexport type StateOf<S extends WorkerStatus> = Extract<WorkerState, { status: S }>\nexport type WorkerStateHandler<S extends WorkerStatus> = (state: StateOf<S>) => void\n\nexport class WorkerStateObserver {\n  private _state: WorkerState\n  private _handlers: {\n    [K in WorkerStatus]: WorkerStateHandler<K>[]\n  } = {\n    dead: [],\n    reloading: [],\n    live: [],\n    killing: [],\n    errored: [],\n  }\n\n  public constructor(initialState: WorkerState) {\n    this._state = initialState\n  }\n\n  public waitFor<S extends WorkerStatus>(status: S): Promise<void> {\n    return new Promise<void>((resolve) => {\n      const cb = () => {\n        this.off(status, cb)\n        resolve()\n      }\n      this.on(status, cb)\n    })\n  }\n\n  public on<S extends WorkerStatus>(status: S, handler: WorkerStateHandler<S>) {\n    this._handlers[status].push(handler)\n    if (this._state.status === status) {\n      handler(this._state as StateOf<S>)\n    }\n  }\n\n  public off<S extends WorkerStatus>(status: S, handler: WorkerStateHandler<S>) {\n    const index = this._handlers[status].indexOf(handler)\n    this._handlers[status].splice(index, 1)\n  }\n\n  public get() {\n    return this._state\n  }\n\n  public set(newState: WorkerState) {\n    this._state = newState\n    const { status } = newState\n    for (const handler of this._handlers[status]) {\n      const fn = handler as WorkerStateHandler<typeof status>\n      fn(newState)\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBO,MAAM,oBAAoB;AAAA,EACvB;AAAA,EACA,YAEJ;AAAA,IACF,MAAM,CAAC;AAAA,IACP,WAAW,CAAC;AAAA,IACZ,MAAM,CAAC;AAAA,IACP,SAAS,CAAC;AAAA,IACV,SAAS,CAAC;AAAA,EACZ;AAAA,EAEO,YAAY,cAA2B;AAC5C,SAAK,SAAS;AAAA,EAChB;AAAA,EAEO,QAAgC,QAA0B;AAC/D,WAAO,IAAI,QAAc,CAAC,YAAY;AACpC,YAAM,KAAK,MAAM;AACf,aAAK,IAAI,QAAQ,EAAE;AACnB,gBAAQ;AAAA,MACV;AACA,WAAK,GAAG,QAAQ,EAAE;AAAA,IACpB,CAAC;AAAA,EACH;AAAA,EAEO,GAA2B,QAAW,SAAgC;AAC3E,SAAK,UAAU,QAAQ,KAAK,OAAO;AACnC,QAAI,KAAK,OAAO,WAAW,QAAQ;AACjC,cAAQ,KAAK,MAAoB;AAAA,IACnC;AAAA,EACF;AAAA,EAEO,IAA4B,QAAW,SAAgC;AAC5E,UAAM,QAAQ,KAAK,UAAU,QAAQ,QAAQ,OAAO;AACpD,SAAK,UAAU,QAAQ,OAAO,OAAO,CAAC;AAAA,EACxC;AAAA,EAEO,MAAM;AACX,WAAO,KAAK;AAAA,EACd;AAAA,EAEO,IAAI,UAAuB;AAChC,SAAK,SAAS;AACd,UAAM,EAAE,OAAO,IAAI;AACnB,eAAW,WAAW,KAAK,UAAU,SAAS;AAC5C,YAAM,KAAK;AACX,SAAG,QAAQ;AAAA,IACb;AAAA,EACF;AACF;",
  "names": []
}
