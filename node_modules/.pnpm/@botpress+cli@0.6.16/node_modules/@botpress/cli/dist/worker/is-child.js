"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var is_child_exports = {};
__export(is_child_exports, {
  CHILD_ENV_KEY: () => CHILD_ENV_KEY,
  CHILD_ENV_VALUE: () => CHILD_ENV_VALUE,
  isChildProcess: () => isChildProcess,
  processProps: () => processProps
});
module.exports = __toCommonJS(is_child_exports);
const CHILD_ENV_KEY = "IS_CHILD";
const CHILD_ENV_VALUE = "true";
const getProcessProps = () => {
  const type = process.env[CHILD_ENV_KEY] === CHILD_ENV_VALUE ? "child" : "main";
  if (type === "main") {
    return {
      type,
      pid: process.pid
    };
  }
  if (!process.send) {
    throw new Error(`Please do not use variable ${CHILD_ENV_KEY} manually`);
  }
  return {
    type,
    sendMessage: process.send,
    pid: process.pid
  };
};
const processProps = getProcessProps();
const isChildProcess = processProps.type === "child";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CHILD_ENV_KEY,
  CHILD_ENV_VALUE,
  isChildProcess,
  processProps
});
//# sourceMappingURL=is-child.js.map
