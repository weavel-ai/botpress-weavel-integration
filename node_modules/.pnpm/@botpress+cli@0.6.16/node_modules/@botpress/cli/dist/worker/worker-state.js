"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var worker_state_exports = {};
__export(worker_state_exports, {
  WorkerStateObserver: () => WorkerStateObserver
});
module.exports = __toCommonJS(worker_state_exports);
class WorkerStateObserver {
  _state;
  _handlers = {
    dead: [],
    reloading: [],
    live: [],
    killing: [],
    errored: []
  };
  constructor(initialState) {
    this._state = initialState;
  }
  waitFor(status) {
    return new Promise((resolve) => {
      const cb = () => {
        this.off(status, cb);
        resolve();
      };
      this.on(status, cb);
    });
  }
  on(status, handler) {
    this._handlers[status].push(handler);
    if (this._state.status === status) {
      handler(this._state);
    }
  }
  off(status, handler) {
    const index = this._handlers[status].indexOf(handler);
    this._handlers[status].splice(index, 1);
  }
  get() {
    return this._state;
  }
  set(newState) {
    this._state = newState;
    const { status } = newState;
    for (const handler of this._handlers[status]) {
      const fn = handler;
      fn(newState);
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  WorkerStateObserver
});
//# sourceMappingURL=worker-state.js.map
