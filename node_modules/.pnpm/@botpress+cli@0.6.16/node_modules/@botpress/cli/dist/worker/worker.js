"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var worker_exports = {};
__export(worker_exports, {
  Worker: () => Worker
});
module.exports = __toCommonJS(worker_exports);
var import_child_wrapper = require("./child-wrapper");
var import_worker_state = require("./worker-state");
class Worker {
  constructor(_config, _logger, _props = {}) {
    this._config = _config;
    this._logger = _logger;
    this._props = _props;
  }
  static async spawn(config, logger, props) {
    const instance = new Worker(config, logger, props);
    await instance.reload();
    return instance;
  }
  _state = new import_worker_state.WorkerStateObserver({ status: "dead", murdered: false });
  get running() {
    return this._state.get().status === "live";
  }
  kill = () => {
    const state = this._state.get();
    if (state.status !== "live") {
      throw new Error("Cannot kill a child process that is not alive");
    }
    this._state.set({ status: "killing" });
    return state.child.kill();
  };
  reload = async () => {
    if (this._state.get().status === "reloading") {
      this._logger.debug("Already reloading");
      return;
    }
    const previousState = this._state.get();
    this._state.set({ status: "reloading" });
    if (previousState.status === "live") {
      await previousState.child.kill();
    }
    const child = await import_child_wrapper.ChildProcessWrapper.spawn(this._config, this._logger);
    this._state.set({ status: "live", child });
    void child.listen().catch((thrown) => {
      this._state.set({ status: "errored", thrown });
    }).then(() => {
      const { status } = this._state.get();
      if (status === "reloading") {
        return;
      }
      this._state.set({ status: "dead", murdered: status === "killing" });
    });
  };
  wait = () => new Promise((resolve, reject) => {
    this._state.on("dead", (state) => {
      if (state.murdered || !this._props.hangOnExit) {
        resolve();
        return;
      }
      this._logger.debug("Child process died of natural causes...");
    });
    this._state.on("errored", (state) => {
      reject(state.thrown);
    });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Worker
});
//# sourceMappingURL=worker.js.map
