"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var actions_module_exports = {};
__export(actions_module_exports, {
  ActionInputModule: () => ActionInputModule,
  ActionModule: () => ActionModule,
  ActionOutputModule: () => ActionOutputModule,
  ActionsModule: () => ActionsModule
});
module.exports = __toCommonJS(actions_module_exports);
var import_bluebird = __toESM(require("bluebird"));
var import_utils = require("../../utils");
var import_generators = require("../generators");
var import_module = require("../module");
class ActionInputModule extends import_module.Module {
  static async create(input) {
    const schema = input.schema;
    const name = "input";
    const def = {
      path: `${name}.ts`,
      exportName: "Input",
      content: await (0, import_generators.jsonSchemaToTypeScriptType)(schema, name)
    };
    return new ActionInputModule(def);
  }
}
class ActionOutputModule extends import_module.Module {
  static async create(output) {
    const schema = output.schema;
    const name = "output";
    const def = {
      path: `${name}.ts`,
      exportName: "Output",
      content: await (0, import_generators.jsonSchemaToTypeScriptType)(schema, name)
    };
    return new ActionOutputModule(def);
  }
}
class ActionModule extends import_module.ReExportTypeModule {
  static async create(actionName, action) {
    const inputModule = await ActionInputModule.create(action.input);
    const outputModule = await ActionOutputModule.create(action.output);
    const inst = new ActionModule({
      exportName: `Action${import_utils.casing.to.pascalCase(actionName)}`
    });
    inst.pushDep(inputModule);
    inst.pushDep(outputModule);
    return inst;
  }
}
class ActionsModule extends import_module.ReExportTypeModule {
  static async create(actions) {
    const actionModules = await import_bluebird.default.map(Object.entries(actions), async ([actionName, action]) => {
      const mod = await ActionModule.create(actionName, action);
      return mod.unshift(actionName);
    });
    const inst = new ActionsModule({
      exportName: "Actions"
    });
    inst.pushDep(...actionModules);
    return inst;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ActionInputModule,
  ActionModule,
  ActionOutputModule,
  ActionsModule
});
//# sourceMappingURL=actions-module.js.map
