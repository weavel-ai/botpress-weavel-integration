"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var integration_secret_exports = {};
__export(integration_secret_exports, {
  IntegrationSecretIndexModule: () => IntegrationSecretIndexModule,
  secretEnvVariableName: () => secretEnvVariableName
});
module.exports = __toCommonJS(integration_secret_exports);
var import_utils = require("../utils");
var import_const = require("./const");
var import_module = require("./module");
const secretEnvVariableName = (secretName) => `SECRET_${import_utils.casing.to.screamingSnakeCase(secretName)}`;
class IntegrationSecretIndexModule extends import_module.Module {
  static async create(integration) {
    let content = import_const.GENERATED_HEADER;
    content += "class Secrets {\n";
    for (const [secretName, { optional }] of Object.entries(integration.secrets ?? {})) {
      const envVariableName = secretEnvVariableName(secretName);
      const fieldName = import_utils.casing.to.screamingSnakeCase(secretName);
      if (optional) {
        content += `  public get ${fieldName}(): string | undefined {
`;
        content += `    const envVarValue = process.env.${envVariableName}
`;
        content += "    return envVarValue\n";
        content += "  }\n";
      } else {
        content += `  public get ${fieldName}(): string {
`;
        content += `    const envVarValue = process.env.${envVariableName}
`;
        content += `    if (!envVarValue) throw new Error('Missing required secret "${secretName}"')
`;
        content += "    return envVarValue\n";
        content += "  }\n";
      }
    }
    content += "}\n";
    content += "export const secrets = new Secrets()\n";
    return new IntegrationSecretIndexModule({ content, exportName: "secrets", path: import_const.INDEX_FILE });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  IntegrationSecretIndexModule,
  secretEnvVariableName
});
//# sourceMappingURL=integration-secret.js.map
