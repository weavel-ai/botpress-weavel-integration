{
  "version": 3,
  "sources": ["../../src/code-generation/index.ts"],
  "sourcesContent": ["import type * as client from '@botpress/client'\nimport type * as sdk from '@botpress/sdk'\nimport pathlib from 'path'\nimport * as utils from '../utils'\nimport { GENERATED_HEADER, INDEX_FILE } from './const'\nimport { IntegrationImplementationIndexModule } from './integration-implementation'\nimport { IntegrationInstanceIndexModule } from './integration-instance'\nimport { IntegrationSecretIndexModule } from './integration-secret'\nimport * as mapIntegration from './map-integration'\nimport type * as types from './typings'\n\nexport { File } from './typings'\nexport { secretEnvVariableName } from './integration-secret'\nexport const INTEGRATION_JSON = 'integration.json'\n\nexport const generateIntegrationImplementationTypings = async (\n  sdkIntegration: sdk.IntegrationDefinition,\n  implementationTypingsPath: string\n): Promise<types.File[]> => {\n  const integration = mapIntegration.from.sdk(sdkIntegration)\n  const indexModule = await IntegrationImplementationIndexModule.create(integration)\n  indexModule.unshift(implementationTypingsPath)\n  return indexModule.flatten()\n}\n\nexport const generateIntegrationSecrets = async (\n  sdkIntegration: sdk.IntegrationDefinition,\n  secretsPath: string\n): Promise<types.File[]> => {\n  const indexModule = await IntegrationSecretIndexModule.create(sdkIntegration)\n  indexModule.unshift(secretsPath)\n  return indexModule.flatten()\n}\n\nexport const generateIntegrationIndex = async (\n  implementationTypingsPath: string,\n  implementationSecretsPath: string\n): Promise<types.File> => {\n  let content = ''\n  content += `export * from './${implementationTypingsPath}'\\n`\n  content += `export * from './${implementationSecretsPath}'\\n`\n  return {\n    path: INDEX_FILE,\n    content,\n  }\n}\n\nexport type IntegrationInstanceJson = {\n  name: string\n  version: string\n  id: string | null\n}\n\nexport const generateIntegrationInstance = async (\n  anyIntegration: client.Integration | sdk.IntegrationDefinition,\n  installPath: string\n): Promise<types.File[]> => {\n  let integration: types.IntegrationDefinition\n  if ('id' in anyIntegration) {\n    integration = mapIntegration.from.client(anyIntegration)\n  } else {\n    integration = mapIntegration.from.sdk(anyIntegration)\n  }\n\n  const indexModule = await IntegrationInstanceIndexModule.create(integration)\n  const dirname = utils.casing.to.kebabCase(integration.name)\n  indexModule.unshift(installPath, dirname)\n  const files = indexModule.flatten()\n\n  const { name, version, id } = integration\n  const json: IntegrationInstanceJson = {\n    name,\n    version,\n    id,\n  }\n  files.push({\n    path: pathlib.join(installPath, dirname, INTEGRATION_JSON),\n    content: JSON.stringify(json, null, 2),\n  })\n\n  return files\n}\n\nexport const generateBotIndex = async (\n  installPath: string,\n  instances: { name: string; dirname: string }[]\n): Promise<types.File> => {\n  const lines: string[] = [\n    GENERATED_HEADER,\n    \"import * as sdk from '@botpress/sdk'\",\n    ...instances.map((i) => `import * as ${utils.casing.to.camelCase(i.name)} from './${installPath}/${i.dirname}'`),\n    ...instances.map((i) => `export * as ${utils.casing.to.camelCase(i.name)} from './${installPath}/${i.dirname}'`),\n    '',\n    'type TIntegrations = {',\n    ...instances.map(\n      (i) => `  \"${i.name}\": ${utils.casing.to.camelCase(i.name)}.T${utils.casing.to.pascalCase(i.dirname)}`\n    ),\n    '}',\n    '',\n    'type BaseStates = sdk.Bot extends sdk.Bot<any, infer TStates, any> ? TStates : never',\n    'type BaseEvents = sdk.Bot extends sdk.Bot<any, any, infer TEvents> ? TEvents : never',\n    '',\n    'export class Bot<',\n    '  TStates extends BaseStates,',\n    '  TEvents extends BaseEvents',\n    '> extends sdk.Bot<',\n    '    TIntegrations,',\n    '    TStates,',\n    '    TEvents',\n    '> {}',\n  ]\n\n  return {\n    path: INDEX_FILE,\n    content: lines.join('\\n'),\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,kBAAoB;AACpB,YAAuB;AACvB,mBAA6C;AAC7C,wCAAqD;AACrD,kCAA+C;AAC/C,gCAA6C;AAC7C,qBAAgC;AAGhC,qBAAqB;AACrB,IAAAA,6BAAsC;AAC/B,MAAM,mBAAmB;AAEzB,MAAM,2CAA2C,OACtD,gBACA,8BAC0B;AAC1B,QAAM,cAAc,eAAe,KAAK,IAAI,cAAc;AAC1D,QAAM,cAAc,MAAM,uEAAqC,OAAO,WAAW;AACjF,cAAY,QAAQ,yBAAyB;AAC7C,SAAO,YAAY,QAAQ;AAC7B;AAEO,MAAM,6BAA6B,OACxC,gBACA,gBAC0B;AAC1B,QAAM,cAAc,MAAM,uDAA6B,OAAO,cAAc;AAC5E,cAAY,QAAQ,WAAW;AAC/B,SAAO,YAAY,QAAQ;AAC7B;AAEO,MAAM,2BAA2B,OACtC,2BACA,8BACwB;AACxB,MAAI,UAAU;AACd,aAAW,oBAAoB;AAAA;AAC/B,aAAW,oBAAoB;AAAA;AAC/B,SAAO;AAAA,IACL,MAAM;AAAA,IACN;AAAA,EACF;AACF;AAQO,MAAM,8BAA8B,OACzC,gBACA,gBAC0B;AAC1B,MAAI;AACJ,MAAI,QAAQ,gBAAgB;AAC1B,kBAAc,eAAe,KAAK,OAAO,cAAc;AAAA,EACzD,OAAO;AACL,kBAAc,eAAe,KAAK,IAAI,cAAc;AAAA,EACtD;AAEA,QAAM,cAAc,MAAM,2DAA+B,OAAO,WAAW;AAC3E,QAAM,UAAU,MAAM,OAAO,GAAG,UAAU,YAAY,IAAI;AAC1D,cAAY,QAAQ,aAAa,OAAO;AACxC,QAAM,QAAQ,YAAY,QAAQ;AAElC,QAAM,EAAE,MAAM,SAAS,GAAG,IAAI;AAC9B,QAAM,OAAgC;AAAA,IACpC;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,QAAM,KAAK;AAAA,IACT,MAAM,YAAAC,QAAQ,KAAK,aAAa,SAAS,gBAAgB;AAAA,IACzD,SAAS,KAAK,UAAU,MAAM,MAAM,CAAC;AAAA,EACvC,CAAC;AAED,SAAO;AACT;AAEO,MAAM,mBAAmB,OAC9B,aACA,cACwB;AACxB,QAAM,QAAkB;AAAA,IACtB;AAAA,IACA;AAAA,IACA,GAAG,UAAU,IAAI,CAAC,MAAM,eAAe,MAAM,OAAO,GAAG,UAAU,EAAE,IAAI,aAAa,eAAe,EAAE,UAAU;AAAA,IAC/G,GAAG,UAAU,IAAI,CAAC,MAAM,eAAe,MAAM,OAAO,GAAG,UAAU,EAAE,IAAI,aAAa,eAAe,EAAE,UAAU;AAAA,IAC/G;AAAA,IACA;AAAA,IACA,GAAG,UAAU;AAAA,MACX,CAAC,MAAM,MAAM,EAAE,UAAU,MAAM,OAAO,GAAG,UAAU,EAAE,IAAI,MAAM,MAAM,OAAO,GAAG,WAAW,EAAE,OAAO;AAAA,IACrG;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO;AAAA,IACL,MAAM;AAAA,IACN,SAAS,MAAM,KAAK,IAAI;AAAA,EAC1B;AACF;",
  "names": ["import_integration_secret", "pathlib"]
}
