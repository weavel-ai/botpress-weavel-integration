{
  "version": 3,
  "sources": ["../../src/code-generation/map-integration.ts"],
  "sourcesContent": ["import * as client from '@botpress/client'\nimport * as sdk from '@botpress/sdk'\nimport { z } from 'zod'\nimport * as utils from '../utils'\nimport * as types from './typings'\n\nexport namespace from {\n  export const sdk = (i: sdk.IntegrationDefinition): types.IntegrationDefinition => ({\n    id: null,\n    name: i.name,\n    version: i.version,\n    user: {\n      tags: i.user?.tags ?? {},\n      creation: i.user?.creation ?? { enabled: false, requiredTags: [] },\n    },\n    configuration: i.configuration ? _mapSchema(i.configuration) : { schema: {} },\n    events: i.events ? utils.records.mapValues(i.events, _mapSchema) : {},\n    states: i.states ? utils.records.mapValues(i.states, _mapSchema) : {},\n    actions: i.actions\n      ? utils.records.mapValues(i.actions, (a) => ({\n          input: _mapSchema(a.input),\n          output: _mapSchema(a.output),\n        }))\n      : {},\n    channels: i.channels\n      ? utils.records.mapValues(i.channels, (c) => ({\n          conversation: {\n            tags: c.conversation?.tags ?? {},\n            creation: c.conversation?.creation ?? { enabled: false, requiredTags: [] },\n          },\n          message: {\n            tags: c.message?.tags ?? {},\n          },\n          messages: utils.records.mapValues(c.messages, _mapSchema),\n        }))\n      : {},\n  })\n\n  export const client = (i: client.Integration): types.IntegrationDefinition => {\n    const { id, name, version, configuration, channels, states, events, actions, user } = i\n    return { id, name, version, configuration, channels, states, events, actions, user }\n  }\n\n  const _mapSchema = <T extends { schema: z.ZodObject<any> }>(\n    x: T\n  ): utils.types.Merge<T, { schema: ReturnType<typeof utils.schema.mapZodToJsonSchema> }> => ({\n    ...x,\n    schema: utils.schema.mapZodToJsonSchema(x),\n  })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,YAAuB;AAGhB,IAAU;AAAA,CAAV,CAAUA,UAAV;AACE,EAAMA,MAAA,MAAM,CAAC,OAA+D;AAAA,IACjF,IAAI;AAAA,IACJ,MAAM,EAAE;AAAA,IACR,SAAS,EAAE;AAAA,IACX,MAAM;AAAA,MACJ,MAAM,EAAE,MAAM,QAAQ,CAAC;AAAA,MACvB,UAAU,EAAE,MAAM,YAAY,EAAE,SAAS,OAAO,cAAc,CAAC,EAAE;AAAA,IACnE;AAAA,IACA,eAAe,EAAE,gBAAgB,WAAW,EAAE,aAAa,IAAI,EAAE,QAAQ,CAAC,EAAE;AAAA,IAC5E,QAAQ,EAAE,SAAS,MAAM,QAAQ,UAAU,EAAE,QAAQ,UAAU,IAAI,CAAC;AAAA,IACpE,QAAQ,EAAE,SAAS,MAAM,QAAQ,UAAU,EAAE,QAAQ,UAAU,IAAI,CAAC;AAAA,IACpE,SAAS,EAAE,UACP,MAAM,QAAQ,UAAU,EAAE,SAAS,CAAC,OAAO;AAAA,MACzC,OAAO,WAAW,EAAE,KAAK;AAAA,MACzB,QAAQ,WAAW,EAAE,MAAM;AAAA,IAC7B,EAAE,IACF,CAAC;AAAA,IACL,UAAU,EAAE,WACR,MAAM,QAAQ,UAAU,EAAE,UAAU,CAAC,OAAO;AAAA,MAC1C,cAAc;AAAA,QACZ,MAAM,EAAE,cAAc,QAAQ,CAAC;AAAA,QAC/B,UAAU,EAAE,cAAc,YAAY,EAAE,SAAS,OAAO,cAAc,CAAC,EAAE;AAAA,MAC3E;AAAA,MACA,SAAS;AAAA,QACP,MAAM,EAAE,SAAS,QAAQ,CAAC;AAAA,MAC5B;AAAA,MACA,UAAU,MAAM,QAAQ,UAAU,EAAE,UAAU,UAAU;AAAA,IAC1D,EAAE,IACF,CAAC;AAAA,EACP;AAEO,EAAMA,MAAA,SAAS,CAAC,MAAuD;AAC5E,UAAM,EAAE,IAAI,MAAM,SAAS,eAAe,UAAU,QAAQ,QAAQ,SAAS,KAAK,IAAI;AACtF,WAAO,EAAE,IAAI,MAAM,SAAS,eAAe,UAAU,QAAQ,QAAQ,SAAS,KAAK;AAAA,EACrF;AAEA,QAAM,aAAa,CACjB,OAC0F;AAAA,IAC1F,GAAG;AAAA,IACH,QAAQ,MAAM,OAAO,mBAAmB,CAAC;AAAA,EAC3C;AAAA,GA1Ce;",
  "names": ["from"]
}
