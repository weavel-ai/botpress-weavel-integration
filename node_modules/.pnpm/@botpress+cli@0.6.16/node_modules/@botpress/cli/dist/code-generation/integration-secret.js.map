{
  "version": 3,
  "sources": ["../../src/code-generation/integration-secret.ts"],
  "sourcesContent": ["import type { IntegrationDefinition } from '@botpress/sdk'\nimport { casing } from '../utils'\nimport { GENERATED_HEADER, INDEX_FILE } from './const'\nimport { Module } from './module'\n\nexport const secretEnvVariableName = (secretName: string) => `SECRET_${casing.to.screamingSnakeCase(secretName)}`\n\nexport class IntegrationSecretIndexModule extends Module {\n  public static async create(integration: IntegrationDefinition): Promise<IntegrationSecretIndexModule> {\n    let content = GENERATED_HEADER\n    content += 'class Secrets {\\n'\n    for (const [secretName, { optional }] of Object.entries(integration.secrets ?? {})) {\n      const envVariableName = secretEnvVariableName(secretName)\n      const fieldName = casing.to.screamingSnakeCase(secretName)\n\n      if (optional) {\n        content += `  public get ${fieldName}(): string | undefined {\\n`\n        content += `    const envVarValue = process.env.${envVariableName}\\n`\n        content += '    return envVarValue\\n'\n        content += '  }\\n'\n      } else {\n        content += `  public get ${fieldName}(): string {\\n`\n        content += `    const envVarValue = process.env.${envVariableName}\\n`\n        content += `    if (!envVarValue) throw new Error('Missing required secret \"${secretName}\"')\\n`\n        content += '    return envVarValue\\n'\n        content += '  }\\n'\n      }\n    }\n    content += '}\\n'\n    content += 'export const secrets = new Secrets()\\n'\n    return new IntegrationSecretIndexModule({ content, exportName: 'secrets', path: INDEX_FILE })\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAuB;AACvB,mBAA6C;AAC7C,oBAAuB;AAEhB,MAAM,wBAAwB,CAAC,eAAuB,UAAU,oBAAO,GAAG,mBAAmB,UAAU;AAEvG,MAAM,qCAAqC,qBAAO;AAAA,EACvD,aAAoB,OAAO,aAA2E;AACpG,QAAI,UAAU;AACd,eAAW;AACX,eAAW,CAAC,YAAY,EAAE,SAAS,CAAC,KAAK,OAAO,QAAQ,YAAY,WAAW,CAAC,CAAC,GAAG;AAClF,YAAM,kBAAkB,sBAAsB,UAAU;AACxD,YAAM,YAAY,oBAAO,GAAG,mBAAmB,UAAU;AAEzD,UAAI,UAAU;AACZ,mBAAW,gBAAgB;AAAA;AAC3B,mBAAW,uCAAuC;AAAA;AAClD,mBAAW;AACX,mBAAW;AAAA,MACb,OAAO;AACL,mBAAW,gBAAgB;AAAA;AAC3B,mBAAW,uCAAuC;AAAA;AAClD,mBAAW,mEAAmE;AAAA;AAC9E,mBAAW;AACX,mBAAW;AAAA,MACb;AAAA,IACF;AACA,eAAW;AACX,eAAW;AACX,WAAO,IAAI,6BAA6B,EAAE,SAAS,YAAY,WAAW,MAAM,wBAAW,CAAC;AAAA,EAC9F;AACF;",
  "names": []
}
