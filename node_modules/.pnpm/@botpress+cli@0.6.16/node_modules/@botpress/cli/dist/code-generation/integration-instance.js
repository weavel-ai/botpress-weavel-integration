"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var integration_instance_exports = {};
__export(integration_instance_exports, {
  IntegrationInstanceIndexModule: () => IntegrationInstanceIndexModule
});
module.exports = __toCommonJS(integration_instance_exports);
var import_utils = require("../utils");
var import_const = require("./const");
var import_generators = require("./generators");
var import_actions_module = require("./integration-schemas/actions-module");
var import_channels_module = require("./integration-schemas/channels-module");
var import_configuration_module = require("./integration-schemas/configuration-module");
var import_events_module = require("./integration-schemas/events-module");
var import_states_module = require("./integration-schemas/states-module");
var import_module = require("./module");
class IntegrationInstanceIndexModule extends import_module.Module {
  constructor(integration, configModule, actionsModule, channelsModule, eventsModule, statesModule, def) {
    super(def);
    this.integration = integration;
    this.configModule = configModule;
    this.actionsModule = actionsModule;
    this.channelsModule = channelsModule;
    this.eventsModule = eventsModule;
    this.statesModule = statesModule;
  }
  static async create(integration) {
    const { name } = integration;
    const configModule = await import_configuration_module.ConfigurationModule.create(integration.configuration ?? { schema: {} });
    configModule.unshift("configuration");
    const actionsModule = await import_actions_module.ActionsModule.create(integration.actions ?? {});
    actionsModule.unshift("actions");
    const channelsModule = await import_channels_module.ChannelsModule.create(integration.channels ?? {});
    channelsModule.unshift("channels");
    const eventsModule = await import_events_module.EventsModule.create(integration.events ?? {});
    eventsModule.unshift("events");
    const statesModule = await import_states_module.StatesModule.create(integration.states ?? {});
    statesModule.unshift("states");
    const exportName = import_utils.casing.to.pascalCase(name);
    const inst = new IntegrationInstanceIndexModule(
      integration,
      configModule,
      actionsModule,
      channelsModule,
      eventsModule,
      statesModule,
      {
        path: import_const.INDEX_FILE,
        content: "",
        exportName
      }
    );
    inst.pushDep(configModule);
    inst.pushDep(actionsModule);
    inst.pushDep(channelsModule);
    inst.pushDep(eventsModule);
    inst.pushDep(statesModule);
    return inst;
  }
  get content() {
    const { configModule, actionsModule, channelsModule, eventsModule, statesModule, integration } = this;
    const configImport = configModule.import(this);
    const actionsImport = actionsModule.import(this);
    const channelsImport = channelsModule.import(this);
    const eventsImport = eventsModule.import(this);
    const statesImport = statesModule.import(this);
    const { name, version, id } = integration;
    const className = import_utils.casing.to.pascalCase(name);
    const propsName = `${className}Props`;
    const integrationId = id === null ? "null" : `'${id}'`;
    const lines = [
      import_const.GENERATED_HEADER,
      "import type { IntegrationInstance } from '@botpress/sdk'",
      "",
      `import type * as ${configModule.name} from "./${configImport}"`,
      `import type * as ${actionsModule.name} from "./${actionsImport}"`,
      `import type * as ${channelsModule.name} from "./${channelsImport}"`,
      `import type * as ${eventsModule.name} from "./${eventsImport}"`,
      `import type * as ${statesModule.name} from "./${statesImport}"`,
      `export * as ${configModule.name} from "./${configImport}"`,
      `export * as ${actionsModule.name} from "./${actionsImport}"`,
      `export * as ${channelsModule.name} from "./${channelsImport}"`,
      `export * as ${eventsModule.name} from "./${eventsImport}"`,
      `export * as ${statesModule.name} from "./${statesImport}"`,
      "",
      `export type ${propsName} = {`,
      "  enabled?: boolean",
      `  config?: ${configModule.name}.${configModule.exports}`,
      "}",
      "",
      `export type T${className} = {`,
      `  name: '${name}'`,
      `  version: '${version}'`,
      `  configuration: ${configModule.name}.${configModule.exports}`,
      `  actions: ${actionsModule.name}.${actionsModule.exports}`,
      `  channels: ${channelsModule.name}.${channelsModule.exports}`,
      `  events: ${eventsModule.name}.${eventsModule.exports}`,
      `  states: ${statesModule.name}.${statesModule.exports}`,
      `  user: ${(0, import_generators.stringifySingleLine)(this.integration.user)}`,
      "}",
      "",
      `export class ${className} implements IntegrationInstance<'${name}'> {`,
      "",
      `  public readonly name = '${name}'`,
      `  public readonly version = '${version}'`,
      `  public readonly id = ${integrationId}`,
      "",
      "  public readonly enabled?: boolean",
      `  public readonly configuration?: ${configModule.name}.${configModule.exports}`,
      "",
      `  constructor(props?: ${propsName}) {`,
      "    this.enabled = props?.enabled",
      "    this.configuration = props?.config",
      "  }",
      "}"
    ];
    return `${import_const.GENERATED_HEADER}
${lines.join("\n")}`;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  IntegrationInstanceIndexModule
});
//# sourceMappingURL=integration-instance.js.map
