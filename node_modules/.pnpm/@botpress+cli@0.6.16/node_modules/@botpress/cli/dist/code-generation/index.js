"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var code_generation_exports = {};
__export(code_generation_exports, {
  File: () => import_typings.File,
  INTEGRATION_JSON: () => INTEGRATION_JSON,
  generateBotIndex: () => generateBotIndex,
  generateIntegrationImplementationTypings: () => generateIntegrationImplementationTypings,
  generateIntegrationIndex: () => generateIntegrationIndex,
  generateIntegrationInstance: () => generateIntegrationInstance,
  generateIntegrationSecrets: () => generateIntegrationSecrets,
  secretEnvVariableName: () => import_integration_secret2.secretEnvVariableName
});
module.exports = __toCommonJS(code_generation_exports);
var import_path = __toESM(require("path"));
var utils = __toESM(require("../utils"));
var import_const = require("./const");
var import_integration_implementation = require("./integration-implementation");
var import_integration_instance = require("./integration-instance");
var import_integration_secret = require("./integration-secret");
var mapIntegration = __toESM(require("./map-integration"));
var import_typings = require("./typings");
var import_integration_secret2 = require("./integration-secret");
const INTEGRATION_JSON = "integration.json";
const generateIntegrationImplementationTypings = async (sdkIntegration, implementationTypingsPath) => {
  const integration = mapIntegration.from.sdk(sdkIntegration);
  const indexModule = await import_integration_implementation.IntegrationImplementationIndexModule.create(integration);
  indexModule.unshift(implementationTypingsPath);
  return indexModule.flatten();
};
const generateIntegrationSecrets = async (sdkIntegration, secretsPath) => {
  const indexModule = await import_integration_secret.IntegrationSecretIndexModule.create(sdkIntegration);
  indexModule.unshift(secretsPath);
  return indexModule.flatten();
};
const generateIntegrationIndex = async (implementationTypingsPath, implementationSecretsPath) => {
  let content = "";
  content += `export * from './${implementationTypingsPath}'
`;
  content += `export * from './${implementationSecretsPath}'
`;
  return {
    path: import_const.INDEX_FILE,
    content
  };
};
const generateIntegrationInstance = async (anyIntegration, installPath) => {
  let integration;
  if ("id" in anyIntegration) {
    integration = mapIntegration.from.client(anyIntegration);
  } else {
    integration = mapIntegration.from.sdk(anyIntegration);
  }
  const indexModule = await import_integration_instance.IntegrationInstanceIndexModule.create(integration);
  const dirname = utils.casing.to.kebabCase(integration.name);
  indexModule.unshift(installPath, dirname);
  const files = indexModule.flatten();
  const { name, version, id } = integration;
  const json = {
    name,
    version,
    id
  };
  files.push({
    path: import_path.default.join(installPath, dirname, INTEGRATION_JSON),
    content: JSON.stringify(json, null, 2)
  });
  return files;
};
const generateBotIndex = async (installPath, instances) => {
  const lines = [
    import_const.GENERATED_HEADER,
    "import * as sdk from '@botpress/sdk'",
    ...instances.map((i) => `import * as ${utils.casing.to.camelCase(i.name)} from './${installPath}/${i.dirname}'`),
    ...instances.map((i) => `export * as ${utils.casing.to.camelCase(i.name)} from './${installPath}/${i.dirname}'`),
    "",
    "type TIntegrations = {",
    ...instances.map(
      (i) => `  "${i.name}": ${utils.casing.to.camelCase(i.name)}.T${utils.casing.to.pascalCase(i.dirname)}`
    ),
    "}",
    "",
    "type BaseStates = sdk.Bot extends sdk.Bot<any, infer TStates, any> ? TStates : never",
    "type BaseEvents = sdk.Bot extends sdk.Bot<any, any, infer TEvents> ? TEvents : never",
    "",
    "export class Bot<",
    "  TStates extends BaseStates,",
    "  TEvents extends BaseEvents",
    "> extends sdk.Bot<",
    "    TIntegrations,",
    "    TStates,",
    "    TEvents",
    "> {}"
  ];
  return {
    path: import_const.INDEX_FILE,
    content: lines.join("\n")
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  File,
  INTEGRATION_JSON,
  generateBotIndex,
  generateIntegrationImplementationTypings,
  generateIntegrationIndex,
  generateIntegrationInstance,
  generateIntegrationSecrets,
  secretEnvVariableName
});
//# sourceMappingURL=index.js.map
