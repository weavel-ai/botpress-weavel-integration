"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var map_integration_exports = {};
__export(map_integration_exports, {
  from: () => from
});
module.exports = __toCommonJS(map_integration_exports);
var utils = __toESM(require("../utils"));
var from;
((from2) => {
  from2.sdk = (i) => ({
    id: null,
    name: i.name,
    version: i.version,
    user: {
      tags: i.user?.tags ?? {},
      creation: i.user?.creation ?? { enabled: false, requiredTags: [] }
    },
    configuration: i.configuration ? _mapSchema(i.configuration) : { schema: {} },
    events: i.events ? utils.records.mapValues(i.events, _mapSchema) : {},
    states: i.states ? utils.records.mapValues(i.states, _mapSchema) : {},
    actions: i.actions ? utils.records.mapValues(i.actions, (a) => ({
      input: _mapSchema(a.input),
      output: _mapSchema(a.output)
    })) : {},
    channels: i.channels ? utils.records.mapValues(i.channels, (c) => ({
      conversation: {
        tags: c.conversation?.tags ?? {},
        creation: c.conversation?.creation ?? { enabled: false, requiredTags: [] }
      },
      message: {
        tags: c.message?.tags ?? {}
      },
      messages: utils.records.mapValues(c.messages, _mapSchema)
    })) : {}
  });
  from2.client = (i) => {
    const { id, name, version, configuration, channels, states, events, actions, user } = i;
    return { id, name, version, configuration, channels, states, events, actions, user };
  };
  const _mapSchema = (x) => ({
    ...x,
    schema: utils.schema.mapZodToJsonSchema(x)
  });
})(from || (from = {}));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  from
});
//# sourceMappingURL=map-integration.js.map
