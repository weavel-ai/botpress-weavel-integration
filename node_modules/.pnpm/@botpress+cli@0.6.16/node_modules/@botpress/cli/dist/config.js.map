{
  "version": 3,
  "sources": ["../src/config.ts"],
  "sourcesContent": ["import * as consts from './consts'\nimport type { CommandOption, CommandSchema } from './typings'\n\n// command options\n\nconst port = {\n  type: 'number',\n  description: 'The port to use',\n} satisfies CommandOption\n\nconst workDir = {\n  type: 'string',\n  description: 'The path to the project',\n  default: process.cwd(),\n} satisfies CommandOption\n\nconst noBuild = {\n  type: 'boolean',\n  description: 'Skip the build step',\n  default: false,\n} satisfies CommandOption\n\nconst apiUrl = {\n  type: 'string',\n  description: 'The URL of the Botpress server',\n} satisfies CommandOption\n\nconst token = {\n  type: 'string',\n  description: 'You Personal Access Token ',\n} satisfies CommandOption\n\nconst workspaceId = {\n  type: 'string',\n  description: 'The Workspace Id to deploy to',\n} satisfies CommandOption\n\nconst secrets = {\n  type: 'string',\n  description: 'Values for the integration secrets',\n  array: true,\n  default: [],\n} satisfies CommandOption\n\nconst botRef = {\n  type: 'string',\n  description: 'The bot ID. Bot Name is not supported.',\n  demandOption: true,\n  positional: true,\n  idx: 0,\n} satisfies CommandOption\n\nconst integrationRef = {\n  type: 'string',\n  description: 'The integration ID or name with optionnal version. Ex: teams or teams@0.2.0',\n  demandOption: true,\n  positional: true,\n  idx: 0,\n} satisfies CommandOption\n\nconst sourceMap = { type: 'boolean', description: 'Generate sourcemaps', default: false } satisfies CommandOption\n\nconst dev = {\n  type: 'boolean',\n  description: 'List only dev bots / dev integrations',\n  default: false,\n} satisfies CommandOption\n\nconst isPublic = {\n  type: 'boolean',\n  description: 'Weither or not to deploy the integration publicly',\n  default: false,\n} satisfies CommandOption\n\n// base schemas\n\nconst globalSchema = {\n  verbose: {\n    type: 'boolean',\n    description: 'Enable verbose logging',\n    alias: 'v',\n    default: false,\n  },\n  confirm: {\n    type: 'boolean',\n    description: 'Confirm all prompts',\n    alias: 'y',\n    default: false,\n  },\n  json: {\n    type: 'boolean',\n    description: 'Prevent logging anything else than raw json in stdout. Useful for piping output to other tools',\n    default: false,\n  },\n  botpressHome: {\n    type: 'string',\n    description: 'The path to the Botpress home directory',\n    default: consts.defaultBotpressHome,\n  },\n} satisfies CommandSchema\n\nconst projectSchema = {\n  ...globalSchema,\n  entryPoint: { type: 'string', description: 'The entry point of the project', default: consts.defaultEntrypoint },\n  outDir: { type: 'string', description: 'The output directory', default: consts.defaultOutputFolder },\n  workDir,\n} satisfies CommandSchema\n\nconst credentialsSchema = {\n  apiUrl,\n  workspaceId,\n  token,\n} satisfies CommandSchema\n\nconst secretsSchema = {\n  secrets,\n} satisfies CommandSchema\n\n// command schemas\n\nconst generateSchema = {\n  ...projectSchema,\n} satisfies CommandSchema\n\nconst bundleSchema = {\n  ...projectSchema,\n  sourceMap,\n} satisfies CommandSchema\n\nconst buildSchema = {\n  ...projectSchema,\n  sourceMap,\n} satisfies CommandSchema\n\nconst readSchema = {\n  ...projectSchema,\n} satisfies CommandSchema\n\nconst serveSchema = {\n  ...projectSchema,\n  ...secretsSchema,\n  port,\n} satisfies CommandSchema\n\nconst deploySchema = {\n  ...projectSchema,\n  ...credentialsSchema,\n  ...secretsSchema,\n  botId: { type: 'string', description: 'The bot ID to deploy. Only used when deploying a bot' },\n  noBuild,\n  createNewBot: { type: 'boolean', description: 'Create a new bot when deploying. Only used when deploying a bot' },\n  sourceMap,\n  public: isPublic,\n  allowDeprecated: {\n    type: 'boolean',\n    description: 'Allow deprecated features in the project',\n    default: false,\n  },\n} satisfies CommandSchema\n\nconst devSchema = {\n  ...projectSchema,\n  ...credentialsSchema,\n  ...secretsSchema,\n  sourceMap,\n  port,\n  tunnelUrl: {\n    type: 'string',\n    description: 'The tunnel HTTP URL to use',\n    default: consts.defaultTunnelUrl,\n  },\n} satisfies CommandSchema\n\nconst addSchema = {\n  ...projectSchema,\n  ...credentialsSchema,\n  integrationRef,\n} satisfies CommandSchema\n\nconst loginSchema = {\n  ...globalSchema,\n  token,\n  workspaceId,\n  apiUrl: { ...apiUrl, default: consts.defaultBotpressApiUrl },\n} satisfies CommandSchema\n\nconst logoutSchema = {\n  ...globalSchema,\n} satisfies CommandSchema\n\nconst createBotSchema = {\n  ...globalSchema,\n  ...credentialsSchema,\n  name: { type: 'string', description: 'The name of the bot to create' },\n} satisfies CommandSchema\n\nconst getBotSchema = {\n  ...globalSchema,\n  ...credentialsSchema,\n  botRef,\n} satisfies CommandSchema\n\nconst deleteBotSchema = {\n  ...globalSchema,\n  ...credentialsSchema,\n  botRef,\n} satisfies CommandSchema\n\nconst listBotsSchema = {\n  ...globalSchema,\n  ...credentialsSchema,\n  dev,\n} satisfies CommandSchema\n\nconst getIntegrationSchema = {\n  ...globalSchema,\n  ...credentialsSchema,\n  integrationRef,\n} satisfies CommandSchema\n\nconst listIntegrationsSchema = {\n  ...globalSchema,\n  ...credentialsSchema,\n  name: { type: 'string', description: 'The name filter when listing integrations' },\n  versionNumber: { type: 'string', description: 'The version filter when listing integrations' },\n  dev,\n} satisfies CommandSchema\n\nconst deleteIntegrationSchema = {\n  ...globalSchema,\n  ...credentialsSchema,\n  integrationRef,\n} satisfies CommandSchema\n\nconst initSchema = {\n  ...globalSchema,\n  workDir,\n  type: { type: 'string', choices: ['bot', 'integration'] as const },\n  name: { type: 'string', description: 'The name of the project' },\n} satisfies CommandSchema\n\n// exports\n\nexport const schemas = {\n  global: globalSchema,\n  project: projectSchema,\n  credentials: credentialsSchema,\n  secrets: secretsSchema,\n\n  login: loginSchema,\n  logout: logoutSchema,\n  createBot: createBotSchema,\n  getBot: getBotSchema,\n  deleteBot: deleteBotSchema,\n  listBots: listBotsSchema,\n  getIntegration: getIntegrationSchema,\n  listIntegrations: listIntegrationsSchema,\n  deleteIntegration: deleteIntegrationSchema,\n  init: initSchema,\n  generate: generateSchema,\n  bundle: bundleSchema,\n  build: buildSchema,\n  read: readSchema,\n  serve: serveSchema,\n  deploy: deploySchema,\n  add: addSchema,\n  dev: devSchema,\n} as const\n"],
  "mappings": "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",
  "names": []
}
