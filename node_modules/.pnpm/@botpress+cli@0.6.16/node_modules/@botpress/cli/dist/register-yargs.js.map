{
  "version": 3,
  "sources": ["../src/register-yargs.ts"],
  "sourcesContent": ["import yargs, { YargsArgv, YargsConfig, cleanupConfig, parseEnv } from '@bpinternal/yargs-extra'\nimport _ from 'lodash'\nimport * as tree from './command-tree'\nimport type * as typings from './typings'\n\nexport type YargsInstance = typeof yargs\n\nconst parseArguments = <S extends typings.CommandSchema>(schema: S, argv: YargsArgv<S>): YargsConfig<S> => {\n  const yargsEnv = parseEnv(schema, 'BP')\n  return cleanupConfig(schema, { ...argv, ...yargsEnv })\n}\n\nexport const registerYargs = (yargz: YargsInstance, commands: tree.CommandTree) => {\n  for (const cmdName in commands) {\n    const command = commands[cmdName] as tree.CommandTreeNode\n\n    if (tree.guards.command.isSubTree(command)) {\n      yargz.command(cmdName, command.description ?? cmdName, (y) => {\n        registerYargs(y, command.subcommands)\n        return y\n      })\n      continue\n    }\n\n    const { schema, description, alias } = command\n    const aliases = alias ? [cmdName, alias] : [cmdName]\n\n    const options = Object.entries(schema)\n    let positionals = options.filter(\n      (value): value is [string, typings.CommandPositionalOption] => !!value[1].positional\n    )\n\n    let usage = aliases\n    if (positionals.length) {\n      positionals = _.sortBy(positionals, ([, option]) => option.idx)\n      const positionalArgs = positionals.map(([optName, option]) =>\n        option.demandOption ? `<${optName}>` : `[${optName}]`\n      )\n      const positionalStr = positionalArgs.join(' ')\n      usage = aliases.map((optAlias) => `${optAlias} ${positionalStr}`)\n    }\n\n    yargz.command(\n      usage,\n      description ?? cmdName,\n      (y) => {\n        for (const [key, option] of Object.entries(schema)) {\n          if (option.positional) {\n            y = y.positional(key, option)\n          } else {\n            y = y.option(key, option)\n          }\n        }\n        return y\n      },\n      async (argv) => {\n        const parsed = parseArguments(schema, argv)\n        const { exitCode } = await command.handler({ ...parsed })\n        process.exit(exitCode)\n      }\n    )\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAuE;AACvE,oBAAc;AACd,WAAsB;AAKtB,MAAM,iBAAiB,CAAkC,QAAW,SAAuC;AACzG,QAAM,eAAW,6BAAS,QAAQ,IAAI;AACtC,aAAO,kCAAc,QAAQ,EAAE,GAAG,MAAM,GAAG,SAAS,CAAC;AACvD;AAEO,MAAM,gBAAgB,CAAC,OAAsB,aAA+B;AACjF,aAAW,WAAW,UAAU;AAC9B,UAAM,UAAU,SAAS;AAEzB,QAAI,KAAK,OAAO,QAAQ,UAAU,OAAO,GAAG;AAC1C,YAAM,QAAQ,SAAS,QAAQ,eAAe,SAAS,CAAC,MAAM;AAC5D,sBAAc,GAAG,QAAQ,WAAW;AACpC,eAAO;AAAA,MACT,CAAC;AACD;AAAA,IACF;AAEA,UAAM,EAAE,QAAQ,aAAa,MAAM,IAAI;AACvC,UAAM,UAAU,QAAQ,CAAC,SAAS,KAAK,IAAI,CAAC,OAAO;AAEnD,UAAM,UAAU,OAAO,QAAQ,MAAM;AACrC,QAAI,cAAc,QAAQ;AAAA,MACxB,CAAC,UAA8D,CAAC,CAAC,MAAM,GAAG;AAAA,IAC5E;AAEA,QAAI,QAAQ;AACZ,QAAI,YAAY,QAAQ;AACtB,oBAAc,cAAAA,QAAE,OAAO,aAAa,CAAC,CAAC,EAAE,MAAM,MAAM,OAAO,GAAG;AAC9D,YAAM,iBAAiB,YAAY;AAAA,QAAI,CAAC,CAAC,SAAS,MAAM,MACtD,OAAO,eAAe,IAAI,aAAa,IAAI;AAAA,MAC7C;AACA,YAAM,gBAAgB,eAAe,KAAK,GAAG;AAC7C,cAAQ,QAAQ,IAAI,CAAC,aAAa,GAAG,YAAY,eAAe;AAAA,IAClE;AAEA,UAAM;AAAA,MACJ;AAAA,MACA,eAAe;AAAA,MACf,CAAC,MAAM;AACL,mBAAW,CAAC,KAAK,MAAM,KAAK,OAAO,QAAQ,MAAM,GAAG;AAClD,cAAI,OAAO,YAAY;AACrB,gBAAI,EAAE,WAAW,KAAK,MAAM;AAAA,UAC9B,OAAO;AACL,gBAAI,EAAE,OAAO,KAAK,MAAM;AAAA,UAC1B;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MACA,OAAO,SAAS;AACd,cAAM,SAAS,eAAe,QAAQ,IAAI;AAC1C,cAAM,EAAE,SAAS,IAAI,MAAM,QAAQ,QAAQ,EAAE,GAAG,OAAO,CAAC;AACxD,gBAAQ,KAAK,QAAQ;AAAA,MACvB;AAAA,IACF;AAAA,EACF;AACF;",
  "names": ["_"]
}
