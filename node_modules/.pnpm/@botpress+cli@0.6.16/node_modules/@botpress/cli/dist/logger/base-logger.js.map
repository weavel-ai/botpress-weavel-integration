{
  "version": 3,
  "sources": ["../../src/logger/base-logger.ts"],
  "sourcesContent": ["import boxen from 'boxen'\nimport chalk from 'chalk'\nimport _ from 'lodash'\nimport util from 'util'\nimport * as utils from '../utils'\n\nexport type LoggerOptions = {\n  verbose: boolean\n  json?: boolean // prevents loggin anything else than json\n}\n\nconst STDOUT_CHUNK_SIZE = 100\nconst DEFAULT_OPTIONS: LoggerOptions = { verbose: false }\n\ntype ChalkColor = (str: string) => string\nconst NO_COLOR: ChalkColor = (str: string) => str\n\nconst PINK = [255, 100, 255] as const\nconst ORANGE = [255, 165, 0] as const\nconst PURPLE = [128, 0, 128] as const\n\nconst BG_COLORS: Record<Color, ChalkColor> = {\n  blue: chalk.bgBlueBright,\n  green: chalk.bgGreenBright,\n  yellow: chalk.bgYellowBright,\n  red: chalk.bgRedBright,\n  white: chalk.bgWhite,\n  pink: (str: string) => chalk.bgRgb(...PINK)(str),\n  orange: (str: string) => chalk.bgRgb(...ORANGE)(str),\n  purple: (str: string) => chalk.bgRgb(...PURPLE)(str),\n}\n\nconst FG_COLORS: Record<Color, ChalkColor> = {\n  blue: chalk.blueBright,\n  green: chalk.green,\n  yellow: chalk.yellowBright,\n  red: chalk.red,\n  white: chalk.white,\n  pink: (str: string) => chalk.rgb(...PINK)(str),\n  orange: (str: string) => chalk.rgb(...ORANGE)(str),\n  purple: (str: string) => chalk.rgb(...PURPLE)(str),\n}\n\ntype Symbol = '\u2713' | '\u26A0' | '\u00D7' | '\u25CF' | ' ' | '\u25CB'\ntype Color = 'blue' | 'green' | 'yellow' | 'red' | 'pink' | 'white' | 'orange' | 'purple'\ntype LogPrefix = { symbol: Symbol; fg?: Color; bg?: Color; indent?: number } | string\ntype SymbolRenderer<T extends Symbol> = { default: T; windows?: string; mac?: string }\n\ntype LogProps = {\n  prefix: LogPrefix\n  stderr?: boolean\n}\n\ntype PrintProps = {\n  metadata: any\n  prefix: string\n  stderr?: boolean\n}\n\nconst checkmark: SymbolRenderer<'\u2713'> = {\n  default: '\u2713',\n  windows: '\u221A',\n  mac: '\u2714',\n}\n\nconst cross: SymbolRenderer<'\u00D7'> = {\n  default: '\u00D7',\n  mac: '\u2716',\n}\n\nconst danger: SymbolRenderer<'\u26A0'> = { default: '\u26A0' }\nconst circle: SymbolRenderer<'\u25CB'> = { default: '\u25CB' }\nconst disc: SymbolRenderer<'\u25CF'> = { default: '\u25CF' }\nconst space: SymbolRenderer<' '> = { default: ' ' }\n\nconst renderers: Record<Symbol, SymbolRenderer<Symbol>> = {\n  '\u2713': checkmark,\n  '\u00D7': cross,\n  '\u26A0': danger,\n  '\u25CB': circle,\n  '\u25CF': disc,\n  ' ': space,\n}\n\nconst BOX_OPTIONS: boxen.Options = {\n  padding: 1,\n  margin: 1,\n  borderStyle: 'round',\n  borderColor: 'yellow',\n}\n\nexport abstract class BaseLogger {\n  protected opts: LoggerOptions\n\n  constructor(opts: Partial<LoggerOptions> = {}) {\n    this.opts = { ...DEFAULT_OPTIONS, ...opts }\n  }\n\n  public log(message: string, props: Partial<LogProps> = {}): void {\n    if (this.opts.json && !props.stderr) {\n      return\n    }\n\n    const prefix = this._resolvePrefix(props.prefix)\n    this.print(message, { ...props, prefix })\n  }\n\n  public json(data: any, opts: Partial<{ depth: number }> = { depth: Infinity }): void {\n    if (this.opts.json) {\n      this.print(JSON.stringify(data, undefined, 2))\n      return\n    }\n\n    const { depth } = opts\n    const msg = util.inspect(data, { colors: true, depth })\n    this.log(msg)\n  }\n\n  public debug(message: string): void {\n    if (!this.opts.verbose) {\n      return\n    }\n    this.log(chalk.grey(message), { prefix: { symbol: '\u25CF', fg: 'blue' } })\n  }\n\n  public started(message: string): void {\n    this.log(message, { prefix: { symbol: '\u25CB', fg: 'purple' } })\n  }\n\n  public success(message: string): void {\n    this.log(message, { prefix: { symbol: '\u2713', fg: 'green' } })\n  }\n\n  public warn(message: string): void {\n    this.log(message, { prefix: { symbol: '\u26A0', fg: 'yellow' } })\n  }\n\n  public error(message: string): void {\n    this.log(message, { prefix: { symbol: '\u00D7', fg: 'red' }, stderr: true })\n  }\n\n  public box(message: string): void {\n    const box = boxen(message, BOX_OPTIONS)\n    this.log(box)\n  }\n\n  protected abstract print(message: string, props?: Partial<PrintProps>): void\n\n  private _resolvePrefix(prefix: LogPrefix | undefined): string | undefined {\n    if (!prefix) {\n      return\n    }\n\n    if (_.isString(prefix)) {\n      return prefix\n    }\n\n    const { symbol, fg, bg, indent } = prefix\n    const renderedSymbol = this._renderSymbol(symbol)\n    const fgcolor = fg ? FG_COLORS[fg] : NO_COLOR\n    const bgcolor = bg ? BG_COLORS[bg] : NO_COLOR\n    const indentStr = indent ? ' '.repeat(indent) : ''\n    const symbolStr = fgcolor(bgcolor(renderedSymbol))\n    return `${indentStr}${symbolStr}`\n  }\n\n  private _renderSymbol(symbol: Symbol): string {\n    const renderer = renderers[symbol]\n    if (process.platform === 'win32') {\n      return renderer.windows || renderer.default\n    } else if (process.platform === 'darwin') {\n      return renderer.mac || renderer.default\n    } else {\n      return renderer.default\n    }\n  }\n\n  protected render(message: string, stream: NodeJS.WriteStream = process.stdout): void {\n    // chunking the message ensures that the process won't exit before the message is fully written\n    for (const chunk of utils.string.chunkString(message, STDOUT_CHUNK_SIZE)) {\n      stream.write(chunk)\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["chalk", "util", "boxen", "_"]
}
