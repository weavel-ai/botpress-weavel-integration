"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var logger_exports = {};
__export(logger_exports, {
  Logger: () => Logger
});
module.exports = __toCommonJS(logger_exports);
var import_readline = require("readline");
var import_base_logger = require("./base-logger");
class Logger extends import_base_logger.BaseLogger {
  static _previousLine;
  print(message, props = {}) {
    this.cleanup();
    const stream = props.stderr ? process.stderr : process.stdout;
    const { prefix } = props;
    if (prefix) {
      this.render(`${prefix} ${message}
`, stream);
      return;
    }
    this.render(`${message}
`, stream);
  }
  line() {
    this.cleanup();
    const currentLine = new SingleLineLogger({ ...this.opts });
    Logger._previousLine = currentLine;
    return currentLine;
  }
  cleanup() {
    if (Logger._previousLine) {
      Logger._previousLine.commit();
      Logger._previousLine = void 0;
    }
  }
}
class SingleLineLogger extends import_base_logger.BaseLogger {
  _commited = false;
  constructor(opts) {
    super(opts);
  }
  commit() {
    if (this._commited) {
      return;
    }
    this._commited = true;
    console.log();
  }
  print(message, props = {}) {
    if (this._commited) {
      return;
    }
    (0, import_readline.clearLine)(process.stdout, 0);
    const { prefix } = props;
    (0, import_readline.cursorTo)(process.stdout, 0);
    if (prefix) {
      this.render(`${prefix} ${message}`);
      return;
    }
    this.render(message);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Logger
});
//# sourceMappingURL=index.js.map
