{
  "version": 3,
  "sources": ["../../src/api/integration-body.ts"],
  "sourcesContent": ["import type { Client, Integration } from '@botpress/client'\nimport * as sdk from '@botpress/sdk'\nimport * as utils from '../utils'\n\nexport type CreateIntegrationBody = Parameters<Client['createIntegration']>[0]\nexport type UpdateIntegrationBody = Parameters<Client['updateIntegration']>[0]\n\ntype UpdateIntegrationChannelsBody = NonNullable<UpdateIntegrationBody['channels']>\ntype UpdateIntegrationChannelBody = UpdateIntegrationChannelsBody[string]\n\ntype Channels = Integration['channels']\ntype Channel = Integration['channels'][string]\n\nexport const prepareCreateIntegrationBody = (integration: sdk.IntegrationDefinition): CreateIntegrationBody => ({\n  name: integration.name,\n  version: integration.version,\n  title: integration.title,\n  description: integration.description,\n  icon: integration.icon,\n  readme: integration.readme,\n  user: integration.user,\n  identifier: integration.identifier,\n  secrets: undefined,\n  configuration: integration.configuration\n    ? {\n        ...integration.configuration,\n        schema: utils.schema.mapZodToJsonSchema(integration.configuration),\n      }\n    : undefined,\n  events: integration.events\n    ? utils.records.mapValues(integration.events, (event) => ({\n        ...event,\n        schema: utils.schema.mapZodToJsonSchema(event),\n      }))\n    : undefined,\n  actions: integration.actions\n    ? utils.records.mapValues(integration.actions, (action) => ({\n        ...action,\n        input: {\n          ...action.input,\n          schema: utils.schema.mapZodToJsonSchema(action.input),\n        },\n        output: {\n          ...action.output,\n          schema: utils.schema.mapZodToJsonSchema(action.output),\n        },\n      }))\n    : undefined,\n  channels: integration.channels\n    ? utils.records.mapValues(integration.channels, (channel) => ({\n        ...channel,\n        messages: utils.records.mapValues(channel.messages, (message) => ({\n          ...message,\n          schema: utils.schema.mapZodToJsonSchema(message),\n        })),\n      }))\n    : undefined,\n  states: integration.states\n    ? utils.records.mapValues(integration.states, (state) => ({\n        ...state,\n        schema: utils.schema.mapZodToJsonSchema(state),\n      }))\n    : undefined,\n  entities: integration.entities\n    ? utils.records.mapValues(integration.entities, (entity) => ({\n        ...entity,\n        schema: utils.schema.mapZodToJsonSchema(entity),\n      }))\n    : undefined,\n})\n\nexport const prepareUpdateIntegrationBody = (\n  localIntegration: UpdateIntegrationBody,\n  remoteIntegration: Integration\n): UpdateIntegrationBody => {\n  const actions = utils.records.setNullOnMissingValues(localIntegration.actions, remoteIntegration.actions)\n  const events = utils.records.setNullOnMissingValues(localIntegration.events, remoteIntegration.events)\n  const states = utils.records.setNullOnMissingValues(localIntegration.states, remoteIntegration.states)\n  const entities = utils.records.setNullOnMissingValues(localIntegration.entities, remoteIntegration.entities)\n  const user = {\n    ...localIntegration.user,\n    tags: utils.records.setNullOnMissingValues(localIntegration.user?.tags, remoteIntegration.user?.tags),\n  }\n\n  const channels = prepareUpdateIntegrationChannelsBody(localIntegration.channels ?? {}, remoteIntegration.channels)\n\n  return {\n    ...localIntegration,\n    actions,\n    events,\n    states,\n    entities,\n    user,\n    channels,\n  }\n}\n\nconst prepareUpdateIntegrationChannelsBody = (\n  localChannels: UpdateIntegrationChannelsBody,\n  remoteChannels: Channels\n): UpdateIntegrationChannelsBody => {\n  const channelBody: UpdateIntegrationChannelsBody = {}\n\n  const zipped = utils.records.zipObjects(localChannels, remoteChannels)\n  for (const [channelName, [localChannel, remoteChannel]] of Object.entries(zipped)) {\n    if (localChannel && remoteChannel) {\n      // channel has to be updated\n      channelBody[channelName] = prepareUpdateIntegrationChannelBody(localChannel, remoteChannel)\n    } else if (localChannel) {\n      // channel has to be created\n      channelBody[channelName] = localChannel\n      continue\n    } else if (remoteChannel) {\n      // channel has to be deleted\n      channelBody[channelName] = null\n      continue\n    }\n  }\n\n  return channelBody\n}\n\nconst prepareUpdateIntegrationChannelBody = (\n  localChannel: UpdateIntegrationChannelBody,\n  remoteChannel: Channel\n): UpdateIntegrationChannelBody => ({\n  ...localChannel,\n  messages: utils.records.setNullOnMissingValues(localChannel?.messages, remoteChannel.messages),\n  message: {\n    ...localChannel?.message,\n    tags: utils.records.setNullOnMissingValues(localChannel?.message?.tags, remoteChannel.message.tags),\n  },\n  conversation: {\n    ...localChannel?.conversation,\n    tags: utils.records.setNullOnMissingValues(localChannel?.conversation?.tags, remoteChannel.conversation.tags),\n  },\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,YAAuB;AAWhB,MAAM,+BAA+B,CAAC,iBAAmE;AAAA,EAC9G,MAAM,YAAY;AAAA,EAClB,SAAS,YAAY;AAAA,EACrB,OAAO,YAAY;AAAA,EACnB,aAAa,YAAY;AAAA,EACzB,MAAM,YAAY;AAAA,EAClB,QAAQ,YAAY;AAAA,EACpB,MAAM,YAAY;AAAA,EAClB,YAAY,YAAY;AAAA,EACxB,SAAS;AAAA,EACT,eAAe,YAAY,gBACvB;AAAA,IACE,GAAG,YAAY;AAAA,IACf,QAAQ,MAAM,OAAO,mBAAmB,YAAY,aAAa;AAAA,EACnE,IACA;AAAA,EACJ,QAAQ,YAAY,SAChB,MAAM,QAAQ,UAAU,YAAY,QAAQ,CAAC,WAAW;AAAA,IACtD,GAAG;AAAA,IACH,QAAQ,MAAM,OAAO,mBAAmB,KAAK;AAAA,EAC/C,EAAE,IACF;AAAA,EACJ,SAAS,YAAY,UACjB,MAAM,QAAQ,UAAU,YAAY,SAAS,CAAC,YAAY;AAAA,IACxD,GAAG;AAAA,IACH,OAAO;AAAA,MACL,GAAG,OAAO;AAAA,MACV,QAAQ,MAAM,OAAO,mBAAmB,OAAO,KAAK;AAAA,IACtD;AAAA,IACA,QAAQ;AAAA,MACN,GAAG,OAAO;AAAA,MACV,QAAQ,MAAM,OAAO,mBAAmB,OAAO,MAAM;AAAA,IACvD;AAAA,EACF,EAAE,IACF;AAAA,EACJ,UAAU,YAAY,WAClB,MAAM,QAAQ,UAAU,YAAY,UAAU,CAAC,aAAa;AAAA,IAC1D,GAAG;AAAA,IACH,UAAU,MAAM,QAAQ,UAAU,QAAQ,UAAU,CAAC,aAAa;AAAA,MAChE,GAAG;AAAA,MACH,QAAQ,MAAM,OAAO,mBAAmB,OAAO;AAAA,IACjD,EAAE;AAAA,EACJ,EAAE,IACF;AAAA,EACJ,QAAQ,YAAY,SAChB,MAAM,QAAQ,UAAU,YAAY,QAAQ,CAAC,WAAW;AAAA,IACtD,GAAG;AAAA,IACH,QAAQ,MAAM,OAAO,mBAAmB,KAAK;AAAA,EAC/C,EAAE,IACF;AAAA,EACJ,UAAU,YAAY,WAClB,MAAM,QAAQ,UAAU,YAAY,UAAU,CAAC,YAAY;AAAA,IACzD,GAAG;AAAA,IACH,QAAQ,MAAM,OAAO,mBAAmB,MAAM;AAAA,EAChD,EAAE,IACF;AACN;AAEO,MAAM,+BAA+B,CAC1C,kBACA,sBAC0B;AAC1B,QAAM,UAAU,MAAM,QAAQ,uBAAuB,iBAAiB,SAAS,kBAAkB,OAAO;AACxG,QAAM,SAAS,MAAM,QAAQ,uBAAuB,iBAAiB,QAAQ,kBAAkB,MAAM;AACrG,QAAM,SAAS,MAAM,QAAQ,uBAAuB,iBAAiB,QAAQ,kBAAkB,MAAM;AACrG,QAAM,WAAW,MAAM,QAAQ,uBAAuB,iBAAiB,UAAU,kBAAkB,QAAQ;AAC3G,QAAM,OAAO;AAAA,IACX,GAAG,iBAAiB;AAAA,IACpB,MAAM,MAAM,QAAQ,uBAAuB,iBAAiB,MAAM,MAAM,kBAAkB,MAAM,IAAI;AAAA,EACtG;AAEA,QAAM,WAAW,qCAAqC,iBAAiB,YAAY,CAAC,GAAG,kBAAkB,QAAQ;AAEjH,SAAO;AAAA,IACL,GAAG;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEA,MAAM,uCAAuC,CAC3C,eACA,mBACkC;AAClC,QAAM,cAA6C,CAAC;AAEpD,QAAM,SAAS,MAAM,QAAQ,WAAW,eAAe,cAAc;AACrE,aAAW,CAAC,aAAa,CAAC,cAAc,aAAa,CAAC,KAAK,OAAO,QAAQ,MAAM,GAAG;AACjF,QAAI,gBAAgB,eAAe;AAEjC,kBAAY,eAAe,oCAAoC,cAAc,aAAa;AAAA,IAC5F,WAAW,cAAc;AAEvB,kBAAY,eAAe;AAC3B;AAAA,IACF,WAAW,eAAe;AAExB,kBAAY,eAAe;AAC3B;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEA,MAAM,sCAAsC,CAC1C,cACA,mBACkC;AAAA,EAClC,GAAG;AAAA,EACH,UAAU,MAAM,QAAQ,uBAAuB,cAAc,UAAU,cAAc,QAAQ;AAAA,EAC7F,SAAS;AAAA,IACP,GAAG,cAAc;AAAA,IACjB,MAAM,MAAM,QAAQ,uBAAuB,cAAc,SAAS,MAAM,cAAc,QAAQ,IAAI;AAAA,EACpG;AAAA,EACA,cAAc;AAAA,IACZ,GAAG,cAAc;AAAA,IACjB,MAAM,MAAM,QAAQ,uBAAuB,cAAc,cAAc,MAAM,cAAc,aAAa,IAAI;AAAA,EAC9G;AACF;",
  "names": []
}
