{
  "version": 3,
  "sources": ["../src/integration-ref.test.ts"],
  "sourcesContent": ["import { describe } from 'node:test'\nimport { test, expect } from 'vitest'\nimport { formatIntegrationRef, IntegrationRef, parseIntegrationRef } from './integration-ref'\n\nconst path = '/my/path'\nconst prefixedUlid = 'intver_01HF58RDKE3M7K5RJ5XZ7GF6HE'\nconst uuid = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\nconst name = 'myintegration'\n\ndescribe('parseIntegrationRef', () => {\n  test('parse empty string should return undefined', () => {\n    // arrange\n    const ref = ''\n    // act\n    const result = parseIntegrationRef(ref)\n    // assert\n    expect(result).toBeUndefined()\n  })\n\n  test('parse with invalid version should return undefined', () => {\n    // arrange\n    const ref0 = `${name}@lol`\n    const ref1 = `${name}@1`\n    const ref2 = `${name}@1.0`\n    // act\n    const result0 = parseIntegrationRef(ref0)\n    const result1 = parseIntegrationRef(ref1)\n    const result2 = parseIntegrationRef(ref2)\n    // assert\n    expect(result0).toBeUndefined()\n    expect(result1).toBeUndefined()\n    expect(result2).toBeUndefined()\n  })\n\n  test('parse with an absolute path should return path', () => {\n    // arrange\n    const ref = path\n    // act\n    const result = parseIntegrationRef(ref)\n    // assert\n    const expected: IntegrationRef = { type: 'path', path: ref }\n    expect(result).toEqual(expected)\n  })\n\n  test('parse with a prefixed ULID sets `id` type', () => {\n    // arrange\n    const ref = prefixedUlid\n    // act\n    const result = parseIntegrationRef(ref)\n    // assert\n    const expected: IntegrationRef = { type: 'id', id: ref }\n    expect(result).toEqual(expected)\n  })\n\n  test('parse with a legacy UUID sets `id` type', () => {\n    // arrange\n    const ref = uuid\n    // act\n    const result = parseIntegrationRef(ref)\n    // assert\n    const expected: IntegrationRef = { type: 'id', id: ref }\n    expect(result).toEqual(expected)\n  })\n\n  test('parse with a name and version should return name and version', () => {\n    // arrange\n    const version = '1.0.0'\n    const ref = `${name}@${version}`\n    // act\n    const result = parseIntegrationRef(ref)\n    // assert\n    const expected: IntegrationRef = { type: 'name', name, version }\n    expect(result).toEqual(expected)\n  })\n\n  test('parse with a name and latest should return name and latest', () => {\n    // arrange\n    const version = 'latest'\n    const ref = `${name}@${version}`\n    // act\n    const result = parseIntegrationRef(ref)\n    // assert\n    const expected: IntegrationRef = { type: 'name', name, version }\n    expect(result).toEqual(expected)\n  })\n\n  test('parse with only a name should return name and latest', () => {\n    // arrange\n    const ref = name\n    // act\n    const result = parseIntegrationRef(ref)\n    // assert\n    const expected: IntegrationRef = { type: 'name', name, version: 'latest' }\n    expect(result).toEqual(expected)\n  })\n})\n\ndescribe('formatIntegrationRef', () => {\n  test('format with a path should return path', () => {\n    // arrange\n    const ref: IntegrationRef = { type: 'path', path }\n    // act\n    const result = formatIntegrationRef(ref)\n    // assert\n    expect(result).toEqual(ref.path)\n  })\n\n  test('format with a prefixed ULID uses `id` type', () => {\n    // arrange\n    const ref: IntegrationRef = { type: 'id', id: prefixedUlid }\n    // act\n    const result = formatIntegrationRef(ref)\n    // assert\n    expect(result).toEqual(ref.id)\n  })\n\n  test('format with a legacy UUID uses `id` type', () => {\n    // arrange\n    const ref: IntegrationRef = { type: 'id', id: uuid }\n    // act\n    const result = formatIntegrationRef(ref)\n    // assert\n    expect(result).toEqual(ref.id)\n  })\n\n  test('format with a name and version should return name and version', () => {\n    // arrange\n    const version = '1.0.0'\n    const ref: IntegrationRef = { type: 'name', name, version }\n    // act\n    const result = formatIntegrationRef(ref)\n    // assert\n    expect(result).toEqual(`${name}@${version}`)\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
