{
  "version": 3,
  "sources": ["../../src/command-implementations/gen-command.ts"],
  "sourcesContent": ["import type { IntegrationDefinition } from '@botpress/sdk'\nimport chalk from 'chalk'\nimport * as codegen from '../code-generation'\nimport type commandDefinitions from '../command-definitions'\nimport * as errors from '../errors'\nimport * as utils from '../utils'\nimport { ProjectCommand } from './project-command'\n\nexport type GenerateCommandDefinition = typeof commandDefinitions.generate\nexport class GenerateCommand extends ProjectCommand<GenerateCommandDefinition> {\n  public async run(): Promise<void> {\n    const integrationDef = await this.readIntegrationDefinitionFromFS()\n    if (!integrationDef) {\n      this.logger.warn('No typings to generate for bot')\n      return\n    }\n\n    this._validateSecrets(integrationDef)\n\n    const line = this.logger.line()\n\n    const { name } = integrationDef\n    line.started(`Generating typings for integration ${chalk.bold(name)}...`)\n\n    const fromWorkDir = this.projectPaths.rel('workDir')\n    const fromOutDir = this.projectPaths.rel('outDir')\n\n    const typingFiles = await codegen.generateIntegrationImplementationTypings(\n      integrationDef,\n      fromOutDir.implementationDir\n    )\n\n    const secretFiles = await codegen.generateIntegrationSecrets(integrationDef, fromOutDir.secretsDir)\n\n    const indexFile = await codegen.generateIntegrationIndex(fromOutDir.implementationDir, fromOutDir.secretsDir)\n\n    const generatedFiles = [...typingFiles, ...secretFiles, indexFile]\n\n    await this.writeGeneratedFilesToOutFolder(generatedFiles)\n\n    line.success(`Typings available at ${chalk.grey(fromWorkDir.outDir)}`)\n  }\n\n  private _validateSecrets(integrationDef: IntegrationDefinition): void {\n    const { secrets } = integrationDef\n    if (!secrets) {\n      return\n    }\n\n    for (const secretName in secrets) {\n      if (!utils.casing.is.screamingSnakeCase(secretName)) {\n        throw new errors.BotpressCLIError(`Secret ${secretName} should be in SCREAMING_SNAKE_CASE`)\n      }\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAkB;AAClB,cAAyB;AAEzB,aAAwB;AACxB,YAAuB;AACvB,6BAA+B;AAGxB,MAAM,wBAAwB,sCAA0C;AAAA,EAC7E,MAAa,MAAqB;AAChC,UAAM,iBAAiB,MAAM,KAAK,gCAAgC;AAClE,QAAI,CAAC,gBAAgB;AACnB,WAAK,OAAO,KAAK,gCAAgC;AACjD;AAAA,IACF;AAEA,SAAK,iBAAiB,cAAc;AAEpC,UAAM,OAAO,KAAK,OAAO,KAAK;AAE9B,UAAM,EAAE,KAAK,IAAI;AACjB,SAAK,QAAQ,sCAAsC,aAAAA,QAAM,KAAK,IAAI,MAAM;AAExE,UAAM,cAAc,KAAK,aAAa,IAAI,SAAS;AACnD,UAAM,aAAa,KAAK,aAAa,IAAI,QAAQ;AAEjD,UAAM,cAAc,MAAM,QAAQ;AAAA,MAChC;AAAA,MACA,WAAW;AAAA,IACb;AAEA,UAAM,cAAc,MAAM,QAAQ,2BAA2B,gBAAgB,WAAW,UAAU;AAElG,UAAM,YAAY,MAAM,QAAQ,yBAAyB,WAAW,mBAAmB,WAAW,UAAU;AAE5G,UAAM,iBAAiB,CAAC,GAAG,aAAa,GAAG,aAAa,SAAS;AAEjE,UAAM,KAAK,+BAA+B,cAAc;AAExD,SAAK,QAAQ,wBAAwB,aAAAA,QAAM,KAAK,YAAY,MAAM,GAAG;AAAA,EACvE;AAAA,EAEQ,iBAAiB,gBAA6C;AACpE,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,CAAC,SAAS;AACZ;AAAA,IACF;AAEA,eAAW,cAAc,SAAS;AAChC,UAAI,CAAC,MAAM,OAAO,GAAG,mBAAmB,UAAU,GAAG;AACnD,cAAM,IAAI,OAAO,iBAAiB,UAAU,8CAA8C;AAAA,MAC5F;AAAA,IACF;AAAA,EACF;AACF;",
  "names": ["chalk"]
}
