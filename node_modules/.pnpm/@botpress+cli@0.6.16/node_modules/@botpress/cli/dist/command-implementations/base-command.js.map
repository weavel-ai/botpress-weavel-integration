{
  "version": 3,
  "sources": ["../../src/command-implementations/base-command.ts"],
  "sourcesContent": ["import * as errors from '../errors'\nimport type { Logger } from '../logger'\nimport type { CommandArgv, CommandDefinition } from '../typings'\n\nexport abstract class BaseCommand<C extends CommandDefinition> {\n  public constructor(protected readonly logger: Logger, protected readonly argv: CommandArgv<C>) {}\n\n  protected abstract run(): Promise<void>\n  protected bootstrap?(): Promise<void>\n  protected teardown?(): Promise<void>\n\n  public async handler(): Promise<{ exitCode: number }> {\n    let exitCode = 0\n    try {\n      if (this.bootstrap) {\n        await this.bootstrap()\n      }\n      await this.run()\n    } catch (thrown) {\n      const error = errors.BotpressCLIError.map(thrown)\n\n      if (error.debug) {\n        const msg = error.message + ' (Run with verbose flag (-v) to see more details)'\n        this.logger.error(msg)\n        this.logger.debug(error.debug)\n      } else {\n        this.logger.error(error.message)\n      }\n\n      exitCode = 1\n    } finally {\n      if (this.teardown) {\n        await this.teardown()\n      }\n    }\n\n    return { exitCode }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AAIjB,MAAe,YAAyC;AAAA,EACtD,YAA+B,QAAmC,MAAsB;AAAzD;AAAmC;AAAA,EAAuB;AAAA,EAMhG,MAAa,UAAyC;AACpD,QAAI,WAAW;AACf,QAAI;AACF,UAAI,KAAK,WAAW;AAClB,cAAM,KAAK,UAAU;AAAA,MACvB;AACA,YAAM,KAAK,IAAI;AAAA,IACjB,SAAS,QAAP;AACA,YAAM,QAAQ,OAAO,iBAAiB,IAAI,MAAM;AAEhD,UAAI,MAAM,OAAO;AACf,cAAM,MAAM,MAAM,UAAU;AAC5B,aAAK,OAAO,MAAM,GAAG;AACrB,aAAK,OAAO,MAAM,MAAM,KAAK;AAAA,MAC/B,OAAO;AACL,aAAK,OAAO,MAAM,MAAM,OAAO;AAAA,MACjC;AAEA,iBAAW;AAAA,IACb,UAAE;AACA,UAAI,KAAK,UAAU;AACjB,cAAM,KAAK,SAAS;AAAA,MACtB;AAAA,IACF;AAEA,WAAO,EAAE,SAAS;AAAA,EACpB;AACF;",
  "names": []
}
