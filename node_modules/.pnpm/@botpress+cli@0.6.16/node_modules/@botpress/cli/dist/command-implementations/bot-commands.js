"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bot_commands_exports = {};
__export(bot_commands_exports, {
  CreateBotCommand: () => CreateBotCommand,
  DeleteBotCommand: () => DeleteBotCommand,
  GetBotCommand: () => GetBotCommand,
  ListBotsCommand: () => ListBotsCommand
});
module.exports = __toCommonJS(bot_commands_exports);
var import_chalk = __toESM(require("chalk"));
var errors = __toESM(require("../errors"));
var import_global_command = require("./global-command");
class GetBotCommand extends import_global_command.GlobalCommand {
  async run() {
    const { client } = await this.ensureLoginAndCreateClient(this.argv);
    try {
      const { bot } = await client.getBot({ id: this.argv.botRef });
      this.logger.success(`Bot ${import_chalk.default.bold(this.argv.botRef)}:`);
      this.logger.json(bot);
    } catch (thrown) {
      throw errors.BotpressCLIError.wrap(thrown, `Could not get bot ${this.argv.botRef}`);
    }
  }
}
class ListBotsCommand extends import_global_command.GlobalCommand {
  async run() {
    const api = await this.ensureLoginAndCreateClient(this.argv);
    try {
      const { dev } = this.argv;
      const bots = await api.listAllPages(
        (x) => api.client.listBots({ ...x, dev }),
        (r) => r.bots
      );
      this.logger.success("Bots:");
      this.logger.json(bots);
    } catch (thrown) {
      throw errors.BotpressCLIError.wrap(thrown, "Could not list bots");
    }
  }
}
class DeleteBotCommand extends import_global_command.GlobalCommand {
  async run() {
    const { client } = await this.ensureLoginAndCreateClient(this.argv);
    try {
      await client.deleteBot({ id: this.argv.botRef });
      this.logger.success(`Bot ${import_chalk.default.bold(this.argv.botRef)} deleted`);
    } catch (thrown) {
      throw errors.BotpressCLIError.wrap(thrown, `Could not delete bot ${this.argv.botRef}`);
    }
  }
}
class CreateBotCommand extends import_global_command.GlobalCommand {
  async run() {
    const { client } = await this.ensureLoginAndCreateClient(this.argv);
    try {
      const { bot } = await client.createBot({ name: this.argv.name });
      this.logger.success(`Bot ${import_chalk.default.bold(bot.id)}:`);
      this.logger.json(bot);
    } catch (thrown) {
      throw errors.BotpressCLIError.wrap(thrown, "Could not create bot");
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CreateBotCommand,
  DeleteBotCommand,
  GetBotCommand,
  ListBotsCommand
});
//# sourceMappingURL=bot-commands.js.map
