{
  "version": 3,
  "sources": ["../../src/command-implementations/deploy-command.ts"],
  "sourcesContent": ["import type * as client from '@botpress/client'\nimport type * as sdk from '@botpress/sdk'\nimport chalk from 'chalk'\nimport * as fs from 'fs'\nimport { prepareCreateBotBody, prepareUpdateBotBody } from '../api/bot-body'\nimport type { ApiClient } from '../api/client'\nimport {\n  prepareUpdateIntegrationBody,\n  CreateIntegrationBody,\n  prepareCreateIntegrationBody,\n} from '../api/integration-body'\nimport type commandDefinitions from '../command-definitions'\nimport * as errors from '../errors'\nimport * as utils from '../utils'\nimport { BuildCommand } from './build-command'\nimport { ProjectCommand } from './project-command'\n\nexport type DeployCommandDefinition = typeof commandDefinitions.deploy\nexport class DeployCommand extends ProjectCommand<DeployCommandDefinition> {\n  public async run(): Promise<void> {\n    const api = await this.ensureLoginAndCreateClient(this.argv)\n\n    if (!this.argv.noBuild) {\n      await this._runBuild() // This ensures the bundle is always synced with source code\n    }\n\n    const integrationDef = await this.readIntegrationDefinitionFromFS()\n    if (integrationDef) {\n      return this._deployIntegration(api, integrationDef)\n    }\n    return this._deployBot(api, this.argv.botId, this.argv.createNewBot)\n  }\n\n  private async _runBuild() {\n    return new BuildCommand(this.api, this.prompt, this.logger, this.argv).run()\n  }\n\n  private async _deployIntegration(api: ApiClient, integrationDef: sdk.IntegrationDefinition) {\n    const outfile = this.projectPaths.abs.outFile\n    const code = await fs.promises.readFile(outfile, 'utf-8')\n\n    const {\n      name,\n      version,\n      icon: iconRelativeFilePath,\n      readme: readmeRelativeFilePath,\n      identifier,\n      configuration,\n    } = integrationDef\n\n    if (iconRelativeFilePath && !iconRelativeFilePath.toLowerCase().endsWith('.svg')) {\n      throw new errors.BotpressCLIError('Icon must be an SVG file')\n    }\n\n    const iconFileContent = await this._readMediaFile('icon', iconRelativeFilePath)\n    const readmeFileContent = await this._readMediaFile('readme', readmeRelativeFilePath)\n    const identifierExtractScriptFileContent = await this._readFile(identifier?.extractScript)\n    const fallbackHandlerScriptFileContent = await this._readFile(identifier?.fallbackHandlerScript)\n    const identifierLinkTemplateFileContent = await this._readFile(configuration?.identifier?.linkTemplateScript)\n\n    const integration = await api.findIntegration({ type: 'name', name, version })\n    if (integration && !integration.workspaceId) {\n      throw new errors.BotpressCLIError(\n        `Public integration ${integrationDef.name} v${integrationDef.version} is already deployed in another workspace.`\n      )\n    }\n\n    let message: string\n    if (integration) {\n      this.logger.warn('Integration already exists. If you decide to deploy, it will overwrite the existing one.')\n      message = `Are you sure you want to override integration ${integrationDef.name} v${integrationDef.version}?`\n    } else {\n      message = `Are you sure you want to deploy integration ${integrationDef.name} v${integrationDef.version}?`\n    }\n\n    const confirm = await this.prompt.confirm(message)\n    if (!confirm) {\n      this.logger.log('Aborted')\n      return\n    }\n\n    let createBody: CreateIntegrationBody = prepareCreateIntegrationBody(integrationDef)\n    createBody = {\n      ...createBody,\n      code,\n      icon: iconFileContent,\n      readme: readmeFileContent,\n      configuration: {\n        ...createBody.configuration,\n        identifier: {\n          ...(createBody.configuration?.identifier ?? {}),\n          linkTemplateScript: identifierLinkTemplateFileContent,\n        },\n      },\n      identifier: {\n        extractScript: identifierExtractScriptFileContent,\n        fallbackHandlerScript: fallbackHandlerScriptFileContent,\n      },\n      public: this.argv.public,\n    }\n\n    const startedMessage = `Deploying integration ${chalk.bold(integrationDef.name)} v${integrationDef.version}...`\n    const successMessage = 'Integration deployed'\n    if (integration) {\n      const updateBody = prepareUpdateIntegrationBody(\n        {\n          id: integration.id,\n          ...createBody,\n          public: this.argv.public,\n        },\n        integration\n      )\n\n      const { secrets: knownSecrets } = integration\n      updateBody.secrets = await this.promptSecrets(integrationDef, this.argv, { knownSecrets })\n      this._detectDeprecatedFeatures(integrationDef, { allowDeprecated: true })\n\n      const line = this.logger.line()\n      line.started(startedMessage)\n      await api.client.updateIntegration(updateBody).catch((thrown) => {\n        throw errors.BotpressCLIError.wrap(thrown, `Could not update integration \"${integrationDef.name}\"`)\n      })\n      line.success(successMessage)\n    } else {\n      const createSecrets = await this.promptSecrets(integrationDef, this.argv)\n      createBody.secrets = utils.records.filterValues(createSecrets, utils.guards.is.notNull)\n      this._detectDeprecatedFeatures(integrationDef, this.argv)\n\n      const line = this.logger.line()\n      line.started(startedMessage)\n      await api.client.createIntegration(createBody).catch((thrown) => {\n        throw errors.BotpressCLIError.wrap(thrown, `Could not create integration \"${integrationDef.name}\"`)\n      })\n      line.success(successMessage)\n    }\n  }\n\n  private _detectDeprecatedFeatures(\n    integrationDef: sdk.IntegrationDefinition,\n    opts: { allowDeprecated?: boolean } = {}\n  ) {\n    const deprecatedFields: string[] = []\n    const { user, channels } = integrationDef\n    if (user?.creation?.enabled) {\n      deprecatedFields.push('user.creation')\n    }\n\n    for (const [channelName, channel] of Object.entries(channels ?? {})) {\n      if (channel?.conversation?.creation?.enabled) {\n        deprecatedFields.push(`channels.${channelName}.creation`)\n      }\n    }\n\n    if (!deprecatedFields.length) {\n      return\n    }\n\n    const errorMessage = `The following fields of the integration's definition are deprecated: ${deprecatedFields.join(\n      ', '\n    )}`\n\n    if (opts.allowDeprecated) {\n      this.logger.warn(errorMessage)\n    } else {\n      throw new errors.BotpressCLIError(errorMessage)\n    }\n  }\n\n  private _readFile = async (filePath: string | undefined): Promise<string | undefined> => {\n    if (!filePath) {\n      return undefined\n    }\n\n    const absoluteFilePath = utils.path.absoluteFrom(this.projectPaths.abs.workDir, filePath)\n    return fs.promises.readFile(absoluteFilePath, 'utf-8').catch((thrown) => {\n      throw errors.BotpressCLIError.wrap(thrown, `Could not read file \"${absoluteFilePath}\"`)\n    })\n  }\n\n  private _readMediaFile = async (\n    filePurpose: 'icon' | 'readme',\n    filePath: string | undefined\n  ): Promise<string | undefined> => {\n    if (!filePath) {\n      return undefined\n    }\n\n    const absoluteFilePath = utils.path.absoluteFrom(this.projectPaths.abs.workDir, filePath)\n    return fs.promises.readFile(absoluteFilePath, 'base64').catch((thrown) => {\n      throw errors.BotpressCLIError.wrap(thrown, `Could not read ${filePurpose} file \"${absoluteFilePath}\"`)\n    })\n  }\n\n  private async _deployBot(api: ApiClient, argvBotId: string | undefined, argvCreateNew: boolean | undefined) {\n    const outfile = this.projectPaths.abs.outFile\n    const code = await fs.promises.readFile(outfile, 'utf-8')\n    const { default: botImpl } = utils.require.requireJsFile<{ default: sdk.Bot }>(outfile)\n\n    let bot: client.Bot\n    if (argvBotId && argvCreateNew) {\n      throw new errors.BotpressCLIError('Cannot specify both --botId and --createNew')\n    } else if (argvCreateNew) {\n      const confirm = await this.prompt.confirm('Are you sure you want to create a new bot ?')\n      if (!confirm) {\n        this.logger.log('Aborted')\n        return\n      }\n\n      bot = await this._createNewBot(api)\n    } else {\n      bot = await this._getExistingBot(api, argvBotId)\n\n      const confirm = await this.prompt.confirm(`Are you sure you want to deploy the bot \"${bot.name}\"?`)\n      if (!confirm) {\n        this.logger.log('Aborted')\n        return\n      }\n    }\n\n    const line = this.logger.line()\n    line.started(`Deploying bot ${chalk.bold(bot.name)}...`)\n\n    const integrationInstances = await this.fetchBotIntegrationInstances(botImpl, api)\n    const updateBotBody = prepareUpdateBotBody(\n      {\n        ...prepareCreateBotBody(botImpl),\n        id: bot.id,\n        code,\n        integrations: integrationInstances,\n      },\n      bot\n    )\n\n    const { bot: updatedBot } = await api.client.updateBot(updateBotBody).catch((thrown) => {\n      throw errors.BotpressCLIError.wrap(thrown, `Could not update bot \"${bot.name}\"`)\n    })\n    line.success('Bot deployed')\n    this.displayWebhookUrls(updatedBot)\n  }\n\n  private async _createNewBot(api: ApiClient): Promise<client.Bot> {\n    const line = this.logger.line()\n    const { bot: createdBot } = await api.client.createBot({}).catch((thrown) => {\n      throw errors.BotpressCLIError.wrap(thrown, 'Could not create bot')\n    })\n    line.success(`Bot created with ID \"${createdBot.id}\" and name \"${createdBot.name}\"`)\n    await this.projectCache.set('botId', createdBot.id)\n    return createdBot\n  }\n\n  private async _getExistingBot(api: ApiClient, botId: string | undefined): Promise<client.Bot> {\n    const promptedBotId = await this.projectCache.sync('botId', botId, async (defaultId) => {\n      const userBots = await api\n        .listAllPages(api.client.listBots, (r) => r.bots)\n        .catch((thrown) => {\n          throw errors.BotpressCLIError.wrap(thrown, 'Could not fetch existing bots')\n        })\n\n      if (!userBots.length) {\n        throw new errors.NoBotsFoundError()\n      }\n\n      const initial = userBots.find((bot) => bot.id === defaultId)\n\n      const prompted = await this.prompt.select('Which bot do you want to deploy?', {\n        initial: initial && { title: initial.name, value: initial.id },\n        choices: userBots.map((bot) => ({ title: bot.name, value: bot.id })),\n      })\n\n      if (!prompted) {\n        throw new errors.ParamRequiredError('Bot Id')\n      }\n\n      return prompted\n    })\n\n    const { bot: fetchedBot } = await api.client.getBot({ id: promptedBotId }).catch((thrown) => {\n      throw errors.BotpressCLIError.wrap(thrown, 'Could not get bot info')\n    })\n\n    return fetchedBot\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAkB;AAClB,SAAoB;AACpB,sBAA2D;AAE3D,8BAIO;AAEP,aAAwB;AACxB,YAAuB;AACvB,2BAA6B;AAC7B,6BAA+B;AAGxB,MAAM,sBAAsB,sCAAwC;AAAA,EACzE,MAAa,MAAqB;AAChC,UAAM,MAAM,MAAM,KAAK,2BAA2B,KAAK,IAAI;AAE3D,QAAI,CAAC,KAAK,KAAK,SAAS;AACtB,YAAM,KAAK,UAAU;AAAA,IACvB;AAEA,UAAM,iBAAiB,MAAM,KAAK,gCAAgC;AAClE,QAAI,gBAAgB;AAClB,aAAO,KAAK,mBAAmB,KAAK,cAAc;AAAA,IACpD;AACA,WAAO,KAAK,WAAW,KAAK,KAAK,KAAK,OAAO,KAAK,KAAK,YAAY;AAAA,EACrE;AAAA,EAEA,MAAc,YAAY;AACxB,WAAO,IAAI,kCAAa,KAAK,KAAK,KAAK,QAAQ,KAAK,QAAQ,KAAK,IAAI,EAAE,IAAI;AAAA,EAC7E;AAAA,EAEA,MAAc,mBAAmB,KAAgB,gBAA2C;AAC1F,UAAM,UAAU,KAAK,aAAa,IAAI;AACtC,UAAM,OAAO,MAAM,GAAG,SAAS,SAAS,SAAS,OAAO;AAExD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACF,IAAI;AAEJ,QAAI,wBAAwB,CAAC,qBAAqB,YAAY,EAAE,SAAS,MAAM,GAAG;AAChF,YAAM,IAAI,OAAO,iBAAiB,0BAA0B;AAAA,IAC9D;AAEA,UAAM,kBAAkB,MAAM,KAAK,eAAe,QAAQ,oBAAoB;AAC9E,UAAM,oBAAoB,MAAM,KAAK,eAAe,UAAU,sBAAsB;AACpF,UAAM,qCAAqC,MAAM,KAAK,UAAU,YAAY,aAAa;AACzF,UAAM,mCAAmC,MAAM,KAAK,UAAU,YAAY,qBAAqB;AAC/F,UAAM,oCAAoC,MAAM,KAAK,UAAU,eAAe,YAAY,kBAAkB;AAE5G,UAAM,cAAc,MAAM,IAAI,gBAAgB,EAAE,MAAM,QAAQ,MAAM,QAAQ,CAAC;AAC7E,QAAI,eAAe,CAAC,YAAY,aAAa;AAC3C,YAAM,IAAI,OAAO;AAAA,QACf,sBAAsB,eAAe,SAAS,eAAe;AAAA,MAC/D;AAAA,IACF;AAEA,QAAI;AACJ,QAAI,aAAa;AACf,WAAK,OAAO,KAAK,0FAA0F;AAC3G,gBAAU,iDAAiD,eAAe,SAAS,eAAe;AAAA,IACpG,OAAO;AACL,gBAAU,+CAA+C,eAAe,SAAS,eAAe;AAAA,IAClG;AAEA,UAAM,UAAU,MAAM,KAAK,OAAO,QAAQ,OAAO;AACjD,QAAI,CAAC,SAAS;AACZ,WAAK,OAAO,IAAI,SAAS;AACzB;AAAA,IACF;AAEA,QAAI,iBAAoC,sDAA6B,cAAc;AACnF,iBAAa;AAAA,MACX,GAAG;AAAA,MACH;AAAA,MACA,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,eAAe;AAAA,QACb,GAAG,WAAW;AAAA,QACd,YAAY;AAAA,UACV,GAAI,WAAW,eAAe,cAAc,CAAC;AAAA,UAC7C,oBAAoB;AAAA,QACtB;AAAA,MACF;AAAA,MACA,YAAY;AAAA,QACV,eAAe;AAAA,QACf,uBAAuB;AAAA,MACzB;AAAA,MACA,QAAQ,KAAK,KAAK;AAAA,IACpB;AAEA,UAAM,iBAAiB,yBAAyB,aAAAA,QAAM,KAAK,eAAe,IAAI,MAAM,eAAe;AACnG,UAAM,iBAAiB;AACvB,QAAI,aAAa;AACf,YAAM,iBAAa;AAAA,QACjB;AAAA,UACE,IAAI,YAAY;AAAA,UAChB,GAAG;AAAA,UACH,QAAQ,KAAK,KAAK;AAAA,QACpB;AAAA,QACA;AAAA,MACF;AAEA,YAAM,EAAE,SAAS,aAAa,IAAI;AAClC,iBAAW,UAAU,MAAM,KAAK,cAAc,gBAAgB,KAAK,MAAM,EAAE,aAAa,CAAC;AACzF,WAAK,0BAA0B,gBAAgB,EAAE,iBAAiB,KAAK,CAAC;AAExE,YAAM,OAAO,KAAK,OAAO,KAAK;AAC9B,WAAK,QAAQ,cAAc;AAC3B,YAAM,IAAI,OAAO,kBAAkB,UAAU,EAAE,MAAM,CAAC,WAAW;AAC/D,cAAM,OAAO,iBAAiB,KAAK,QAAQ,iCAAiC,eAAe,OAAO;AAAA,MACpG,CAAC;AACD,WAAK,QAAQ,cAAc;AAAA,IAC7B,OAAO;AACL,YAAM,gBAAgB,MAAM,KAAK,cAAc,gBAAgB,KAAK,IAAI;AACxE,iBAAW,UAAU,MAAM,QAAQ,aAAa,eAAe,MAAM,OAAO,GAAG,OAAO;AACtF,WAAK,0BAA0B,gBAAgB,KAAK,IAAI;AAExD,YAAM,OAAO,KAAK,OAAO,KAAK;AAC9B,WAAK,QAAQ,cAAc;AAC3B,YAAM,IAAI,OAAO,kBAAkB,UAAU,EAAE,MAAM,CAAC,WAAW;AAC/D,cAAM,OAAO,iBAAiB,KAAK,QAAQ,iCAAiC,eAAe,OAAO;AAAA,MACpG,CAAC;AACD,WAAK,QAAQ,cAAc;AAAA,IAC7B;AAAA,EACF;AAAA,EAEQ,0BACN,gBACA,OAAsC,CAAC,GACvC;AACA,UAAM,mBAA6B,CAAC;AACpC,UAAM,EAAE,MAAM,SAAS,IAAI;AAC3B,QAAI,MAAM,UAAU,SAAS;AAC3B,uBAAiB,KAAK,eAAe;AAAA,IACvC;AAEA,eAAW,CAAC,aAAa,OAAO,KAAK,OAAO,QAAQ,YAAY,CAAC,CAAC,GAAG;AACnE,UAAI,SAAS,cAAc,UAAU,SAAS;AAC5C,yBAAiB,KAAK,YAAY,sBAAsB;AAAA,MAC1D;AAAA,IACF;AAEA,QAAI,CAAC,iBAAiB,QAAQ;AAC5B;AAAA,IACF;AAEA,UAAM,eAAe,wEAAwE,iBAAiB;AAAA,MAC5G;AAAA,IACF;AAEA,QAAI,KAAK,iBAAiB;AACxB,WAAK,OAAO,KAAK,YAAY;AAAA,IAC/B,OAAO;AACL,YAAM,IAAI,OAAO,iBAAiB,YAAY;AAAA,IAChD;AAAA,EACF;AAAA,EAEQ,YAAY,OAAO,aAA8D;AACvF,QAAI,CAAC,UAAU;AACb,aAAO;AAAA,IACT;AAEA,UAAM,mBAAmB,MAAM,KAAK,aAAa,KAAK,aAAa,IAAI,SAAS,QAAQ;AACxF,WAAO,GAAG,SAAS,SAAS,kBAAkB,OAAO,EAAE,MAAM,CAAC,WAAW;AACvE,YAAM,OAAO,iBAAiB,KAAK,QAAQ,wBAAwB,mBAAmB;AAAA,IACxF,CAAC;AAAA,EACH;AAAA,EAEQ,iBAAiB,OACvB,aACA,aACgC;AAChC,QAAI,CAAC,UAAU;AACb,aAAO;AAAA,IACT;AAEA,UAAM,mBAAmB,MAAM,KAAK,aAAa,KAAK,aAAa,IAAI,SAAS,QAAQ;AACxF,WAAO,GAAG,SAAS,SAAS,kBAAkB,QAAQ,EAAE,MAAM,CAAC,WAAW;AACxE,YAAM,OAAO,iBAAiB,KAAK,QAAQ,kBAAkB,qBAAqB,mBAAmB;AAAA,IACvG,CAAC;AAAA,EACH;AAAA,EAEA,MAAc,WAAW,KAAgB,WAA+B,eAAoC;AAC1G,UAAM,UAAU,KAAK,aAAa,IAAI;AACtC,UAAM,OAAO,MAAM,GAAG,SAAS,SAAS,SAAS,OAAO;AACxD,UAAM,EAAE,SAAS,QAAQ,IAAI,MAAM,QAAQ,cAAoC,OAAO;AAEtF,QAAI;AACJ,QAAI,aAAa,eAAe;AAC9B,YAAM,IAAI,OAAO,iBAAiB,6CAA6C;AAAA,IACjF,WAAW,eAAe;AACxB,YAAM,UAAU,MAAM,KAAK,OAAO,QAAQ,6CAA6C;AACvF,UAAI,CAAC,SAAS;AACZ,aAAK,OAAO,IAAI,SAAS;AACzB;AAAA,MACF;AAEA,YAAM,MAAM,KAAK,cAAc,GAAG;AAAA,IACpC,OAAO;AACL,YAAM,MAAM,KAAK,gBAAgB,KAAK,SAAS;AAE/C,YAAM,UAAU,MAAM,KAAK,OAAO,QAAQ,4CAA4C,IAAI,QAAQ;AAClG,UAAI,CAAC,SAAS;AACZ,aAAK,OAAO,IAAI,SAAS;AACzB;AAAA,MACF;AAAA,IACF;AAEA,UAAM,OAAO,KAAK,OAAO,KAAK;AAC9B,SAAK,QAAQ,iBAAiB,aAAAA,QAAM,KAAK,IAAI,IAAI,MAAM;AAEvD,UAAM,uBAAuB,MAAM,KAAK,6BAA6B,SAAS,GAAG;AACjF,UAAM,oBAAgB;AAAA,MACpB;AAAA,QACE,OAAG,sCAAqB,OAAO;AAAA,QAC/B,IAAI,IAAI;AAAA,QACR;AAAA,QACA,cAAc;AAAA,MAChB;AAAA,MACA;AAAA,IACF;AAEA,UAAM,EAAE,KAAK,WAAW,IAAI,MAAM,IAAI,OAAO,UAAU,aAAa,EAAE,MAAM,CAAC,WAAW;AACtF,YAAM,OAAO,iBAAiB,KAAK,QAAQ,yBAAyB,IAAI,OAAO;AAAA,IACjF,CAAC;AACD,SAAK,QAAQ,cAAc;AAC3B,SAAK,mBAAmB,UAAU;AAAA,EACpC;AAAA,EAEA,MAAc,cAAc,KAAqC;AAC/D,UAAM,OAAO,KAAK,OAAO,KAAK;AAC9B,UAAM,EAAE,KAAK,WAAW,IAAI,MAAM,IAAI,OAAO,UAAU,CAAC,CAAC,EAAE,MAAM,CAAC,WAAW;AAC3E,YAAM,OAAO,iBAAiB,KAAK,QAAQ,sBAAsB;AAAA,IACnE,CAAC;AACD,SAAK,QAAQ,wBAAwB,WAAW,iBAAiB,WAAW,OAAO;AACnF,UAAM,KAAK,aAAa,IAAI,SAAS,WAAW,EAAE;AAClD,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,gBAAgB,KAAgB,OAAgD;AAC5F,UAAM,gBAAgB,MAAM,KAAK,aAAa,KAAK,SAAS,OAAO,OAAO,cAAc;AACtF,YAAM,WAAW,MAAM,IACpB,aAAa,IAAI,OAAO,UAAU,CAAC,MAAM,EAAE,IAAI,EAC/C,MAAM,CAAC,WAAW;AACjB,cAAM,OAAO,iBAAiB,KAAK,QAAQ,+BAA+B;AAAA,MAC5E,CAAC;AAEH,UAAI,CAAC,SAAS,QAAQ;AACpB,cAAM,IAAI,OAAO,iBAAiB;AAAA,MACpC;AAEA,YAAM,UAAU,SAAS,KAAK,CAAC,QAAQ,IAAI,OAAO,SAAS;AAE3D,YAAM,WAAW,MAAM,KAAK,OAAO,OAAO,oCAAoC;AAAA,QAC5E,SAAS,WAAW,EAAE,OAAO,QAAQ,MAAM,OAAO,QAAQ,GAAG;AAAA,QAC7D,SAAS,SAAS,IAAI,CAAC,SAAS,EAAE,OAAO,IAAI,MAAM,OAAO,IAAI,GAAG,EAAE;AAAA,MACrE,CAAC;AAED,UAAI,CAAC,UAAU;AACb,cAAM,IAAI,OAAO,mBAAmB,QAAQ;AAAA,MAC9C;AAEA,aAAO;AAAA,IACT,CAAC;AAED,UAAM,EAAE,KAAK,WAAW,IAAI,MAAM,IAAI,OAAO,OAAO,EAAE,IAAI,cAAc,CAAC,EAAE,MAAM,CAAC,WAAW;AAC3F,YAAM,OAAO,iBAAiB,KAAK,QAAQ,wBAAwB;AAAA,IACrE,CAAC;AAED,WAAO;AAAA,EACT;AACF;",
  "names": ["chalk"]
}
