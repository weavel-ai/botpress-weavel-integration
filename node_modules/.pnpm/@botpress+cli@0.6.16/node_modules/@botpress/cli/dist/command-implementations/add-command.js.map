{
  "version": 3,
  "sources": ["../../src/command-implementations/add-command.ts"],
  "sourcesContent": ["import type * as client from '@botpress/client'\nimport type * as sdk from '@botpress/sdk'\nimport bluebird from 'bluebird'\nimport chalk from 'chalk'\nimport * as fs from 'fs'\nimport * as pathlib from 'path'\nimport * as codegen from '../code-generation'\nimport type commandDefinitions from '../command-definitions'\nimport * as consts from '../consts'\nimport * as errors from '../errors'\nimport {\n  ApiIntegrationRef,\n  formatIntegrationRef,\n  LocalPathIntegrationRef,\n  parseIntegrationRef,\n} from '../integration-ref'\nimport * as utils from '../utils'\nimport { ProjectCommand } from './project-command'\n\ntype IntegrationInstallDir = codegen.IntegrationInstanceJson & {\n  dirname: string\n}\n\nexport type AddCommandDefinition = typeof commandDefinitions.add\nexport class AddCommand extends ProjectCommand<AddCommandDefinition> {\n  public async run(): Promise<void> {\n    const integrationDef = await this.readIntegrationDefinitionFromFS()\n    if (integrationDef) {\n      throw new errors.ExclusiveBotFeatureError()\n    }\n\n    const integrationRef = this.argv.integrationRef\n\n    const parsedRef = parseIntegrationRef(integrationRef)\n    if (!parsedRef) {\n      throw new errors.InvalidIntegrationReferenceError(integrationRef)\n    }\n\n    const integration =\n      parsedRef.type === 'path'\n        ? await this._fetchLocalIntegration(parsedRef)\n        : await this._fetchApiIntegration(parsedRef)\n\n    const allInstances = await this._listIntegrationInstances()\n    const existingInstance = allInstances.find((i) => i.name === integration.name)\n    if (existingInstance) {\n      this.logger.warn(`Integration with name \"${integration.name}\" already installed.`)\n      const res = await this.prompt.confirm('Do you want to overwrite the existing instance?')\n      if (!res) {\n        this.logger.log('Aborted')\n        return\n      }\n\n      await this._uninstallIntegration(existingInstance)\n    }\n\n    await this._generateIntegrationInstance(integration)\n  }\n\n  private _fetchLocalIntegration = async (\n    integrationRef: LocalPathIntegrationRef\n  ): Promise<sdk.IntegrationDefinition> => {\n    this.logger.warn(\n      'Installing integration from a local path. There is no guarantee that the integration is deployed with the expected schemas.'\n    )\n\n    const workDir = integrationRef.path\n    const pathStore = new utils.path.PathStore<'workDir' | 'definition'>({\n      workDir,\n      definition: utils.path.absoluteFrom(workDir, consts.fromWorkDir.definition),\n    })\n    const integrationDefinition = await this.readIntegrationDefinitionFromFS(pathStore)\n    if (!integrationDefinition) {\n      throw new errors.BotpressCLIError(`Integration definition not found at ${workDir}`)\n    }\n    return integrationDefinition\n  }\n\n  private _fetchApiIntegration = async (integrationRef: ApiIntegrationRef): Promise<client.Integration> => {\n    const api = await this.ensureLoginAndCreateClient(this.argv)\n    const integration = await api.findIntegration(integrationRef)\n    if (!integration) {\n      const formattedRef = formatIntegrationRef(integrationRef)\n      throw new errors.BotpressCLIError(`Integration \"${formattedRef}\" not found`)\n    }\n    return integration\n  }\n\n  private async _listIntegrationInstances(): Promise<IntegrationInstallDir[]> {\n    const installPath = this.projectPaths.abs.installDir\n    if (!fs.existsSync(installPath)) {\n      this.logger.debug('Install path does not exist. Skipping listing of integration instances')\n      return []\n    }\n\n    const allFiles = await fs.promises.readdir(installPath)\n    const allPaths = allFiles.map((name) => pathlib.join(installPath, name))\n    const directories = await bluebird.filter(allPaths, async (path) => {\n      const stat = await fs.promises.stat(path)\n      return stat.isDirectory()\n    })\n\n    let jsons = directories.map((root) => ({ root, json: pathlib.join(root, codegen.INTEGRATION_JSON) }))\n    jsons = jsons.filter(({ json: x }) => fs.existsSync(x))\n\n    return bluebird.map(jsons, async ({ root, json }) => {\n      const content: string = await fs.promises.readFile(json, 'utf-8')\n      const { name, version, id } = JSON.parse(content) as codegen.IntegrationInstanceJson\n      const dirname = pathlib.basename(root)\n      return {\n        dirname,\n        id,\n        name,\n        version,\n      }\n    })\n  }\n\n  private async _uninstallIntegration(instance: IntegrationInstallDir) {\n    const installDir = this.projectPaths.abs.installDir\n    const instancePath = pathlib.join(installDir, instance.dirname)\n    await fs.promises.rm(instancePath, { recursive: true })\n    await this._generateBotIndex()\n  }\n\n  private async _generateIntegrationInstance(integration: client.Integration | sdk.IntegrationDefinition) {\n    const line = this.logger.line()\n\n    const { name, version } = integration\n    line.started(`Installing ${chalk.bold(name)} v${version}...`)\n\n    const instanceFiles = await codegen.generateIntegrationInstance(\n      integration,\n      this.projectPaths.rel('outDir').installDir\n    )\n    await this.writeGeneratedFilesToOutFolder(instanceFiles)\n    await this._generateBotIndex()\n\n    const rel = this.projectPaths.rel('workDir')\n    line.success(`Installed integration available at ${chalk.grey(rel.outDir)}`)\n  }\n\n  private async _generateBotIndex() {\n    const allInstances = await this._listIntegrationInstances()\n    const indexFile = await codegen.generateBotIndex(this.projectPaths.rel('outDir').installDir, allInstances)\n    await this.writeGeneratedFilesToOutFolder([indexFile])\n  }\n}\n"],
  "mappings": "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",
  "names": ["bluebird", "chalk"]
}
