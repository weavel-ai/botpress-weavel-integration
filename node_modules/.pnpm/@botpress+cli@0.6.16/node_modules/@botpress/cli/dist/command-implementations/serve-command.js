"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var serve_command_exports = {};
__export(serve_command_exports, {
  ServeCommand: () => ServeCommand
});
module.exports = __toCommonJS(serve_command_exports);
var fs = __toESM(require("fs"));
var errors = __toESM(require("../errors"));
var utils = __toESM(require("../utils"));
var import_project_command = require("./project-command");
class ServeCommand extends import_project_command.ProjectCommand {
  async run() {
    const outfile = this.projectPaths.abs.outFile;
    if (!fs.existsSync(outfile)) {
      throw new errors.NoBundleFoundError();
    }
    const integrationDef = await this.readIntegrationDefinitionFromFS();
    if (integrationDef) {
      const secretEnvVariables = await this.promptSecrets(integrationDef, this.argv, { formatEnv: true });
      const nonNullSecretEnvVariables = utils.records.filterValues(secretEnvVariables, utils.guards.is.notNull);
      for (const [key, value] of Object.entries(nonNullSecretEnvVariables)) {
        process.env[key] = value;
      }
    }
    this.logger.log(`Serving ${integrationDef ? "integration" : "bot"}...`);
    const { default: serveable } = utils.require.requireJsFile(outfile);
    const server = await serveable.start(this.argv.port);
    await new Promise((resolve, reject) => {
      server.on("error", reject);
      server.on("close", resolve);
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ServeCommand
});
//# sourceMappingURL=serve-command.js.map
