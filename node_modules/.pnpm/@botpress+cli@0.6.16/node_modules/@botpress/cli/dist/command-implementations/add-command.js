"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var add_command_exports = {};
__export(add_command_exports, {
  AddCommand: () => AddCommand
});
module.exports = __toCommonJS(add_command_exports);
var import_bluebird = __toESM(require("bluebird"));
var import_chalk = __toESM(require("chalk"));
var fs = __toESM(require("fs"));
var pathlib = __toESM(require("path"));
var codegen = __toESM(require("../code-generation"));
var consts = __toESM(require("../consts"));
var errors = __toESM(require("../errors"));
var import_integration_ref = require("../integration-ref");
var utils = __toESM(require("../utils"));
var import_project_command = require("./project-command");
class AddCommand extends import_project_command.ProjectCommand {
  async run() {
    const integrationDef = await this.readIntegrationDefinitionFromFS();
    if (integrationDef) {
      throw new errors.ExclusiveBotFeatureError();
    }
    const integrationRef = this.argv.integrationRef;
    const parsedRef = (0, import_integration_ref.parseIntegrationRef)(integrationRef);
    if (!parsedRef) {
      throw new errors.InvalidIntegrationReferenceError(integrationRef);
    }
    const integration = parsedRef.type === "path" ? await this._fetchLocalIntegration(parsedRef) : await this._fetchApiIntegration(parsedRef);
    const allInstances = await this._listIntegrationInstances();
    const existingInstance = allInstances.find((i) => i.name === integration.name);
    if (existingInstance) {
      this.logger.warn(`Integration with name "${integration.name}" already installed.`);
      const res = await this.prompt.confirm("Do you want to overwrite the existing instance?");
      if (!res) {
        this.logger.log("Aborted");
        return;
      }
      await this._uninstallIntegration(existingInstance);
    }
    await this._generateIntegrationInstance(integration);
  }
  _fetchLocalIntegration = async (integrationRef) => {
    this.logger.warn(
      "Installing integration from a local path. There is no guarantee that the integration is deployed with the expected schemas."
    );
    const workDir = integrationRef.path;
    const pathStore = new utils.path.PathStore({
      workDir,
      definition: utils.path.absoluteFrom(workDir, consts.fromWorkDir.definition)
    });
    const integrationDefinition = await this.readIntegrationDefinitionFromFS(pathStore);
    if (!integrationDefinition) {
      throw new errors.BotpressCLIError(`Integration definition not found at ${workDir}`);
    }
    return integrationDefinition;
  };
  _fetchApiIntegration = async (integrationRef) => {
    const api = await this.ensureLoginAndCreateClient(this.argv);
    const integration = await api.findIntegration(integrationRef);
    if (!integration) {
      const formattedRef = (0, import_integration_ref.formatIntegrationRef)(integrationRef);
      throw new errors.BotpressCLIError(`Integration "${formattedRef}" not found`);
    }
    return integration;
  };
  async _listIntegrationInstances() {
    const installPath = this.projectPaths.abs.installDir;
    if (!fs.existsSync(installPath)) {
      this.logger.debug("Install path does not exist. Skipping listing of integration instances");
      return [];
    }
    const allFiles = await fs.promises.readdir(installPath);
    const allPaths = allFiles.map((name) => pathlib.join(installPath, name));
    const directories = await import_bluebird.default.filter(allPaths, async (path) => {
      const stat = await fs.promises.stat(path);
      return stat.isDirectory();
    });
    let jsons = directories.map((root) => ({ root, json: pathlib.join(root, codegen.INTEGRATION_JSON) }));
    jsons = jsons.filter(({ json: x }) => fs.existsSync(x));
    return import_bluebird.default.map(jsons, async ({ root, json }) => {
      const content = await fs.promises.readFile(json, "utf-8");
      const { name, version, id } = JSON.parse(content);
      const dirname = pathlib.basename(root);
      return {
        dirname,
        id,
        name,
        version
      };
    });
  }
  async _uninstallIntegration(instance) {
    const installDir = this.projectPaths.abs.installDir;
    const instancePath = pathlib.join(installDir, instance.dirname);
    await fs.promises.rm(instancePath, { recursive: true });
    await this._generateBotIndex();
  }
  async _generateIntegrationInstance(integration) {
    const line = this.logger.line();
    const { name, version } = integration;
    line.started(`Installing ${import_chalk.default.bold(name)} v${version}...`);
    const instanceFiles = await codegen.generateIntegrationInstance(
      integration,
      this.projectPaths.rel("outDir").installDir
    );
    await this.writeGeneratedFilesToOutFolder(instanceFiles);
    await this._generateBotIndex();
    const rel = this.projectPaths.rel("workDir");
    line.success(`Installed integration available at ${import_chalk.default.grey(rel.outDir)}`);
  }
  async _generateBotIndex() {
    const allInstances = await this._listIntegrationInstances();
    const indexFile = await codegen.generateBotIndex(this.projectPaths.rel("outDir").installDir, allInstances);
    await this.writeGeneratedFilesToOutFolder([indexFile]);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AddCommand
});
//# sourceMappingURL=add-command.js.map
