"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bundle_command_exports = {};
__export(bundle_command_exports, {
  BundleCommand: () => BundleCommand
});
module.exports = __toCommonJS(bundle_command_exports);
var import_chalk = __toESM(require("chalk"));
var utils = __toESM(require("../utils"));
var import_project_command = require("./project-command");
class BundleCommand extends import_project_command.ProjectCommand {
  async run() {
    const integrationDef = await this.readIntegrationDefinitionFromFS();
    const abs = this.projectPaths.abs;
    const rel = this.projectPaths.rel("workDir");
    const line = this.logger.line();
    const logLevel = this.argv.verbose ? "info" : "silent";
    if (integrationDef) {
      const { name } = integrationDef;
      line.started(`Bundling integration ${import_chalk.default.bold(name)}...`);
    } else {
      line.started("Bundling bot...");
    }
    const unixPath = utils.path.toUnix(rel.entryPoint);
    const importFrom = utils.path.rmExtension(unixPath);
    const code = `import x from './${importFrom}'; export default x; export const handler = x.handler;`;
    const outfile = abs.outFile;
    line.debug(`Writing bundle to ${outfile}`);
    await utils.esbuild.buildCode({
      code,
      cwd: abs.workDir,
      outfile,
      logLevel,
      write: true,
      sourcemap: this.argv.sourceMap
    });
    line.success(`Bundle available at ${import_chalk.default.grey(rel.outDir)}`);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BundleCommand
});
//# sourceMappingURL=bundle-command.js.map
