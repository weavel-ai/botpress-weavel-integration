{
  "version": 3,
  "sources": ["../../src/command-implementations/global-command.ts"],
  "sourcesContent": ["import type { YargsConfig } from '@bpinternal/yargs-extra'\nimport chalk from 'chalk'\nimport latestVersion from 'latest-version'\nimport _ from 'lodash'\nimport semver from 'semver'\nimport type { ApiClientFactory } from '../api/client'\nimport type * as config from '../config'\nimport * as consts from '../consts'\nimport * as errors from '../errors'\nimport type { CommandArgv, CommandDefinition } from '../typings'\nimport * as utils from '../utils'\nimport { BaseCommand } from './base-command'\n\nexport type GlobalCommandDefinition = CommandDefinition<typeof config.schemas.global>\nexport type GlobalCache = { apiUrl: string; token: string; workspaceId: string }\n\nexport type ConfigurableGlobalPaths = { botpressHomeDir: string; cliRootDir: utils.path.AbsolutePath }\nexport type ConstantGlobalPaths = typeof consts.fromHomeDir & typeof consts.fromCliRootDir\nexport type AllGlobalPaths = ConfigurableGlobalPaths & ConstantGlobalPaths\n\nclass GlobalPaths extends utils.path.PathStore<keyof AllGlobalPaths> {\n  public constructor(argv: CommandArgv<GlobalCommandDefinition>) {\n    const absBotpressHome = utils.path.absoluteFrom(utils.path.cwd(), argv.botpressHome)\n    super({\n      cliRootDir: consts.cliRootDir,\n      botpressHomeDir: absBotpressHome,\n      ..._.mapValues(consts.fromHomeDir, (p) => utils.path.absoluteFrom(absBotpressHome, p)),\n      ..._.mapValues(consts.fromCliRootDir, (p) => utils.path.absoluteFrom(consts.cliRootDir, p)),\n    })\n  }\n}\n\nexport abstract class GlobalCommand<C extends GlobalCommandDefinition> extends BaseCommand<C> {\n  protected api: ApiClientFactory\n  protected prompt: utils.prompt.CLIPrompt\n  private _pkgJson: utils.pkgJson.PackageJson | undefined\n\n  public constructor(\n    api: ApiClientFactory,\n    prompt: utils.prompt.CLIPrompt,\n    ...args: ConstructorParameters<typeof BaseCommand<C>>\n  ) {\n    super(...args)\n    this.api = api\n    this.prompt = prompt\n  }\n\n  protected get globalPaths() {\n    return new GlobalPaths(this.argv)\n  }\n\n  protected get globalCache() {\n    return new utils.cache.FSKeyValueCache<GlobalCache>(this.globalPaths.abs.globalCacheFile)\n  }\n\n  protected override async bootstrap() {\n    const pkgJson = await this.readPkgJson()\n    const versionText = chalk.bold(`v${pkgJson.version}`)\n    this.logger.log(`Botpress CLI ${versionText}`, { prefix: '\uD83E\uDD16' })\n\n    await this._notifyUpdateCli()\n\n    const paths = this.globalPaths\n    if (paths.abs.botpressHomeDir !== consts.defaultBotpressHome) {\n      this.logger.log(`Using custom botpress home: ${paths.abs.botpressHomeDir}`, { prefix: '\uD83C\uDFE0' })\n    }\n  }\n\n  protected override teardown = async () => {\n    this.logger.cleanup()\n  }\n\n  protected async ensureLoginAndCreateClient(credentials: YargsConfig<typeof config.schemas.credentials>) {\n    const cache = this.globalCache\n    const token = await cache.get('token')\n    const workspaceId = credentials.workspaceId ?? (await cache.get('workspaceId'))\n    const apiUrl = credentials.apiUrl ?? (await cache.get('apiUrl'))\n\n    if (!(token && workspaceId && apiUrl)) {\n      throw new errors.NotLoggedInError()\n    }\n\n    if (apiUrl !== consts.defaultBotpressApiUrl) {\n      this.logger.log(`Using custom url ${apiUrl}`, { prefix: '\uD83D\uDD17' })\n    }\n\n    return this.api.newClient({ apiUrl, token, workspaceId }, this.logger)\n  }\n\n  private _notifyUpdateCli = async (): Promise<void> => {\n    try {\n      this.logger.debug('Checking if cli is up to date')\n\n      const pkgJson = await this.readPkgJson()\n      if (!pkgJson.version) {\n        throw new errors.BotpressCLIError('Could not find version in package.json')\n      }\n\n      const latest = await latestVersion(pkgJson.name)\n      const isOutdated = semver.lt(pkgJson.version, latest)\n      if (isOutdated) {\n        this.logger.box(\n          [\n            `${chalk.bold('Update available')} ${chalk.dim(pkgJson.version)} \u2192 ${chalk.green(latest)}`,\n            '',\n            'To update, run:',\n            `  for npm  ${chalk.cyan(`npm i -g ${pkgJson.name}`)}`,\n            `  for yarn ${chalk.cyan(`yarn global add ${pkgJson.name}`)}`,\n            `  for pnpm ${chalk.cyan(`pnpm i -g ${pkgJson.name}`)}`,\n          ].join('\\n')\n        )\n      }\n    } catch (thrown) {\n      const err = errors.BotpressCLIError.map(thrown)\n      this.logger.debug(`Failed to check if cli is up to date: ${err.message}`)\n    }\n  }\n\n  protected async readPkgJson(): Promise<utils.pkgJson.PackageJson> {\n    if (this._pkgJson) {\n      return this._pkgJson\n    }\n    const { cliRootDir } = this.globalPaths.abs\n    const pkgJson = await utils.pkgJson.readPackageJson(cliRootDir)\n    if (!pkgJson) {\n      throw new errors.BotpressCLIError(`Could not find package.json at \"${cliRootDir}\"`)\n    }\n\n    this._pkgJson = pkgJson\n    return pkgJson\n  }\n}\n"],
  "mappings": "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",
  "names": ["_", "chalk", "latestVersion", "semver"]
}
