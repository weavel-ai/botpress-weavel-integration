{
  "version": 3,
  "sources": ["../../src/command-implementations/login-command.ts"],
  "sourcesContent": ["import * as client from '@botpress/client'\nimport * as paging from '../api/paging'\nimport type commandDefinitions from '../command-definitions'\nimport * as errors from '../errors'\nimport { GlobalCommand } from './global-command'\n\nexport type LoginCommandDefinition = typeof commandDefinitions.login\nexport class LoginCommand extends GlobalCommand<LoginCommandDefinition> {\n  public async run(): Promise<void> {\n    const promptedToken = await this.globalCache.sync('token', this.argv.token, async (previousToken) => {\n      const prompted = await this.prompt.text('Enter your Personal Access Token', {\n        initial: previousToken,\n      })\n\n      if (!prompted) {\n        throw new errors.ParamRequiredError('Personal Access Token')\n      }\n\n      return prompted\n    })\n\n    const promptedWorkspaceId = await this.globalCache.sync('workspaceId', this.argv.workspaceId, async (defaultId) => {\n      const tmpClient = new client.Client({ apiUrl: this.argv.apiUrl, token: promptedToken }) // no workspaceId yet\n      const userWorkspaces = await paging\n        .listAllPages(tmpClient.listWorkspaces, (r) => r.workspaces)\n        .catch((thrown) => {\n          throw errors.BotpressCLIError.wrap(thrown, 'Could not list workspaces')\n        })\n\n      if (userWorkspaces.length === 0) {\n        throw new errors.NoWorkspacesFoundError()\n      }\n\n      const initial = userWorkspaces.find((ws) => ws.id === defaultId)\n\n      const prompted = await this.prompt.select('Which workspace do you want to login to?', {\n        initial: initial && { title: initial.name, value: initial.id },\n        choices: userWorkspaces.map((ws) => ({ title: ws.name, value: ws.id })),\n      })\n\n      if (!prompted) {\n        throw new errors.ParamRequiredError('Workspace Id')\n      }\n\n      return prompted\n    })\n\n    await this.globalCache.set('apiUrl', this.argv.apiUrl)\n\n    const api = this.api.newClient(\n      { apiUrl: this.argv.apiUrl, token: promptedToken, workspaceId: promptedWorkspaceId },\n      this.logger\n    )\n\n    await api.testLogin().catch((thrown) => {\n      throw errors.BotpressCLIError.wrap(thrown, 'Login failed. Please check your credentials')\n    })\n\n    this.logger.success('Logged In')\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AACxB,aAAwB;AAExB,aAAwB;AACxB,4BAA8B;AAGvB,MAAM,qBAAqB,oCAAsC;AAAA,EACtE,MAAa,MAAqB;AAChC,UAAM,gBAAgB,MAAM,KAAK,YAAY,KAAK,SAAS,KAAK,KAAK,OAAO,OAAO,kBAAkB;AACnG,YAAM,WAAW,MAAM,KAAK,OAAO,KAAK,oCAAoC;AAAA,QAC1E,SAAS;AAAA,MACX,CAAC;AAED,UAAI,CAAC,UAAU;AACb,cAAM,IAAI,OAAO,mBAAmB,uBAAuB;AAAA,MAC7D;AAEA,aAAO;AAAA,IACT,CAAC;AAED,UAAM,sBAAsB,MAAM,KAAK,YAAY,KAAK,eAAe,KAAK,KAAK,aAAa,OAAO,cAAc;AACjH,YAAM,YAAY,IAAI,OAAO,OAAO,EAAE,QAAQ,KAAK,KAAK,QAAQ,OAAO,cAAc,CAAC;AACtF,YAAM,iBAAiB,MAAM,OAC1B,aAAa,UAAU,gBAAgB,CAAC,MAAM,EAAE,UAAU,EAC1D,MAAM,CAAC,WAAW;AACjB,cAAM,OAAO,iBAAiB,KAAK,QAAQ,2BAA2B;AAAA,MACxE,CAAC;AAEH,UAAI,eAAe,WAAW,GAAG;AAC/B,cAAM,IAAI,OAAO,uBAAuB;AAAA,MAC1C;AAEA,YAAM,UAAU,eAAe,KAAK,CAAC,OAAO,GAAG,OAAO,SAAS;AAE/D,YAAM,WAAW,MAAM,KAAK,OAAO,OAAO,4CAA4C;AAAA,QACpF,SAAS,WAAW,EAAE,OAAO,QAAQ,MAAM,OAAO,QAAQ,GAAG;AAAA,QAC7D,SAAS,eAAe,IAAI,CAAC,QAAQ,EAAE,OAAO,GAAG,MAAM,OAAO,GAAG,GAAG,EAAE;AAAA,MACxE,CAAC;AAED,UAAI,CAAC,UAAU;AACb,cAAM,IAAI,OAAO,mBAAmB,cAAc;AAAA,MACpD;AAEA,aAAO;AAAA,IACT,CAAC;AAED,UAAM,KAAK,YAAY,IAAI,UAAU,KAAK,KAAK,MAAM;AAErD,UAAM,MAAM,KAAK,IAAI;AAAA,MACnB,EAAE,QAAQ,KAAK,KAAK,QAAQ,OAAO,eAAe,aAAa,oBAAoB;AAAA,MACnF,KAAK;AAAA,IACP;AAEA,UAAM,IAAI,UAAU,EAAE,MAAM,CAAC,WAAW;AACtC,YAAM,OAAO,iBAAiB,KAAK,QAAQ,6CAA6C;AAAA,IAC1F,CAAC;AAED,SAAK,OAAO,QAAQ,WAAW;AAAA,EACjC;AACF;",
  "names": []
}
