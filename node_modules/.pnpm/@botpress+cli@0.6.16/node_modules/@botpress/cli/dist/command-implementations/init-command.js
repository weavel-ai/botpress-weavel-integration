"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var init_command_exports = {};
__export(init_command_exports, {
  InitCommand: () => InitCommand
});
module.exports = __toCommonJS(init_command_exports);
var import_chalk = __toESM(require("chalk"));
var fs = __toESM(require("fs"));
var pathlib = __toESM(require("path"));
var consts = __toESM(require("../consts"));
var errors = __toESM(require("../errors"));
var utils = __toESM(require("../utils"));
var import_global_command = require("./global-command");
class InitCommand extends import_global_command.GlobalCommand {
  async run() {
    let { type: projectType } = this.argv;
    if (!projectType) {
      const promptedType = await this.prompt.select("What type of project do you wish to initialize?", {
        choices: ["bot", "integration"].map((t) => ({ title: t, value: t }))
      });
      if (!promptedType) {
        throw new errors.ParamRequiredError("Project Type");
      }
      projectType = promptedType;
    }
    let name = this.argv.name;
    if (!name) {
      const defaultName = projectType === "bot" ? consts.echoBotDirName : consts.emptyIntegrationDirName;
      const promptMessage = `What is the name of your ${projectType}?`;
      const promptedName = await this.prompt.text(promptMessage, { initial: defaultName });
      if (!promptedName) {
        throw new errors.ParamRequiredError("Project Name");
      }
      name = promptedName;
    }
    const workDir = utils.path.absoluteFrom(utils.path.cwd(), this.argv.workDir);
    if (projectType === "bot") {
      await this._copy({ srcDir: this.globalPaths.abs.echoBotTemplate, destDir: workDir, name });
      this.logger.success(`Bot project initialized in ${import_chalk.default.bold(workDir)}`);
      return;
    }
    await this._copy({ srcDir: this.globalPaths.abs.emptyIntegrationTemplate, destDir: workDir, name });
    this.logger.success(`Integration project initialized in ${import_chalk.default.bold(this.argv.workDir)}`);
    return;
  }
  _copy = async (props) => {
    const { srcDir, destDir, name } = props;
    const dirName = utils.casing.to.kebabCase(name);
    const destination = pathlib.join(destDir, dirName);
    const exist = await this._checkIfDestinationExists(destination);
    if (exist) {
      return;
    }
    await fs.promises.cp(srcDir, destination, { recursive: true });
    const pkgJsonPath = pathlib.join(destination, "package.json");
    const strContent = await fs.promises.readFile(pkgJsonPath, "utf-8");
    const { name: _, integrationName: __, ...json } = JSON.parse(strContent);
    const pkgJsonName = utils.casing.to.snakeCase(name);
    const updatedJson = { name: pkgJsonName, integrationName: name, ...json };
    await fs.promises.writeFile(pkgJsonPath, JSON.stringify(updatedJson, null, 2));
  };
  _checkIfDestinationExists = async (destination) => {
    if (fs.existsSync(destination)) {
      const override = await this.prompt.confirm(
        `Directory ${import_chalk.default.bold(destination)} already exists. Do you want to overwrite it?`
      );
      if (!override) {
        this.logger.log("Aborting");
        return true;
      }
    }
    return false;
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InitCommand
});
//# sourceMappingURL=init-command.js.map
