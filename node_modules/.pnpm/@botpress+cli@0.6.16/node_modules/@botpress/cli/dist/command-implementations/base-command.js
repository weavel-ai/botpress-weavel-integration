"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var base_command_exports = {};
__export(base_command_exports, {
  BaseCommand: () => BaseCommand
});
module.exports = __toCommonJS(base_command_exports);
var errors = __toESM(require("../errors"));
class BaseCommand {
  constructor(logger, argv) {
    this.logger = logger;
    this.argv = argv;
  }
  async handler() {
    let exitCode = 0;
    try {
      if (this.bootstrap) {
        await this.bootstrap();
      }
      await this.run();
    } catch (thrown) {
      const error = errors.BotpressCLIError.map(thrown);
      if (error.debug) {
        const msg = error.message + " (Run with verbose flag (-v) to see more details)";
        this.logger.error(msg);
        this.logger.debug(error.debug);
      } else {
        this.logger.error(error.message);
      }
      exitCode = 1;
    } finally {
      if (this.teardown) {
        await this.teardown();
      }
    }
    return { exitCode };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BaseCommand
});
//# sourceMappingURL=base-command.js.map
