{
  "version": 3,
  "sources": ["../src/command-definitions.ts"],
  "sourcesContent": ["import type { DefinitionTree } from './command-tree'\nimport * as config from './config'\n\nexport default {\n  login: { description: 'Login to Botpress Cloud', schema: config.schemas.login },\n  logout: { description: 'Logout of Botpress Cloud', schema: config.schemas.logout },\n  bots: {\n    description: 'Bot related commands',\n    subcommands: {\n      create: { description: 'Create new bot', schema: config.schemas.createBot, alias: 'new' },\n      get: { description: 'Get bot', schema: config.schemas.getBot },\n      delete: { description: 'Delete bot', schema: config.schemas.deleteBot },\n      list: { description: 'List bots', schema: config.schemas.listBots, alias: 'ls' },\n    },\n  },\n  integrations: {\n    description: 'Integration related commands',\n    subcommands: {\n      get: { description: 'Get integration', schema: config.schemas.getIntegration },\n      delete: { description: 'Delete integration', schema: config.schemas.deleteIntegration },\n      list: { description: 'List integrations', schema: config.schemas.listIntegrations, alias: 'ls' },\n    },\n  },\n  init: { description: 'Initialize a new project', schema: config.schemas.init },\n  generate: { description: 'Generate typings for intellisense', schema: config.schemas.generate, alias: 'gen' },\n  bundle: { description: 'Bundle a botpress project', schema: config.schemas.bundle },\n  build: { description: 'Generate typings and bundle a botpress project', schema: config.schemas.build },\n  read: { description: 'Read and parse an integration definition', schema: config.schemas.read },\n  serve: { description: 'Serve your project locally', schema: config.schemas.serve },\n  deploy: { description: 'Deploy your project to the cloud', schema: config.schemas.deploy },\n  add: { description: 'Install an integration in your bot', schema: config.schemas.add },\n  dev: { description: 'Run your project in dev mode', schema: config.schemas.dev },\n} satisfies DefinitionTree\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,aAAwB;AAExB,IAAO,8BAAQ;AAAA,EACb,OAAO,EAAE,aAAa,2BAA2B,QAAQ,OAAO,QAAQ,MAAM;AAAA,EAC9E,QAAQ,EAAE,aAAa,4BAA4B,QAAQ,OAAO,QAAQ,OAAO;AAAA,EACjF,MAAM;AAAA,IACJ,aAAa;AAAA,IACb,aAAa;AAAA,MACX,QAAQ,EAAE,aAAa,kBAAkB,QAAQ,OAAO,QAAQ,WAAW,OAAO,MAAM;AAAA,MACxF,KAAK,EAAE,aAAa,WAAW,QAAQ,OAAO,QAAQ,OAAO;AAAA,MAC7D,QAAQ,EAAE,aAAa,cAAc,QAAQ,OAAO,QAAQ,UAAU;AAAA,MACtE,MAAM,EAAE,aAAa,aAAa,QAAQ,OAAO,QAAQ,UAAU,OAAO,KAAK;AAAA,IACjF;AAAA,EACF;AAAA,EACA,cAAc;AAAA,IACZ,aAAa;AAAA,IACb,aAAa;AAAA,MACX,KAAK,EAAE,aAAa,mBAAmB,QAAQ,OAAO,QAAQ,eAAe;AAAA,MAC7E,QAAQ,EAAE,aAAa,sBAAsB,QAAQ,OAAO,QAAQ,kBAAkB;AAAA,MACtF,MAAM,EAAE,aAAa,qBAAqB,QAAQ,OAAO,QAAQ,kBAAkB,OAAO,KAAK;AAAA,IACjG;AAAA,EACF;AAAA,EACA,MAAM,EAAE,aAAa,4BAA4B,QAAQ,OAAO,QAAQ,KAAK;AAAA,EAC7E,UAAU,EAAE,aAAa,qCAAqC,QAAQ,OAAO,QAAQ,UAAU,OAAO,MAAM;AAAA,EAC5G,QAAQ,EAAE,aAAa,6BAA6B,QAAQ,OAAO,QAAQ,OAAO;AAAA,EAClF,OAAO,EAAE,aAAa,kDAAkD,QAAQ,OAAO,QAAQ,MAAM;AAAA,EACrG,MAAM,EAAE,aAAa,4CAA4C,QAAQ,OAAO,QAAQ,KAAK;AAAA,EAC7F,OAAO,EAAE,aAAa,8BAA8B,QAAQ,OAAO,QAAQ,MAAM;AAAA,EACjF,QAAQ,EAAE,aAAa,oCAAoC,QAAQ,OAAO,QAAQ,OAAO;AAAA,EACzF,KAAK,EAAE,aAAa,sCAAsC,QAAQ,OAAO,QAAQ,IAAI;AAAA,EACrF,KAAK,EAAE,aAAa,gCAAgC,QAAQ,OAAO,QAAQ,IAAI;AACjF;",
  "names": []
}
