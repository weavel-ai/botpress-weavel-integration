"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var config_exports = {};
__export(config_exports, {
  schemas: () => schemas
});
module.exports = __toCommonJS(config_exports);
var consts = __toESM(require("./consts"));
const port = {
  type: "number",
  description: "The port to use"
};
const workDir = {
  type: "string",
  description: "The path to the project",
  default: process.cwd()
};
const noBuild = {
  type: "boolean",
  description: "Skip the build step",
  default: false
};
const apiUrl = {
  type: "string",
  description: "The URL of the Botpress server"
};
const token = {
  type: "string",
  description: "You Personal Access Token "
};
const workspaceId = {
  type: "string",
  description: "The Workspace Id to deploy to"
};
const secrets = {
  type: "string",
  description: "Values for the integration secrets",
  array: true,
  default: []
};
const botRef = {
  type: "string",
  description: "The bot ID. Bot Name is not supported.",
  demandOption: true,
  positional: true,
  idx: 0
};
const integrationRef = {
  type: "string",
  description: "The integration ID or name with optionnal version. Ex: teams or teams@0.2.0",
  demandOption: true,
  positional: true,
  idx: 0
};
const sourceMap = { type: "boolean", description: "Generate sourcemaps", default: false };
const dev = {
  type: "boolean",
  description: "List only dev bots / dev integrations",
  default: false
};
const isPublic = {
  type: "boolean",
  description: "Weither or not to deploy the integration publicly",
  default: false
};
const globalSchema = {
  verbose: {
    type: "boolean",
    description: "Enable verbose logging",
    alias: "v",
    default: false
  },
  confirm: {
    type: "boolean",
    description: "Confirm all prompts",
    alias: "y",
    default: false
  },
  json: {
    type: "boolean",
    description: "Prevent logging anything else than raw json in stdout. Useful for piping output to other tools",
    default: false
  },
  botpressHome: {
    type: "string",
    description: "The path to the Botpress home directory",
    default: consts.defaultBotpressHome
  }
};
const projectSchema = {
  ...globalSchema,
  entryPoint: { type: "string", description: "The entry point of the project", default: consts.defaultEntrypoint },
  outDir: { type: "string", description: "The output directory", default: consts.defaultOutputFolder },
  workDir
};
const credentialsSchema = {
  apiUrl,
  workspaceId,
  token
};
const secretsSchema = {
  secrets
};
const generateSchema = {
  ...projectSchema
};
const bundleSchema = {
  ...projectSchema,
  sourceMap
};
const buildSchema = {
  ...projectSchema,
  sourceMap
};
const readSchema = {
  ...projectSchema
};
const serveSchema = {
  ...projectSchema,
  ...secretsSchema,
  port
};
const deploySchema = {
  ...projectSchema,
  ...credentialsSchema,
  ...secretsSchema,
  botId: { type: "string", description: "The bot ID to deploy. Only used when deploying a bot" },
  noBuild,
  createNewBot: { type: "boolean", description: "Create a new bot when deploying. Only used when deploying a bot" },
  sourceMap,
  public: isPublic,
  allowDeprecated: {
    type: "boolean",
    description: "Allow deprecated features in the project",
    default: false
  }
};
const devSchema = {
  ...projectSchema,
  ...credentialsSchema,
  ...secretsSchema,
  sourceMap,
  port,
  tunnelUrl: {
    type: "string",
    description: "The tunnel HTTP URL to use",
    default: consts.defaultTunnelUrl
  }
};
const addSchema = {
  ...projectSchema,
  ...credentialsSchema,
  integrationRef
};
const loginSchema = {
  ...globalSchema,
  token,
  workspaceId,
  apiUrl: { ...apiUrl, default: consts.defaultBotpressApiUrl }
};
const logoutSchema = {
  ...globalSchema
};
const createBotSchema = {
  ...globalSchema,
  ...credentialsSchema,
  name: { type: "string", description: "The name of the bot to create" }
};
const getBotSchema = {
  ...globalSchema,
  ...credentialsSchema,
  botRef
};
const deleteBotSchema = {
  ...globalSchema,
  ...credentialsSchema,
  botRef
};
const listBotsSchema = {
  ...globalSchema,
  ...credentialsSchema,
  dev
};
const getIntegrationSchema = {
  ...globalSchema,
  ...credentialsSchema,
  integrationRef
};
const listIntegrationsSchema = {
  ...globalSchema,
  ...credentialsSchema,
  name: { type: "string", description: "The name filter when listing integrations" },
  versionNumber: { type: "string", description: "The version filter when listing integrations" },
  dev
};
const deleteIntegrationSchema = {
  ...globalSchema,
  ...credentialsSchema,
  integrationRef
};
const initSchema = {
  ...globalSchema,
  workDir,
  type: { type: "string", choices: ["bot", "integration"] },
  name: { type: "string", description: "The name of the project" }
};
const schemas = {
  global: globalSchema,
  project: projectSchema,
  credentials: credentialsSchema,
  secrets: secretsSchema,
  login: loginSchema,
  logout: logoutSchema,
  createBot: createBotSchema,
  getBot: getBotSchema,
  deleteBot: deleteBotSchema,
  listBots: listBotsSchema,
  getIntegration: getIntegrationSchema,
  listIntegrations: listIntegrationsSchema,
  deleteIntegration: deleteIntegrationSchema,
  init: initSchema,
  generate: generateSchema,
  bundle: bundleSchema,
  build: buildSchema,
  read: readSchema,
  serve: serveSchema,
  deploy: deploySchema,
  add: addSchema,
  dev: devSchema
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  schemas
});
//# sourceMappingURL=config.js.map
