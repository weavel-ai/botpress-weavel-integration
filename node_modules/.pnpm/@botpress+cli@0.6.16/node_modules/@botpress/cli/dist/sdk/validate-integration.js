"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var validate_integration_exports = {};
__export(validate_integration_exports, {
  validateIntegrationDefinition: () => validateIntegrationDefinition
});
module.exports = __toCommonJS(validate_integration_exports);
var errors = __toESM(require("../errors"));
var utils = __toESM(require("../utils"));
const validateIntegrationDefinition = (i) => {
  const { actions, channels, events, states } = i;
  const invalidActionNames = _nonCamelCaseKeys(actions ?? {});
  if (invalidActionNames.length) {
    throw new errors.BotpressCLIError(
      `The following action names are not in camelCase: ${invalidActionNames.join(", ")}`
    );
  }
  const invalidChannelNames = _nonCamelCaseKeys(channels ?? {});
  if (invalidChannelNames.length) {
    throw new errors.BotpressCLIError(
      `The following channel names are not in camelCase: ${invalidChannelNames.join(", ")}`
    );
  }
  const invalidMessageNames = Object.entries(channels ?? {}).flatMap(
    ([channelName, channel]) => _nonCamelCaseKeys(channel.messages ?? {}).map((message) => `${channelName}.${message}`)
  );
  if (invalidMessageNames.length) {
    throw new errors.BotpressCLIError(
      `The following message names are not in camelCase: ${invalidMessageNames.join(", ")}`
    );
  }
  const invalidEventNames = _nonCamelCaseKeys(events ?? {});
  if (invalidEventNames.length) {
    throw new errors.BotpressCLIError(`The following event names are not in camelCase: ${invalidEventNames.join(", ")}`);
  }
  const invalidStateNames = _nonCamelCaseKeys(states ?? {});
  if (invalidStateNames.length) {
    throw new errors.BotpressCLIError(`The following state names are not in camelCase: ${invalidStateNames.join(", ")}`);
  }
};
const _nonCamelCaseKeys = (obj) => Object.keys(obj).filter((k) => !utils.casing.is.camelCase(k));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  validateIntegrationDefinition
});
//# sourceMappingURL=validate-integration.js.map
