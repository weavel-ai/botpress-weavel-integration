{
  "version": 3,
  "sources": ["../../src/utils/prompt-utils.ts"],
  "sourcesContent": ["import prompts from 'prompts'\nimport type { Logger } from '../logger'\n\nexport type CLIPromptsProps = {\n  confirm: boolean\n}\n\nexport type CLIPromptsChoice<V extends string> = {\n  title: string\n  value: V\n}\n\ntype PasswordOptions = Partial<{\n  default: string | undefined\n  initial: string\n}>\ntype SelectOptions<V extends string> = Partial<{\n  default: V | undefined\n  initial: CLIPromptsChoice<V>\n  choices: CLIPromptsChoice<V>[]\n}>\ntype TextOptions = Partial<{\n  default: string | undefined\n  initial: string\n}>\n\nexport class CLIPrompt {\n  constructor(private _props: CLIPromptsProps, private _logger: Logger) {}\n\n  public async confirm(message: string): Promise<boolean> {\n    if (this._props.confirm) {\n      this._logger.debug(`Confirming automatically (non-interactive mode): ${message}`)\n      return true\n    }\n\n    const { confirm } = await this._prompts({\n      type: 'confirm',\n      name: 'confirm',\n      message,\n      initial: false,\n    })\n\n    if (!confirm) {\n      return false\n    }\n    return true\n  }\n\n  public async password(message: string, opts: PasswordOptions = {}): Promise<string | undefined> {\n    if (this._props.confirm) {\n      this._logger.debug(`Return default (non-interactive mode): ${message}`)\n      return opts?.default\n    }\n\n    const { prompted } = await this._prompts({\n      type: 'password',\n      name: 'prompted',\n      message,\n      initial: opts?.initial,\n    })\n\n    return prompted ? prompted : undefined\n  }\n\n  public async select<V extends string>(message: string, opts: SelectOptions<V> = {}): Promise<V | undefined> {\n    if (this._props.confirm) {\n      this._logger.debug(`Return default (non-interactive mode): ${message}`)\n      return opts?.default\n    }\n\n    const { prompted } = await this._prompts({\n      type: 'autocomplete',\n      name: 'prompted',\n      message,\n      initial: opts?.initial?.value,\n      choices: opts?.choices,\n    })\n    return prompted ? prompted : undefined\n  }\n\n  public async text(message: string, opts: TextOptions = {}): Promise<string | undefined> {\n    if (this._props.confirm) {\n      this._logger.debug(`Return default (non-interactive mode): ${message}`)\n      return opts?.default\n    }\n\n    const { prompted } = await this._prompts({\n      type: 'text',\n      name: 'prompted',\n      message,\n      initial: opts?.initial,\n    })\n\n    return prompted ? prompted : undefined\n  }\n\n  private _prompts = (...args: Parameters<typeof prompts>): ReturnType<typeof prompts> => {\n    this._logger.cleanup()\n    return prompts(...args)\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AA0Bb,MAAM,UAAU;AAAA,EACrB,YAAoB,QAAiC,SAAiB;AAAlD;AAAiC;AAAA,EAAkB;AAAA,EAEvE,MAAa,QAAQ,SAAmC;AACtD,QAAI,KAAK,OAAO,SAAS;AACvB,WAAK,QAAQ,MAAM,oDAAoD,SAAS;AAChF,aAAO;AAAA,IACT;AAEA,UAAM,EAAE,QAAQ,IAAI,MAAM,KAAK,SAAS;AAAA,MACtC,MAAM;AAAA,MACN,MAAM;AAAA,MACN;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAED,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,SAAS,SAAiB,OAAwB,CAAC,GAAgC;AAC9F,QAAI,KAAK,OAAO,SAAS;AACvB,WAAK,QAAQ,MAAM,0CAA0C,SAAS;AACtE,aAAO,MAAM;AAAA,IACf;AAEA,UAAM,EAAE,SAAS,IAAI,MAAM,KAAK,SAAS;AAAA,MACvC,MAAM;AAAA,MACN,MAAM;AAAA,MACN;AAAA,MACA,SAAS,MAAM;AAAA,IACjB,CAAC;AAED,WAAO,WAAW,WAAW;AAAA,EAC/B;AAAA,EAEA,MAAa,OAAyB,SAAiB,OAAyB,CAAC,GAA2B;AAC1G,QAAI,KAAK,OAAO,SAAS;AACvB,WAAK,QAAQ,MAAM,0CAA0C,SAAS;AACtE,aAAO,MAAM;AAAA,IACf;AAEA,UAAM,EAAE,SAAS,IAAI,MAAM,KAAK,SAAS;AAAA,MACvC,MAAM;AAAA,MACN,MAAM;AAAA,MACN;AAAA,MACA,SAAS,MAAM,SAAS;AAAA,MACxB,SAAS,MAAM;AAAA,IACjB,CAAC;AACD,WAAO,WAAW,WAAW;AAAA,EAC/B;AAAA,EAEA,MAAa,KAAK,SAAiB,OAAoB,CAAC,GAAgC;AACtF,QAAI,KAAK,OAAO,SAAS;AACvB,WAAK,QAAQ,MAAM,0CAA0C,SAAS;AACtE,aAAO,MAAM;AAAA,IACf;AAEA,UAAM,EAAE,SAAS,IAAI,MAAM,KAAK,SAAS;AAAA,MACvC,MAAM;AAAA,MACN,MAAM;AAAA,MACN;AAAA,MACA,SAAS,MAAM;AAAA,IACjB,CAAC;AAED,WAAO,WAAW,WAAW;AAAA,EAC/B;AAAA,EAEQ,WAAW,IAAI,SAAiE;AACtF,SAAK,QAAQ,QAAQ;AACrB,eAAO,eAAAA,SAAQ,GAAG,IAAI;AAAA,EACxB;AACF;",
  "names": ["prompts"]
}
