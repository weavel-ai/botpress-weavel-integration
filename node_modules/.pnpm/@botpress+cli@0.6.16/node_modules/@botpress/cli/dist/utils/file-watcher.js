"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var file_watcher_exports = {};
__export(file_watcher_exports, {
  FileWatcher: () => FileWatcher
});
module.exports = __toCommonJS(file_watcher_exports);
var import_watcher = __toESM(require("@parcel/watcher"));
var import_event_emitter = require("./event-emitter");
class FileWatcher {
  constructor(subscription, errorEmitter) {
    this.subscription = subscription;
    this.errorEmitter = errorEmitter;
  }
  static async watch(dir, fn, opt) {
    const eventEmitter = new import_event_emitter.EventEmitter();
    const subscription = await import_watcher.default.subscribe(
      dir,
      async (err, events) => {
        if (err) {
          eventEmitter.emit("error", err);
          return;
        }
        try {
          await fn(events);
        } catch (thrown) {
          eventEmitter.emit("error", thrown);
        }
      },
      opt
    );
    return new FileWatcher(subscription, eventEmitter);
  }
  async close() {
    await this.subscription.unsubscribe();
    this.errorEmitter.emit("close", {});
  }
  wait = () => new Promise((resolve, reject) => {
    this.errorEmitter.once("error", reject);
    this.errorEmitter.once("close", resolve);
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FileWatcher
});
//# sourceMappingURL=file-watcher.js.map
