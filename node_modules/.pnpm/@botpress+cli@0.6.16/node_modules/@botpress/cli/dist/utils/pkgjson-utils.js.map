{
  "version": 3,
  "sources": ["../../src/utils/pkgjson-utils.ts"],
  "sourcesContent": ["import fs from 'fs'\nimport pathlib from 'path'\n\nexport type PackageJson = {\n  name: string\n  version?: string\n  description?: string\n  scripts?: Record<string, string>\n  dependencies?: Record<string, string>\n  devDependencies?: Record<string, string>\n  peerDependencies?: Record<string, string>\n}\n\nconst FILE_NAME = 'package.json'\n\nexport const readPackageJson = async (path: string): Promise<PackageJson | undefined> => {\n  const filePath = pathlib.basename(path) === FILE_NAME ? path : pathlib.join(path, FILE_NAME)\n  if (!fs.existsSync(filePath)) {\n    return undefined\n  }\n\n  const strContent: string = await fs.promises.readFile(filePath, 'utf8')\n  const jsonContent = JSON.parse(strContent)\n  return jsonContent\n}\n\nexport const findDependency = (pkgJson: PackageJson, name: string): string | undefined => {\n  const { dependencies, devDependencies, peerDependencies } = pkgJson\n  const allDependencies = { ...(dependencies ?? {}), ...(devDependencies ?? {}), ...(peerDependencies ?? {}) }\n  return allDependencies[name]\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,kBAAoB;AAYpB,MAAM,YAAY;AAEX,MAAM,kBAAkB,OAAO,SAAmD;AACvF,QAAM,WAAW,YAAAA,QAAQ,SAAS,IAAI,MAAM,YAAY,OAAO,YAAAA,QAAQ,KAAK,MAAM,SAAS;AAC3F,MAAI,CAAC,UAAAC,QAAG,WAAW,QAAQ,GAAG;AAC5B,WAAO;AAAA,EACT;AAEA,QAAM,aAAqB,MAAM,UAAAA,QAAG,SAAS,SAAS,UAAU,MAAM;AACtE,QAAM,cAAc,KAAK,MAAM,UAAU;AACzC,SAAO;AACT;AAEO,MAAM,iBAAiB,CAAC,SAAsB,SAAqC;AACxF,QAAM,EAAE,cAAc,iBAAiB,iBAAiB,IAAI;AAC5D,QAAM,kBAAkB,EAAE,GAAI,gBAAgB,CAAC,GAAI,GAAI,mBAAmB,CAAC,GAAI,GAAI,oBAAoB,CAAC,EAAG;AAC3G,SAAO,gBAAgB;AACzB;",
  "names": ["pathlib", "fs"]
}
