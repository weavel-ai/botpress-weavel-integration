"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_vitest = require("vitest");
var caseUtils = __toESM(require("./case-utils"));
const pascalCase = "HelloWorld";
const kebabCase = "hello-world";
const snakeCase = "hello_world";
const screamingSnakeCase = "HELLO_WORLD";
const camelCase = "helloWorld";
(0, import_vitest.test)("case utils should convert from pascal case to all other cases", () => {
  (0, import_vitest.expect)(caseUtils.to.kebabCase(pascalCase)).toBe(kebabCase);
  (0, import_vitest.expect)(caseUtils.to.snakeCase(pascalCase)).toBe(snakeCase);
  (0, import_vitest.expect)(caseUtils.to.screamingSnakeCase(pascalCase)).toBe(screamingSnakeCase);
  (0, import_vitest.expect)(caseUtils.to.camelCase(pascalCase)).toBe(camelCase);
});
(0, import_vitest.test)("case utils should convert from kebab case to all other cases", () => {
  (0, import_vitest.expect)(caseUtils.to.pascalCase(kebabCase)).toBe(pascalCase);
  (0, import_vitest.expect)(caseUtils.to.snakeCase(kebabCase)).toBe(snakeCase);
  (0, import_vitest.expect)(caseUtils.to.screamingSnakeCase(kebabCase)).toBe(screamingSnakeCase);
  (0, import_vitest.expect)(caseUtils.to.camelCase(kebabCase)).toBe(camelCase);
});
(0, import_vitest.test)("case utils should convert from snake case to all other cases", () => {
  (0, import_vitest.expect)(caseUtils.to.pascalCase(snakeCase)).toBe(pascalCase);
  (0, import_vitest.expect)(caseUtils.to.kebabCase(snakeCase)).toBe(kebabCase);
  (0, import_vitest.expect)(caseUtils.to.screamingSnakeCase(snakeCase)).toBe(screamingSnakeCase);
  (0, import_vitest.expect)(caseUtils.to.camelCase(snakeCase)).toBe(camelCase);
});
(0, import_vitest.test)("case utils should convert from screaming snake case to all other cases", () => {
  (0, import_vitest.expect)(caseUtils.to.pascalCase(screamingSnakeCase)).toBe(pascalCase);
  (0, import_vitest.expect)(caseUtils.to.kebabCase(screamingSnakeCase)).toBe(kebabCase);
  (0, import_vitest.expect)(caseUtils.to.snakeCase(screamingSnakeCase)).toBe(snakeCase);
  (0, import_vitest.expect)(caseUtils.to.camelCase(screamingSnakeCase)).toBe(camelCase);
});
(0, import_vitest.test)("case utils should convert from camel case to all other cases", () => {
  (0, import_vitest.expect)(caseUtils.to.pascalCase(camelCase)).toBe(pascalCase);
  (0, import_vitest.expect)(caseUtils.to.kebabCase(camelCase)).toBe(kebabCase);
  (0, import_vitest.expect)(caseUtils.to.snakeCase(camelCase)).toBe(snakeCase);
  (0, import_vitest.expect)(caseUtils.to.screamingSnakeCase(camelCase)).toBe(screamingSnakeCase);
});
//# sourceMappingURL=case-utils.test.js.map
