"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var schema_utils_exports = {};
__export(schema_utils_exports, {
  mapZodToJsonSchema: () => mapZodToJsonSchema
});
module.exports = __toCommonJS(schema_utils_exports);
var import_zod_to_json_schema = __toESM(require("@bpinternal/zod-to-json-schema"));
const isObjectSchema = (schema) => schema?.type === "object";
function mapZodToJsonSchema(definition) {
  const schema = (0, import_zod_to_json_schema.default)(definition.schema, { errorMessages: true });
  if (!isObjectSchema(schema) || !definition.ui) {
    return schema;
  }
  for (const [key, value] of Object.entries(definition.ui ?? {})) {
    const property = schema.properties?.[key];
    if (!property) {
      continue;
    }
    if (!!value?.title) {
      property.title = value.title;
    }
    if (!!value?.examples) {
      property.examples = value.examples;
    }
  }
  return schema;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mapZodToJsonSchema
});
//# sourceMappingURL=schema-utils.js.map
