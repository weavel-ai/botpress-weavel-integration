"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var url_utils_exports = {};
__export(url_utils_exports, {
  format: () => format,
  parse: () => parse
});
module.exports = __toCommonJS(url_utils_exports);
const PROTOCOLS = ["http", "https", "ws", "wss"];
const toPath = (path) => {
  if (!path.startsWith("/")) {
    return `/${path}`;
  }
  return path;
};
function parse(hostOrUrl) {
  try {
    const url = new URL(hostOrUrl);
    return {
      status: "success",
      url: {
        protocol: url.protocol.replace(":", ""),
        host: url.hostname,
        port: url.port ? parseInt(url.port) : void 0,
        path: toPath(url.pathname)
      }
    };
  } catch (thrown) {
    const message = thrown instanceof Error ? thrown.message : `${thrown}`;
    return {
      status: "error",
      error: message
    };
  }
}
const format = (url) => {
  let formatted = `${url.protocol}://${url.host}`;
  if (url.port) {
    formatted += `:${url.port}`;
  }
  if (url.path && url.path !== "/") {
    formatted += url.path;
  }
  return formatted;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  format,
  parse
});
//# sourceMappingURL=url-utils.js.map
