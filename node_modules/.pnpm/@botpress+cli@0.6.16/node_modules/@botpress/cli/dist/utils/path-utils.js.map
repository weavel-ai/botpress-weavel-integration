{
  "version": 3,
  "sources": ["../../src/utils/path-utils.ts"],
  "sourcesContent": ["import _ from 'lodash'\nimport pathlib from 'path'\n\nexport type AbsolutePath = `/${string}` | `C:\\\\${string}`\n\nexport const cwd = (): AbsolutePath => process.cwd() as AbsolutePath\nexport const isAbsolute = (path: string): path is AbsolutePath => pathlib.isAbsolute(path)\nexport const isPath = (path: string) => isAbsolute(path) || path.startsWith('.')\nexport const join = (abs: AbsolutePath, ...paths: string[]): AbsolutePath => {\n  const joined = pathlib.join(abs, ...paths)\n  return pathlib.normalize(joined) as AbsolutePath\n}\n\nexport const rmExtension = (filename: string) => filename.replace(/\\.[^/.]+$/, '')\n\nexport const toUnix = (path: string) => path.split(pathlib.sep).join(pathlib.posix.sep)\n\nexport const absoluteFrom = (rootdir: AbsolutePath, target: string): AbsolutePath => {\n  if (isAbsolute(target)) {\n    return target\n  }\n  return pathlib.join(rootdir, target) as AbsolutePath\n}\n\nexport const relativeFrom = (rootdir: AbsolutePath, target: string) => {\n  let absPath: string\n\n  if (isAbsolute(target)) {\n    absPath = target\n  } else {\n    absPath = pathlib.resolve(pathlib.join(rootdir, target))\n  }\n\n  return pathlib.relative(rootdir, absPath)\n}\n\nexport class PathStore<P extends string> {\n  public constructor(public readonly abs: Record<P, AbsolutePath>) {}\n  public rel(from: Extract<P, `${string}Dir`>) {\n    return _.mapValues(this.abs, (to) => relativeFrom(this.abs[from], to))\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAc;AACd,kBAAoB;AAIb,MAAM,MAAM,MAAoB,QAAQ,IAAI;AAC5C,MAAM,aAAa,CAAC,SAAuC,YAAAA,QAAQ,WAAW,IAAI;AAClF,MAAM,SAAS,CAAC,SAAiB,WAAW,IAAI,KAAK,KAAK,WAAW,GAAG;AACxE,MAAM,OAAO,CAAC,QAAsB,UAAkC;AAC3E,QAAM,SAAS,YAAAA,QAAQ,KAAK,KAAK,GAAG,KAAK;AACzC,SAAO,YAAAA,QAAQ,UAAU,MAAM;AACjC;AAEO,MAAM,cAAc,CAAC,aAAqB,SAAS,QAAQ,aAAa,EAAE;AAE1E,MAAM,SAAS,CAAC,SAAiB,KAAK,MAAM,YAAAA,QAAQ,GAAG,EAAE,KAAK,YAAAA,QAAQ,MAAM,GAAG;AAE/E,MAAM,eAAe,CAAC,SAAuB,WAAiC;AACnF,MAAI,WAAW,MAAM,GAAG;AACtB,WAAO;AAAA,EACT;AACA,SAAO,YAAAA,QAAQ,KAAK,SAAS,MAAM;AACrC;AAEO,MAAM,eAAe,CAAC,SAAuB,WAAmB;AACrE,MAAI;AAEJ,MAAI,WAAW,MAAM,GAAG;AACtB,cAAU;AAAA,EACZ,OAAO;AACL,cAAU,YAAAA,QAAQ,QAAQ,YAAAA,QAAQ,KAAK,SAAS,MAAM,CAAC;AAAA,EACzD;AAEA,SAAO,YAAAA,QAAQ,SAAS,SAAS,OAAO;AAC1C;AAEO,MAAM,UAA4B;AAAA,EAChC,YAA4B,KAA8B;AAA9B;AAAA,EAA+B;AAAA,EAC3D,IAAI,MAAkC;AAC3C,WAAO,cAAAC,QAAE,UAAU,KAAK,KAAK,CAAC,OAAO,aAAa,KAAK,IAAI,OAAO,EAAE,CAAC;AAAA,EACvE;AACF;",
  "names": ["pathlib", "_"]
}
