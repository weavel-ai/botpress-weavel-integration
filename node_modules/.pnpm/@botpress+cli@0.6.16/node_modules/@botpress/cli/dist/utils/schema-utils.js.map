{
  "version": 3,
  "sources": ["../../src/utils/schema-utils.ts"],
  "sourcesContent": ["import zodToJsonSchema from '@bpinternal/zod-to-json-schema'\nimport type { JsonSchema7Type } from '@bpinternal/zod-to-json-schema/src/parseDef'\nimport type { JsonSchema7ObjectType } from '@bpinternal/zod-to-json-schema/src/parsers/object'\nimport { z } from 'zod'\n\ntype SchemaOptions = {\n  title?: string\n  examples?: any[]\n}\n\ntype SchemaDefinition = {\n  schema: z.ZodObject<any>\n  ui?: Record<string, SchemaOptions | undefined>\n}\n\nconst isObjectSchema = (schema: JsonSchema7Type): schema is JsonSchema7ObjectType => (schema as any)?.type === 'object'\n\nexport function mapZodToJsonSchema(definition: SchemaDefinition): ReturnType<typeof zodToJsonSchema> {\n  const schema = zodToJsonSchema(definition.schema, { errorMessages: true })\n  if (!isObjectSchema(schema) || !definition.ui) {\n    return schema\n  }\n\n  for (const [key, value] of Object.entries(definition.ui ?? {})) {\n    const property = schema.properties?.[key] as (JsonSchema7Type & { title?: string; examples?: any[] }) | undefined\n\n    if (!property) {\n      continue\n    }\n\n    if (!!value?.title) {\n      property.title = value.title\n    }\n\n    if (!!value?.examples) {\n      property.examples = value.examples\n    }\n  }\n\n  return schema\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA4B;AAe5B,MAAM,iBAAiB,CAAC,WAA8D,QAAgB,SAAS;AAExG,SAAS,mBAAmB,YAAkE;AACnG,QAAM,aAAS,0BAAAA,SAAgB,WAAW,QAAQ,EAAE,eAAe,KAAK,CAAC;AACzE,MAAI,CAAC,eAAe,MAAM,KAAK,CAAC,WAAW,IAAI;AAC7C,WAAO;AAAA,EACT;AAEA,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,WAAW,MAAM,CAAC,CAAC,GAAG;AAC9D,UAAM,WAAW,OAAO,aAAa;AAErC,QAAI,CAAC,UAAU;AACb;AAAA,IACF;AAEA,QAAI,CAAC,CAAC,OAAO,OAAO;AAClB,eAAS,QAAQ,MAAM;AAAA,IACzB;AAEA,QAAI,CAAC,CAAC,OAAO,UAAU;AACrB,eAAS,WAAW,MAAM;AAAA,IAC5B;AAAA,EACF;AAEA,SAAO;AACT;",
  "names": ["zodToJsonSchema"]
}
