{
  "version": 3,
  "sources": ["../../src/utils/url-utils.ts"],
  "sourcesContent": ["const PROTOCOLS = ['http', 'https', 'ws', 'wss'] as const\n\nexport type Protocol = (typeof PROTOCOLS)[number]\n\nexport type Path = `/${string}`\n\nexport type Url = {\n  protocol: Protocol\n  host: string\n  port?: number\n  path?: Path\n}\n\nexport type UrlParseResult =\n  | {\n      status: 'success'\n      url: Url\n    }\n  | {\n      status: 'error'\n      error: string\n    }\n\nconst toPath = (path: string): Path => {\n  if (!path.startsWith('/')) {\n    return `/${path}`\n  }\n  return path as Path\n}\n\nexport function parse(hostOrUrl: string): UrlParseResult {\n  try {\n    const url = new URL(hostOrUrl)\n    return {\n      status: 'success',\n      url: {\n        protocol: url.protocol.replace(':', '') as Url['protocol'],\n        host: url.hostname,\n        port: url.port ? parseInt(url.port) : undefined,\n        path: toPath(url.pathname),\n      },\n    }\n  } catch (thrown) {\n    const message = thrown instanceof Error ? thrown.message : `${thrown}`\n    return {\n      status: 'error',\n      error: message,\n    }\n  }\n}\n\nexport const format = (url: Url): string => {\n  let formatted = `${url.protocol}://${url.host}`\n  if (url.port) {\n    formatted += `:${url.port}`\n  }\n  if (url.path && url.path !== '/') {\n    formatted += url.path\n  }\n  return formatted\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAM,YAAY,CAAC,QAAQ,SAAS,MAAM,KAAK;AAuB/C,MAAM,SAAS,CAAC,SAAuB;AACrC,MAAI,CAAC,KAAK,WAAW,GAAG,GAAG;AACzB,WAAO,IAAI;AAAA,EACb;AACA,SAAO;AACT;AAEO,SAAS,MAAM,WAAmC;AACvD,MAAI;AACF,UAAM,MAAM,IAAI,IAAI,SAAS;AAC7B,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,KAAK;AAAA,QACH,UAAU,IAAI,SAAS,QAAQ,KAAK,EAAE;AAAA,QACtC,MAAM,IAAI;AAAA,QACV,MAAM,IAAI,OAAO,SAAS,IAAI,IAAI,IAAI;AAAA,QACtC,MAAM,OAAO,IAAI,QAAQ;AAAA,MAC3B;AAAA,IACF;AAAA,EACF,SAAS,QAAP;AACA,UAAM,UAAU,kBAAkB,QAAQ,OAAO,UAAU,GAAG;AAC9D,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,EACF;AACF;AAEO,MAAM,SAAS,CAAC,QAAqB;AAC1C,MAAI,YAAY,GAAG,IAAI,cAAc,IAAI;AACzC,MAAI,IAAI,MAAM;AACZ,iBAAa,IAAI,IAAI;AAAA,EACvB;AACA,MAAI,IAAI,QAAQ,IAAI,SAAS,KAAK;AAChC,iBAAa,IAAI;AAAA,EACnB;AACA,SAAO;AACT;",
  "names": []
}
