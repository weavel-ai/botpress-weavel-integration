"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  limitConfigs: () => limitConfigs,
  objectToPrefixMap: () => objectToPrefixMap,
  prefixToObjectMap: () => prefixToObjectMap,
  quotaConfigs: () => quotaConfigs,
  quotaTypes: () => quotaTypes
});
module.exports = __toCommonJS(src_exports);

// src/limits.ts
var limitConfigs = {
  bot_configuration_bytes: {
    value: 20480,
    // 20 KB
    unit: "bytes"
  },
  bot_installed_integrations_count: {
    value: 30,
    unit: "count"
  },
  bot_integration_configuration_bytes: {
    value: 20480,
    // 20 KB
    unit: "bytes"
  },
  bot_recurring_event_count: {
    value: 5,
    unit: "count"
  },
  bot_recurring_event_payload_bytes: {
    value: 131072,
    // 128 KB
    unit: "bytes"
  },
  event_definition_count: {
    value: 20,
    unit: "count"
  },
  integration_channel_count: {
    value: 10,
    unit: "count"
  },
  integration_channel_message_type_count: {
    value: 20,
    unit: "count"
  },
  integration_identifier_count: {
    value: 50,
    unit: "count"
  },
  integration_version_count: {
    value: 50,
    unit: "count"
  },
  issue_event_item_payload_bytes: {
    value: 131072,
    // 128 KB
    unit: "bytes"
  },
  message_payload_bytes: {
    value: 131072,
    // 128 KB
    unit: "bytes"
  },
  schema_bytes: {
    value: 102400,
    // 100 KB
    unit: "bytes"
  },
  state_definition_count: {
    value: 5,
    unit: "count"
  },
  state_item_payload_bytes: {
    value: 131072,
    // 128 KB
    unit: "bytes"
  },
  tag_definition_count: {
    value: 50,
    unit: "count"
  }
};

// src/prefixes.ts
var prefixToObjectMap = {
  action: "action",
  anlytic: "analytics",
  audit: "audit",
  bak: "botApiKey",
  bot: "bot",
  devbot: "devBot",
  card: "card",
  cfg: "configuration",
  channel: "channel",
  conv: "conversation",
  evt: "event",
  file: "file",
  flow: "flow",
  iak: "integrationApiKey",
  int: "integration",
  intver: "integrationVersion",
  devint: "devIntegration",
  iss: "issue",
  issevt: "issueEvent",
  kb: "knowledgeBase",
  limit: "limit",
  media: "media",
  msg: "message",
  node: "node",
  pat: "personalAccessToken",
  quota: "quota",
  recevt: "recurringEvent",
  sandbox: "sandbox",
  schema: "schema",
  script: "script",
  state: "state",
  table: "table",
  tag: "tag",
  usage: "usage",
  user: "user",
  webhook: "webhook",
  wkspace: "workspace"
};
var objectToPrefixMap = {
  action: "action",
  analytics: "anlytic",
  audit: "audit",
  bot: "bot",
  devBot: "devbot",
  botApiKey: "bak",
  card: "card",
  channel: "channel",
  configuration: "cfg",
  conversation: "conv",
  event: "evt",
  file: "file",
  flow: "flow",
  integration: "int",
  integrationApiKey: "iak",
  integrationVersion: "intver",
  devIntegration: "devint",
  issue: "iss",
  issueEvent: "issevt",
  knowledgeBase: "kb",
  limit: "limit",
  media: "media",
  message: "msg",
  node: "node",
  personalAccessToken: "pat",
  quota: "quota",
  recurringEvent: "recevt",
  sandbox: "sandbox",
  schema: "schema",
  script: "script",
  state: "state",
  table: "table",
  tag: "tag",
  usage: "usage",
  user: "user",
  webhook: "webhook",
  workspace: "wkspace"
};

// src/quotas.ts
var quotaTypes = [
  "invocation_timeout",
  "invocation_calls",
  "storage_count",
  "bot_count",
  "knowledgebase_vector_storage",
  "workspace_ratelimit",
  "table_row_count",
  "workspace_member_count",
  "integrations_owned_count",
  "ai_spend",
  "openai_spend",
  "bing_search_spend"
];
var quotaConfigs = {
  invocation_timeout: {
    name: "Invocation Timeout",
    description: "Maximum time in milliseconds a bot can run before timing out.",
    default: 6e4,
    kind: "bot",
    category: "timeout",
    trackUsagePerBot: false
  },
  storage_count: {
    name: "Storage Count",
    description: "Maximum number of storage bytes that can be stored.",
    default: 5e8,
    // 500 MB
    kind: "workspace",
    category: "count",
    trackUsagePerBot: true
  },
  bot_count: {
    name: "Bot Count",
    description: "Maximum number of bots that can be created.",
    default: 5,
    kind: "workspace",
    category: "count",
    trackUsagePerBot: false
  },
  workspace_member_count: {
    name: "Workspace Member Count",
    description: "Maximum number of members that can be added to a workspace.",
    default: 3,
    kind: "workspace",
    category: "count",
    trackUsagePerBot: false
  },
  knowledgebase_vector_storage: {
    name: "Knowledgebase Vector Storage",
    description: "Maximum size of knowledge base documents",
    default: 1e8,
    // 100 MB
    kind: "workspace",
    category: "count",
    trackUsagePerBot: true
  },
  table_row_count: {
    name: "Table Row Count",
    description: "Maximum number of rows that can be stored in a table.",
    default: 5e3,
    kind: "workspace",
    category: "count",
    trackUsagePerBot: true
  },
  invocation_calls: {
    name: "Invocation Calls",
    description: "Maximum number of times a bot can be invoked in a month.",
    default: 2e3,
    kind: "workspace",
    category: "calls",
    trackUsagePerBot: true
  },
  workspace_ratelimit: {
    name: "Workspace Ratelimit",
    description: "Maximum number of API calls per second for a workspace.",
    default: 100,
    kind: "workspace",
    category: "ratelimit",
    trackUsagePerBot: false
  },
  integrations_owned_count: {
    name: "Owned Integrations Count",
    description: "Maximum number of integrations that can be created.",
    default: 20,
    kind: "workspace",
    category: "count",
    trackUsagePerBot: false
  },
  ai_spend: {
    name: "AI Spend",
    description: "Maximum amount of AI spend, expressed in nano-dollars (1 nano-dollar = $0.000000001) that can be used in a month.",
    default: 5e9,
    kind: "workspace",
    category: "credit",
    trackUsagePerBot: true
  },
  openai_spend: {
    name: "OpenAI Spend",
    description: "Maximum amount of OpenAI spend, expressed in nano-dollars (1 nano-dollar = $0.000000001) that can be used in a month.",
    default: 5e9,
    kind: "workspace",
    category: "credit",
    trackUsagePerBot: true,
    parent: "ai_spend"
  },
  bing_search_spend: {
    name: "Bing Search Spend",
    description: "Maximum amount of Bing Search spend, expressed in nano-dollars (1 nano-dollar = $0.000000001) that can be used in a month.",
    default: 5e9,
    kind: "workspace",
    category: "credit",
    trackUsagePerBot: true,
    parent: "ai_spend"
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  limitConfigs,
  objectToPrefixMap,
  prefixToObjectMap,
  quotaConfigs,
  quotaTypes
});
