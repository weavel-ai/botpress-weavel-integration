import { type Conversation, type Message, type User } from '@botpress/client';
import { Request, Response } from '../serve';
import { Cast, Merge } from '../type-utils';
import { IntegrationSpecificClient } from './client';
import { ToTags } from './client/types';
import { type IntegrationContext } from './context';
import { BaseIntegration } from './generic';
import { IntegrationLogger } from './logger';
type PrefixConfig<TIntegration extends BaseIntegration> = {
    enforcePrefix: TIntegration['name'];
};
type CommonArgs<TIntegration extends BaseIntegration> = {
    ctx: IntegrationContext<TIntegration['configuration']>;
    client: IntegrationSpecificClient<TIntegration>;
    logger: IntegrationLogger;
};
type RegisterPayload = {
    webhookUrl: string;
};
type RegisterArgs<TIntegration extends BaseIntegration> = CommonArgs<TIntegration> & RegisterPayload;
type UnregisterPayload = {
    webhookUrl: string;
};
type UnregisterArgs<TIntegration extends BaseIntegration> = CommonArgs<TIntegration> & UnregisterPayload;
type WebhookPayload = {
    req: Request;
};
type WebhookArgs<TIntegration extends BaseIntegration> = CommonArgs<TIntegration> & WebhookPayload;
type ActionPayload<T extends string, I> = {
    type: T;
    input: I;
};
type ActionArgs<TIntegration extends BaseIntegration, T extends string, I> = CommonArgs<TIntegration> & ActionPayload<T, I>;
type CreateUserPayload<TIntegration extends BaseIntegration> = {
    tags: ToTags<keyof TIntegration['user']['tags'], PrefixConfig<TIntegration>>;
};
type CreateUserArgs<TIntegration extends BaseIntegration> = CommonArgs<TIntegration> & CreateUserPayload<TIntegration>;
type CreateConversationPayload<TIntegration extends BaseIntegration, TChannel extends keyof TIntegration['channels'] = keyof TIntegration['channels']> = {
    channel: TChannel;
    tags: ToTags<keyof TIntegration['channels'][TChannel]['conversation']['tags'], PrefixConfig<TIntegration>>;
};
type CreateConversationArgs<TIntegration extends BaseIntegration> = CommonArgs<TIntegration> & CreateConversationPayload<TIntegration>;
type MessagePayload<TIntegration extends BaseIntegration, TChannel extends keyof TIntegration['channels'], TMessage extends keyof TIntegration['channels'][TChannel]['messages']> = {
    type: TMessage;
    payload: TIntegration['channels'][TChannel]['messages'][TMessage];
    conversation: Merge<Conversation, {
        tags: ToTags<keyof TIntegration['channels'][TChannel]['conversation']['tags'], PrefixConfig<TIntegration>>;
    }>;
    message: Merge<Message, {
        tags: ToTags<keyof TIntegration['channels'][TChannel]['message']['tags'], PrefixConfig<TIntegration>>;
    }>;
    user: Merge<User, {
        tags: ToTags<keyof TIntegration['user']['tags'], PrefixConfig<TIntegration>>;
    }>;
};
type MessageArgs<TIntegration extends BaseIntegration, TChannel extends keyof TIntegration['channels'], TMessage extends keyof TIntegration['channels'][TChannel]['messages']> = CommonArgs<TIntegration> & MessagePayload<TIntegration, TChannel, TMessage> & {
    ack: (props: {
        tags: ToTags<keyof TIntegration['channels'][TChannel]['message']['tags'], PrefixConfig<TIntegration>>;
    }) => Promise<void>;
};
export type RegisterFunction<TIntegration extends BaseIntegration> = (props: RegisterArgs<TIntegration>) => Promise<void>;
export type UnregisterFunction<TIntegration extends BaseIntegration> = (props: UnregisterArgs<TIntegration>) => Promise<void>;
export type WebhookFunction<TIntegration extends BaseIntegration> = (props: WebhookArgs<TIntegration>) => Promise<Response | void>;
export type ActionFunctions<TIntegration extends BaseIntegration> = {
    [ActionType in keyof TIntegration['actions']]: (props: ActionArgs<TIntegration, Cast<ActionType, string>, TIntegration['actions'][ActionType]['input']>) => Promise<TIntegration['actions'][ActionType]['output']>;
};
export type CreateUserFunction<TIntegration extends BaseIntegration> = (props: CreateUserArgs<TIntegration>) => Promise<Response | void>;
export type CreateConversationFunction<TIntegration extends BaseIntegration> = (props: CreateConversationArgs<TIntegration>) => Promise<Response | void>;
export type ChannelFunctions<TIntegration extends BaseIntegration> = {
    [ChannelName in keyof TIntegration['channels']]: {
        messages: {
            [MessageType in keyof TIntegration['channels'][ChannelName]['messages']]: (props: CommonArgs<TIntegration> & MessageArgs<TIntegration, ChannelName, MessageType>) => Promise<void>;
        };
    };
};
export type IntegrationHandlers<TIntegration extends BaseIntegration> = {
    register: RegisterFunction<TIntegration>;
    unregister: UnregisterFunction<TIntegration>;
    webhook: WebhookFunction<TIntegration>;
    createUser?: CreateUserFunction<TIntegration>;
    createConversation?: CreateConversationFunction<TIntegration>;
    actions: ActionFunctions<TIntegration>;
    channels: ChannelFunctions<TIntegration>;
};
export declare const integrationHandler: <TIntegration extends BaseIntegration>(instance: IntegrationHandlers<TIntegration>) => (req: Request) => Promise<Response | void>;
export {};
