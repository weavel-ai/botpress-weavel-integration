import { Client } from '@botpress/client';
import { BaseIntegration } from '../generic';
import * as routes from './routes';
/**
 * Just like the regular botpress client, but typed with the integration's properties.
 */
export declare class IntegrationSpecificClient<TIntegration extends BaseIntegration> {
    private readonly client;
    constructor(client: Client);
    createConversation: routes.CreateConversation<TIntegration>;
    getConversation: routes.GetConversation<TIntegration>;
    listConversations: routes.ListConversations<TIntegration>;
    getOrCreateConversation: routes.GetOrCreateConversation<TIntegration>;
    updateConversation: routes.UpdateConversation<TIntegration>;
    deleteConversation: routes.DeleteConversation<TIntegration>;
    listParticipants: routes.ListParticipants<TIntegration>;
    addParticipant: routes.AddParticipant<TIntegration>;
    getParticipant: routes.GetParticipant<TIntegration>;
    removeParticipant: routes.RemoveParticipant<TIntegration>;
    createEvent: routes.CreateEvent<TIntegration>;
    getEvent: routes.GetEvent<TIntegration>;
    listEvents: routes.ListEvents<TIntegration>;
    createMessage: routes.CreateMessage<TIntegration>;
    getOrCreateMessage: routes.GetOrCreateMessage<TIntegration>;
    getMessage: routes.GetMessage<TIntegration>;
    updateMessage: routes.UpdateMessage<TIntegration>;
    listMessages: routes.ListMessages<TIntegration>;
    deleteMessage: routes.DeleteMessage<TIntegration>;
    createUser: routes.CreateUser<TIntegration>;
    getUser: routes.GetUser<TIntegration>;
    listUsers: routes.ListUsers<TIntegration>;
    getOrCreateUser: routes.GetOrCreateUser<TIntegration>;
    updateUser: routes.UpdateUser<TIntegration>;
    deleteUser: routes.DeleteUser<TIntegration>;
    getState: routes.GetState<TIntegration>;
    setState: routes.SetState<TIntegration>;
    getOrSetState: routes.GetOrSetState<TIntegration>;
    patchState: routes.PatchState<TIntegration>;
    configureIntegration: routes.ConfigureIntegration<TIntegration>;
}
