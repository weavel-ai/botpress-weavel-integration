import type { Server } from 'node:http';
import { BaseIntegration } from './generic';
import { RegisterFunction, UnregisterFunction, WebhookFunction, CreateUserFunction, CreateConversationFunction, ActionFunctions, ChannelFunctions } from './server';
export type IntegrationImplementationProps<TIntegration extends BaseIntegration = BaseIntegration> = {
    register: RegisterFunction<TIntegration>;
    unregister: UnregisterFunction<TIntegration>;
    handler: WebhookFunction<TIntegration>;
    /**
     * @deprecated
     */
    createUser?: CreateUserFunction<TIntegration>;
    /**
     * @deprecated
     */
    createConversation?: CreateConversationFunction<TIntegration>;
    actions: ActionFunctions<TIntegration>;
    channels: ChannelFunctions<TIntegration>;
};
export declare class IntegrationImplementation<TIntegration extends BaseIntegration = BaseIntegration> {
    readonly props: IntegrationImplementationProps<TIntegration>;
    readonly actions: IntegrationImplementationProps<TIntegration>['actions'];
    readonly channels: IntegrationImplementationProps<TIntegration>['channels'];
    readonly register: IntegrationImplementationProps<TIntegration>['register'];
    readonly unregister: IntegrationImplementationProps<TIntegration>['unregister'];
    readonly createUser: IntegrationImplementationProps<TIntegration>['createUser'];
    readonly createConversation: IntegrationImplementationProps<TIntegration>['createConversation'];
    readonly webhook: IntegrationImplementationProps<TIntegration>['handler'];
    constructor(props: IntegrationImplementationProps<TIntegration>);
    readonly handler: (req: import("../serve").Request) => Promise<void | import("../serve").Response>;
    readonly start: (port?: number) => Promise<Server>;
}
