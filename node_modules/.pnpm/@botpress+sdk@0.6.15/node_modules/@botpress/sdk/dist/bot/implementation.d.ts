import type { Server } from 'node:http';
import { z } from 'zod';
import { SchemaDefinition } from '../schema';
import { AnyZodObject, Cast } from '../type-utils';
import { BaseIntegrations } from './generic';
import { IntegrationInstance } from './integration-instance';
import { MessageHandler, EventHandler, StateExpiredHandler, StateType } from './server';
type BaseStates = Record<string, AnyZodObject>;
type BaseEvents = Record<string, AnyZodObject>;
type TagDefinition = {
    title?: string;
    description?: string;
};
type StateDefinition<TState extends BaseStates[string]> = SchemaDefinition<TState> & {
    type: StateType;
    expiry?: number;
};
type RecurringEventDefinition<TEvents extends BaseEvents> = {
    [K in keyof TEvents]: {
        type: K;
        payload: z.infer<TEvents[K]>;
        schedule: {
            cron: string;
        };
    };
}[keyof TEvents];
type EventDefinition<TEvent extends BaseEvents[string]> = SchemaDefinition<TEvent>;
type ConfigurationDefinition = SchemaDefinition;
type UserDefinition = {
    tags?: Record<string, TagDefinition>;
};
type ConversationDefinition = {
    tags?: Record<string, TagDefinition>;
};
type MessageDefinition = {
    tags?: Record<string, TagDefinition>;
};
export type BotProps<TIntegrations extends BaseIntegrations = BaseIntegrations, TStates extends BaseStates = BaseStates, TEvents extends BaseEvents = BaseEvents> = {
    integrations?: {
        [K in keyof TIntegrations]?: IntegrationInstance<Cast<K, string>>;
    };
    user?: UserDefinition;
    conversation?: ConversationDefinition;
    message?: MessageDefinition;
    states?: {
        [K in keyof TStates]: StateDefinition<TStates[K]>;
    };
    configuration?: ConfigurationDefinition;
    events?: {
        [K in keyof TEvents]: EventDefinition<TEvents[K]>;
    };
    recurringEvents?: Record<string, RecurringEventDefinition<TEvents>>;
};
type BotFrom<TIntegrations extends BaseIntegrations, TStates extends BaseStates, TEvents extends BaseEvents> = {
    integrations: TIntegrations;
    states: {
        [K in keyof TStates]: z.infer<TStates[K]>;
    };
    events: {
        [K in keyof TEvents]: z.infer<TEvents[K]>;
    };
};
export declare class Bot<TIntegrations extends BaseIntegrations = BaseIntegrations, TStates extends BaseStates = BaseStates, TEvents extends BaseEvents = BaseEvents> {
    private _state;
    readonly props: BotProps<TIntegrations, TStates, TEvents>;
    constructor(props: BotProps<TIntegrations, TStates, TEvents>);
    readonly message: (handler: MessageHandler<BotFrom<TIntegrations, TStates, TEvents>>) => void;
    readonly event: (handler: EventHandler<BotFrom<TIntegrations, TStates, TEvents>>) => void;
    readonly stateExpired: (handler: StateExpiredHandler<BotFrom<TIntegrations, TStates, TEvents>>) => void;
    readonly handler: (req: import("../serve").Request) => Promise<void | import("../serve").Response>;
    readonly start: (port?: number) => Promise<Server>;
}
export {};
