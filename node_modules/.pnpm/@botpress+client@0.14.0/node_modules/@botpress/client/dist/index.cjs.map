{
  "version": 3,
  "sources": ["../src/index.ts", "../src/config.ts", "../src/gen/client.ts", "../src/gen/api.ts", "../src/gen/base.ts", "../src/gen/common.ts", "../src/gen/errors.ts"],
  "sourcesContent": ["import axios, { Axios } from 'axios'\nimport { isNode } from 'browser-or-node'\nimport http from 'http'\nimport https from 'https'\nimport { Readable } from 'stream'\nimport { getClientConfig, ClientProps, ClientConfig } from './config'\nimport { CreateFileResponse } from './gen'\nimport { ApiClient as AutoGeneratedClient } from './gen/client'\nimport { errorFrom } from './gen/errors'\n\nexport { isApiError } from './gen/errors'\n\nexport * as axios from 'axios'\nexport type {\n  Message,\n  Conversation,\n  User,\n  State,\n  Event,\n  ModelFile as File,\n  Bot,\n  Integration,\n  Issue,\n  IssueEvent,\n  Account,\n  Workspace,\n  Usage,\n} from './gen'\nexport * from './gen/errors'\n\nconst _100mb = 100 * 1024 * 1024\nconst maxBodyLength = _100mb\nconst maxContentLength = _100mb\n\ntype CreateFileProps = {\n  /**\n   * The name of the file.\n   */\n  name: string\n  /**\n   * The data to be uploaded.\n   */\n  data: Blob | Buffer | Readable\n  /**\n   * Set to a value of \"true\" to index the file in vector storage. Only PDFs, Office documents, and text-based files are currently supported. Note that if a file is indexed, it will count towards the Vector Storage quota of the workspace rather than the File Storage quota.\n   * @default false\n   */\n  index?: boolean\n  /**\n   * Tags to associate with the file.\n   */\n  tags?: { [key: string]: string }\n  /**\n   * File content type. If omitted, the content type will be inferred from the file extension. If a type cannot be inferred, the default is \"application/octet-stream\".\n   */\n  contentType?: string\n  contentLength?: number\n  /**\n   * File access policies. Add \"public_content\" to allow public access to the file content. Add \"integrations\" to allo read, search and list operations for any integration installed in the bot.\n   */\n  accessPolicies?: ('integrations' | 'public_content')[]\n}\n\nexport class Client extends AutoGeneratedClient {\n  public readonly config: Readonly<ClientConfig>\n  private readonly axiosClient: Axios\n\n  public constructor(clientProps: ClientProps = {}) {\n    const clientConfig = getClientConfig(clientProps)\n    const axiosClient = createAxiosClient(clientConfig)\n\n    super(undefined, clientConfig.apiUrl, axiosClient)\n\n    this.axiosClient = axiosClient\n    this.config = clientConfig\n  }\n\n  // The only reason this method is overridden is because\n  // the generated client does not support binary payloads.\n  // @ts-ignore\n  public createFile = async ({\n    name,\n    data,\n    index,\n    tags,\n    contentType,\n    contentLength,\n    accessPolicies,\n  }: CreateFileProps): Promise<CreateFileResponse> => {\n    const headers = {\n      ...this.config.headers,\n      'x-name': name,\n      'x-tags': tags ? JSON.stringify(tags) : undefined,\n      'x-index': index ? 'true' : 'false',\n      'x-access-policies': accessPolicies?.join(',') ?? undefined,\n      'content-type': contentType ?? false, // false ensures that axios does not use application/x-www-form-urlencoded if contentType is undefined\n      'content-length': contentLength,\n    }\n\n    const resp = await this.axiosClient.post('/v1/files', data, { headers, baseURL: this.config.apiUrl }).catch((e) => {\n      throw getError(e)\n    })\n    return resp.data as CreateFileResponse\n  }\n}\n\nfunction createAxiosClient(config: ClientConfig) {\n  const { headers, withCredentials, timeout } = config\n  return axios.create({\n    headers,\n    withCredentials,\n    timeout,\n    maxBodyLength,\n    maxContentLength,\n    httpAgent: isNode ? new http.Agent({ keepAlive: true }) : undefined,\n    httpsAgent: isNode ? new https.Agent({ keepAlive: true }) : undefined,\n  })\n}\n\nfunction getError(err: Error) {\n  if (axios.isAxiosError(err) && err.response?.data) {\n    return errorFrom(err.response.data)\n  }\n  return errorFrom(err)\n}\n\ntype Simplify<T> = { [KeyType in keyof T]: Simplify<T[KeyType]> } & {}\n\ntype PickMatching<T, V> = { [K in keyof T as T[K] extends V ? K : never]: T[K] }\ntype ExtractMethods<T> = PickMatching<T, (...rest: any[]) => any>\n\ntype FunctionNames = keyof ExtractMethods<Client>\n\nexport type ClientParams<T extends FunctionNames> = Simplify<Parameters<Client[T]>[0]>\nexport type ClientReturn<T extends FunctionNames> = Simplify<Awaited<ReturnType<Client[T]>>>\n", "import { isBrowser, isNode } from 'browser-or-node'\n\nconst defaultApiUrl = 'https://api.botpress.cloud'\nconst defaultTimeout = 60_000\n\nconst apiUrlEnvName = 'BP_API_URL'\nconst botIdEnvName = 'BP_BOT_ID'\nconst integrationIdEnvName = 'BP_INTEGRATION_ID'\nconst workspaceIdEnvName = 'BP_WORKSPACE_ID'\nconst tokenEnvName = 'BP_TOKEN'\n\ntype Headers = Record<string, string | string[]>\n\nexport type ClientProps = {\n  integrationId?: string\n  workspaceId?: string\n  botId?: string\n  token?: string\n  apiUrl?: string\n  timeout?: number\n  headers?: Headers\n}\n\nexport type ClientConfig = {\n  apiUrl: string\n  headers: Headers\n  withCredentials: boolean\n  timeout: number\n}\n\nexport function getClientConfig(clientProps: ClientProps): ClientConfig {\n  const props = readEnvConfig(clientProps)\n\n  let headers: Record<string, string | string[]> = {}\n\n  if (props.workspaceId) {\n    headers['x-workspace-id'] = props.workspaceId\n  }\n\n  if (props.botId) {\n    headers['x-bot-id'] = props.botId\n  }\n\n  if (props.integrationId) {\n    headers['x-integration-id'] = props.integrationId\n  }\n\n  if (props.token) {\n    headers.Authorization = `Bearer ${props.token}`\n  }\n\n  headers = {\n    ...headers,\n    ...props.headers,\n  }\n\n  const apiUrl = props.apiUrl ?? defaultApiUrl\n  const timeout = props.timeout ?? defaultTimeout\n\n  return {\n    apiUrl,\n    timeout,\n    withCredentials: isBrowser,\n    headers,\n  }\n}\n\nfunction readEnvConfig(props: ClientProps): ClientProps {\n  if (isBrowser) {\n    return getBrowserConfig(props)\n  }\n\n  if (isNode) {\n    return getNodeConfig(props)\n  }\n\n  return props\n}\n\nfunction getNodeConfig(props: ClientProps): ClientProps {\n  const config: ClientProps = {\n    ...props,\n    apiUrl: props.apiUrl ?? process.env[apiUrlEnvName],\n    botId: props.botId ?? process.env[botIdEnvName],\n    integrationId: props.integrationId ?? process.env[integrationIdEnvName],\n    workspaceId: props.workspaceId ?? process.env[workspaceIdEnvName],\n  }\n\n  const token = config.token ?? process.env[tokenEnvName]\n\n  if (token) {\n    config.token = token\n  }\n\n  return config\n}\n\nfunction getBrowserConfig(props: ClientProps): ClientProps {\n  return props\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n\nimport axios, { AxiosInstance } from 'axios'\nimport {\n  DefaultApi,\n  Configuration,\n\tDefaultApiCreateConversationRequest,\n\tDefaultApiGetConversationRequest,\n\tDefaultApiListConversationsRequest,\n\tDefaultApiGetOrCreateConversationRequest,\n\tDefaultApiUpdateConversationRequest,\n\tDefaultApiDeleteConversationRequest,\n\tDefaultApiListParticipantsRequest,\n\tDefaultApiAddParticipantRequest,\n\tDefaultApiGetParticipantRequest,\n\tDefaultApiRemoveParticipantRequest,\n\tDefaultApiCreateEventRequest,\n\tDefaultApiGetEventRequest,\n\tDefaultApiListEventsRequest,\n\tDefaultApiCreateMessageRequest,\n\tDefaultApiGetOrCreateMessageRequest,\n\tDefaultApiGetMessageRequest,\n\tDefaultApiUpdateMessageRequest,\n\tDefaultApiListMessagesRequest,\n\tDefaultApiDeleteMessageRequest,\n\tDefaultApiCreateUserRequest,\n\tDefaultApiGetUserRequest,\n\tDefaultApiListUsersRequest,\n\tDefaultApiGetOrCreateUserRequest,\n\tDefaultApiUpdateUserRequest,\n\tDefaultApiDeleteUserRequest,\n\tDefaultApiGetStateRequest,\n\tDefaultApiSetStateRequest,\n\tDefaultApiGetOrSetStateRequest,\n\tDefaultApiPatchStateRequest,\n\tDefaultApiCallActionRequest,\n\tDefaultApiConfigureIntegrationRequest,\n\tDefaultApiGetTaskRequest,\n\tDefaultApiCreateTaskRequest,\n\tDefaultApiUpdateTaskRequest,\n\tDefaultApiDeleteTaskRequest,\n\tDefaultApiListTasksRequest,\n\tDefaultApiRunVrlRequest,\n\tDefaultApiUpdateAccountRequest,\n\tDefaultApiCreatePersonalAccessTokenRequest,\n\tDefaultApiDeletePersonalAccessTokenRequest,\n\tDefaultApiSetAccountPreferenceRequest,\n\tDefaultApiGetAccountPreferenceRequest,\n\tDefaultApiListPublicIntegrationsRequest,\n\tDefaultApiGetPublicIntegrationByIdRequest,\n\tDefaultApiGetPublicIntegrationRequest,\n\tDefaultApiCreateBotRequest,\n\tDefaultApiUpdateBotRequest,\n\tDefaultApiTransferBotRequest,\n\tDefaultApiListBotsRequest,\n\tDefaultApiGetBotRequest,\n\tDefaultApiDeleteBotRequest,\n\tDefaultApiGetBotLogsRequest,\n\tDefaultApiGetBotWebchatRequest,\n\tDefaultApiGetBotAnalyticsRequest,\n\tDefaultApiListBotIssuesRequest,\n\tDefaultApiDeleteBotIssueRequest,\n\tDefaultApiListBotIssueEventsRequest,\n\tDefaultApiSetWorkspacePaymentMethodRequest,\n\tDefaultApiListWorkspaceInvoicesRequest,\n\tDefaultApiGetUpcomingInvoiceRequest,\n\tDefaultApiChargeWorkspaceUnpaidInvoicesRequest,\n\tDefaultApiCreateWorkspaceRequest,\n\tDefaultApiGetPublicWorkspaceRequest,\n\tDefaultApiGetWorkspaceRequest,\n\tDefaultApiListWorkspaceUsagesRequest,\n\tDefaultApiBreakDownWorkspaceUsageByBotRequest,\n\tDefaultApiGetWorkspaceQuotaRequest,\n\tDefaultApiListWorkspaceQuotasRequest,\n\tDefaultApiUpdateWorkspaceRequest,\n\tDefaultApiCheckHandleAvailabilityRequest,\n\tDefaultApiListWorkspacesRequest,\n\tDefaultApiChangeWorkspacePlanRequest,\n\tDefaultApiDeleteWorkspaceRequest,\n\tDefaultApiGetAuditRecordsRequest,\n\tDefaultApiListWorkspaceMembersRequest,\n\tDefaultApiDeleteWorkspaceMemberRequest,\n\tDefaultApiCreateWorkspaceMemberRequest,\n\tDefaultApiUpdateWorkspaceMemberRequest,\n\tDefaultApiListIntegrationApiKeysRequest,\n\tDefaultApiCreateIntegrationApiKeyRequest,\n\tDefaultApiDeleteIntegrationApiKeyRequest,\n\tDefaultApiCreateIntegrationRequest,\n\tDefaultApiUpdateIntegrationRequest,\n\tDefaultApiListIntegrationsRequest,\n\tDefaultApiGetIntegrationRequest,\n\tDefaultApiGetIntegrationLogsRequest,\n\tDefaultApiGetIntegrationByNameRequest,\n\tDefaultApiDeleteIntegrationRequest,\n\tDefaultApiGetUsageRequest,\n\tDefaultApiListUsageHistoryRequest,\n\tDefaultApiChangeAISpendQuotaRequest,\n\tDefaultApiListActivitiesRequest,\n\tDefaultApiIntrospectRequest,\n\tDefaultApiCreateFileRequest,\n\tDefaultApiDeleteFileRequest,\n\tDefaultApiListFilesRequest,\n\tDefaultApiGetFileMetadataRequest,\n\tDefaultApiGetFileContentRequest,\n\tDefaultApiUpdateFileMetadataRequest,\n\tDefaultApiSearchFilesRequest,\n\tDefaultApiListTablesRequest,\n\tDefaultApiGetTableRequest,\n\tDefaultApiGetOrCreateTableRequest,\n\tDefaultApiCreateTableRequest,\n\tDefaultApiDuplicateTableRequest,\n\tDefaultApiUpdateTableRequest,\n\tDefaultApiRenameTableColumnRequest,\n\tDefaultApiDeleteTableRequest,\n\tDefaultApiGetTableRowRequest,\n\tDefaultApiFindTableRowsRequest,\n\tDefaultApiCreateTableRowsRequest,\n\tDefaultApiDeleteTableRowsRequest,\n\tDefaultApiUpdateTableRowsRequest,\n\tDefaultApiUpsertTableRowsRequest,\n} from '.'\nimport { errorFrom } from './errors'\n\n\ntype SimplifyOptions = { deep?:boolean }\n\ntype Flatten<\n\tAnyType,\n\tOptions extends SimplifyOptions = {},\n> = Options['deep'] extends true\n\t? {[KeyType in keyof AnyType]: Simplify<AnyType[KeyType], Options>}\n\t: {[KeyType in keyof AnyType]: AnyType[KeyType]};\n\ntype Simplify<\n\tAnyType,\n\tOptions extends SimplifyOptions = {},\n> = Flatten<AnyType> extends AnyType\n\t? Flatten<AnyType, Options>\n\t: AnyType;\n\ntype Merge_<FirstType, SecondType> = Except<FirstType, Extract<keyof FirstType, keyof SecondType>> & SecondType;\n\ntype IsEqual<T, U> =\n\t(<G>() => G extends T ? 1 : 2) extends\n\t(<G>() => G extends U ? 1 : 2)\n\t\t? true\n\t\t: false;\n\ntype Filter<KeyType, ExcludeType> = IsEqual<KeyType, ExcludeType> extends true ? never : (KeyType extends ExcludeType ? never : KeyType);\n\n\ntype Merge<FirstType, SecondType> = Simplify<Merge_<FirstType, SecondType>>;\n\ntype Except<ObjectType, KeysType extends keyof ObjectType> = {\n\t[KeyType in keyof ObjectType as Filter<KeyType, KeysType>]: ObjectType[KeyType];\n};\n\nexport class ApiClient {\n  private _innerClient: DefaultApi\n  public constructor(configuration?: Configuration, basePath?: string, axiosInstance?: AxiosInstance) {\n    this._innerClient = new DefaultApi(configuration, basePath, axiosInstance)\n  }\n\tpublic createConversation = (createConversationBody: CreateConversationProps) => this._innerClient.createConversation({ createConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getConversation = (props: GetConversationProps) => this._innerClient.getConversation(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listConversations = (props: ListConversationsProps) => this._innerClient.listConversations(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateConversation = (getOrCreateConversationBody: GetOrCreateConversationProps) => this._innerClient.getOrCreateConversation({ getOrCreateConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateConversation = ({ id, ...updateConversationBody }: UpdateConversationProps) => this._innerClient.updateConversation({ id, updateConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteConversation = (props: DeleteConversationProps) => this._innerClient.deleteConversation(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listParticipants = (props: ListParticipantsProps) => this._innerClient.listParticipants(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic addParticipant = ({ id, ...addParticipantBody }: AddParticipantProps) => this._innerClient.addParticipant({ id, addParticipantBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getParticipant = (props: GetParticipantProps) => this._innerClient.getParticipant(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic removeParticipant = (props: RemoveParticipantProps) => this._innerClient.removeParticipant(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createEvent = (createEventBody: CreateEventProps) => this._innerClient.createEvent({ createEventBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getEvent = (props: GetEventProps) => this._innerClient.getEvent(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listEvents = (props: ListEventsProps) => this._innerClient.listEvents(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createMessage = (createMessageBody: CreateMessageProps) => this._innerClient.createMessage({ createMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateMessage = (getOrCreateMessageBody: GetOrCreateMessageProps) => this._innerClient.getOrCreateMessage({ getOrCreateMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getMessage = (props: GetMessageProps) => this._innerClient.getMessage(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateMessage = ({ id, ...updateMessageBody }: UpdateMessageProps) => this._innerClient.updateMessage({ id, updateMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listMessages = (props: ListMessagesProps) => this._innerClient.listMessages(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteMessage = (props: DeleteMessageProps) => this._innerClient.deleteMessage(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createUser = (createUserBody: CreateUserProps) => this._innerClient.createUser({ createUserBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getUser = (props: GetUserProps) => this._innerClient.getUser(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listUsers = (props: ListUsersProps) => this._innerClient.listUsers(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateUser = (getOrCreateUserBody: GetOrCreateUserProps) => this._innerClient.getOrCreateUser({ getOrCreateUserBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateUser = ({ id, ...updateUserBody }: UpdateUserProps) => this._innerClient.updateUser({ id, updateUserBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteUser = (props: DeleteUserProps) => this._innerClient.deleteUser(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getState = (props: GetStateProps) => this._innerClient.getState(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic setState = ({ type, id, name, ...setStateBody }: SetStateProps) => this._innerClient.setState({ type, id, name, setStateBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrSetState = ({ type, id, name, ...getOrSetStateBody }: GetOrSetStateProps) => this._innerClient.getOrSetState({ type, id, name, getOrSetStateBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic patchState = ({ type, id, name, ...patchStateBody }: PatchStateProps) => this._innerClient.patchState({ type, id, name, patchStateBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic callAction = (callActionBody: CallActionProps) => this._innerClient.callAction({ callActionBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic configureIntegration = (configureIntegrationBody: ConfigureIntegrationProps) => this._innerClient.configureIntegration({ configureIntegrationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getTask = (props: GetTaskProps) => this._innerClient.getTask(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createTask = (createTaskBody: CreateTaskProps) => this._innerClient.createTask({ createTaskBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateTask = ({ id, ...updateTaskBody }: UpdateTaskProps) => this._innerClient.updateTask({ id, updateTaskBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteTask = (props: DeleteTaskProps) => this._innerClient.deleteTask(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listTasks = (props: ListTasksProps) => this._innerClient.listTasks(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic runVrl = (runVrlBody: RunVrlProps) => this._innerClient.runVrl({ runVrlBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getAccount = () => this._innerClient.getAccount().then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateAccount = (updateAccountBody: UpdateAccountProps) => this._innerClient.updateAccount({ updateAccountBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listPersonalAccessTokens = () => this._innerClient.listPersonalAccessTokens().then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createPersonalAccessToken = (createPersonalAccessTokenBody: CreatePersonalAccessTokenProps) => this._innerClient.createPersonalAccessToken({ createPersonalAccessTokenBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deletePersonalAccessToken = (props: DeletePersonalAccessTokenProps) => this._innerClient.deletePersonalAccessToken(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic setAccountPreference = ({ key, ...setAccountPreferenceBody }: SetAccountPreferenceProps) => this._innerClient.setAccountPreference({ key, setAccountPreferenceBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getAccountPreference = (props: GetAccountPreferenceProps) => this._innerClient.getAccountPreference(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listPublicIntegrations = (props: ListPublicIntegrationsProps) => this._innerClient.listPublicIntegrations(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getPublicIntegrationById = (props: GetPublicIntegrationByIdProps) => this._innerClient.getPublicIntegrationById(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getPublicIntegration = (props: GetPublicIntegrationProps) => this._innerClient.getPublicIntegration(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createBot = (createBotBody: CreateBotProps) => this._innerClient.createBot({ createBotBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateBot = ({ id, ...updateBotBody }: UpdateBotProps) => this._innerClient.updateBot({ id, updateBotBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic transferBot = ({ id, ...transferBotBody }: TransferBotProps) => this._innerClient.transferBot({ id, transferBotBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listBots = (props: ListBotsProps) => this._innerClient.listBots(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBot = (props: GetBotProps) => this._innerClient.getBot(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteBot = (props: DeleteBotProps) => this._innerClient.deleteBot(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBotLogs = (props: GetBotLogsProps) => this._innerClient.getBotLogs(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBotWebchat = (props: GetBotWebchatProps) => this._innerClient.getBotWebchat(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBotAnalytics = (props: GetBotAnalyticsProps) => this._innerClient.getBotAnalytics(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listBotIssues = (props: ListBotIssuesProps) => this._innerClient.listBotIssues(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteBotIssue = (props: DeleteBotIssueProps) => this._innerClient.deleteBotIssue(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listBotIssueEvents = (props: ListBotIssueEventsProps) => this._innerClient.listBotIssueEvents(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic setWorkspacePaymentMethod = ({ id, ...setWorkspacePaymentMethodBody }: SetWorkspacePaymentMethodProps) => this._innerClient.setWorkspacePaymentMethod({ id, setWorkspacePaymentMethodBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaceInvoices = (props: ListWorkspaceInvoicesProps) => this._innerClient.listWorkspaceInvoices(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getUpcomingInvoice = (props: GetUpcomingInvoiceProps) => this._innerClient.getUpcomingInvoice(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic chargeWorkspaceUnpaidInvoices = ({ id, ...chargeWorkspaceUnpaidInvoicesBody }: ChargeWorkspaceUnpaidInvoicesProps) => this._innerClient.chargeWorkspaceUnpaidInvoices({ id, chargeWorkspaceUnpaidInvoicesBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createWorkspace = (createWorkspaceBody: CreateWorkspaceProps) => this._innerClient.createWorkspace({ createWorkspaceBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getPublicWorkspace = (props: GetPublicWorkspaceProps) => this._innerClient.getPublicWorkspace(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getWorkspace = (props: GetWorkspaceProps) => this._innerClient.getWorkspace(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaceUsages = (props: ListWorkspaceUsagesProps) => this._innerClient.listWorkspaceUsages(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic breakDownWorkspaceUsageByBot = (props: BreakDownWorkspaceUsageByBotProps) => this._innerClient.breakDownWorkspaceUsageByBot(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getAllWorkspaceQuotaCompletion = () => this._innerClient.getAllWorkspaceQuotaCompletion().then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getWorkspaceQuota = (props: GetWorkspaceQuotaProps) => this._innerClient.getWorkspaceQuota(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaceQuotas = (props: ListWorkspaceQuotasProps) => this._innerClient.listWorkspaceQuotas(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateWorkspace = ({ id, ...updateWorkspaceBody }: UpdateWorkspaceProps) => this._innerClient.updateWorkspace({ id, updateWorkspaceBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic checkHandleAvailability = (checkHandleAvailabilityBody: CheckHandleAvailabilityProps) => this._innerClient.checkHandleAvailability({ checkHandleAvailabilityBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaces = (props: ListWorkspacesProps) => this._innerClient.listWorkspaces(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic changeWorkspacePlan = ({ id, ...changeWorkspacePlanBody }: ChangeWorkspacePlanProps) => this._innerClient.changeWorkspacePlan({ id, changeWorkspacePlanBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteWorkspace = (props: DeleteWorkspaceProps) => this._innerClient.deleteWorkspace(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getAuditRecords = (props: GetAuditRecordsProps) => this._innerClient.getAuditRecords(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaceMembers = (props: ListWorkspaceMembersProps) => this._innerClient.listWorkspaceMembers(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteWorkspaceMember = (props: DeleteWorkspaceMemberProps) => this._innerClient.deleteWorkspaceMember(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createWorkspaceMember = (createWorkspaceMemberBody: CreateWorkspaceMemberProps) => this._innerClient.createWorkspaceMember({ createWorkspaceMemberBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateWorkspaceMember = ({ id, ...updateWorkspaceMemberBody }: UpdateWorkspaceMemberProps) => this._innerClient.updateWorkspaceMember({ id, updateWorkspaceMemberBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listIntegrationApiKeys = (props: ListIntegrationApiKeysProps) => this._innerClient.listIntegrationApiKeys(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createIntegrationApiKey = (createIntegrationApiKeyBody: CreateIntegrationApiKeyProps) => this._innerClient.createIntegrationApiKey({ createIntegrationApiKeyBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteIntegrationApiKey = (props: DeleteIntegrationApiKeyProps) => this._innerClient.deleteIntegrationApiKey(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createIntegration = (createIntegrationBody: CreateIntegrationProps) => this._innerClient.createIntegration({ createIntegrationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateIntegration = ({ id, ...updateIntegrationBody }: UpdateIntegrationProps) => this._innerClient.updateIntegration({ id, updateIntegrationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listIntegrations = (props: ListIntegrationsProps) => this._innerClient.listIntegrations(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getIntegration = (props: GetIntegrationProps) => this._innerClient.getIntegration(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getIntegrationLogs = (props: GetIntegrationLogsProps) => this._innerClient.getIntegrationLogs(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getIntegrationByName = (props: GetIntegrationByNameProps) => this._innerClient.getIntegrationByName(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteIntegration = (props: DeleteIntegrationProps) => this._innerClient.deleteIntegration(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getUsage = (props: GetUsageProps) => this._innerClient.getUsage(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listUsageHistory = (props: ListUsageHistoryProps) => this._innerClient.listUsageHistory(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic changeAISpendQuota = (changeAISpendQuotaBody: ChangeAISpendQuotaProps) => this._innerClient.changeAISpendQuota({ changeAISpendQuotaBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listActivities = (props: ListActivitiesProps) => this._innerClient.listActivities(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic introspect = (introspectBody: IntrospectProps) => this._innerClient.introspect({ introspectBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createFile = ({ xName, xTags, xAccessPolicies, xIndex, contentType, contentLength, ...createFileBody }: CreateFileProps) => this._innerClient.createFile({ xName, xTags, xAccessPolicies, xIndex, contentType, contentLength, createFileBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteFile = (props: DeleteFileProps) => this._innerClient.deleteFile(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listFiles = (props: ListFilesProps) => this._innerClient.listFiles(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getFileMetadata = (props: GetFileMetadataProps) => this._innerClient.getFileMetadata(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getFileContent = (props: GetFileContentProps) => this._innerClient.getFileContent(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateFileMetadata = ({ id, ...updateFileMetadataBody }: UpdateFileMetadataProps) => this._innerClient.updateFileMetadata({ id, updateFileMetadataBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic searchFiles = (props: SearchFilesProps) => this._innerClient.searchFiles(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listTables = (props: ListTablesProps) => this._innerClient.listTables(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getTable = (props: GetTableProps) => this._innerClient.getTable(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateTable = ({ table, ...getOrCreateTableBody }: GetOrCreateTableProps) => this._innerClient.getOrCreateTable({ table, getOrCreateTableBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createTable = (createTableBody: CreateTableProps) => this._innerClient.createTable({ createTableBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic duplicateTable = ({ sourceTableId, ...duplicateTableBody }: DuplicateTableProps) => this._innerClient.duplicateTable({ sourceTableId, duplicateTableBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateTable = ({ table, ...updateTableBody }: UpdateTableProps) => this._innerClient.updateTable({ table, updateTableBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic renameTableColumn = ({ table, ...renameTableColumnBody }: RenameTableColumnProps) => this._innerClient.renameTableColumn({ table, renameTableColumnBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteTable = (props: DeleteTableProps) => this._innerClient.deleteTable(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getTableRow = (props: GetTableRowProps) => this._innerClient.getTableRow(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic findTableRows = ({ table, ...findTableRowsBody }: FindTableRowsProps) => this._innerClient.findTableRows({ table, findTableRowsBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createTableRows = ({ table, ...createTableRowsBody }: CreateTableRowsProps) => this._innerClient.createTableRows({ table, createTableRowsBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteTableRows = ({ table, ...deleteTableRowsBody }: DeleteTableRowsProps) => this._innerClient.deleteTableRows({ table, deleteTableRowsBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateTableRows = ({ table, ...updateTableRowsBody }: UpdateTableRowsProps) => this._innerClient.updateTableRows({ table, updateTableRowsBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic upsertTableRows = ({ table, ...upsertTableRowsBody }: UpsertTableRowsProps) => this._innerClient.upsertTableRows({ table, upsertTableRowsBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n}\n\nexport type CreateConversationProps = Merge<\n  Except<DefaultApiCreateConversationRequest, 'createConversationBody'>,\n  NonNullable<DefaultApiCreateConversationRequest['createConversationBody']>\n>\n\nexport type GetConversationProps = Merge<DefaultApiGetConversationRequest, {}>\n\nexport type ListConversationsProps = Merge<DefaultApiListConversationsRequest, {}>\n\nexport type GetOrCreateConversationProps = Merge<\n  Except<DefaultApiGetOrCreateConversationRequest, 'getOrCreateConversationBody'>,\n  NonNullable<DefaultApiGetOrCreateConversationRequest['getOrCreateConversationBody']>\n>\n\nexport type UpdateConversationProps = Merge<\n  Except<DefaultApiUpdateConversationRequest, 'updateConversationBody'>,\n  NonNullable<DefaultApiUpdateConversationRequest['updateConversationBody']>\n>\n\nexport type DeleteConversationProps = Merge<DefaultApiDeleteConversationRequest, {}>\n\nexport type ListParticipantsProps = Merge<DefaultApiListParticipantsRequest, {}>\n\nexport type AddParticipantProps = Merge<\n  Except<DefaultApiAddParticipantRequest, 'addParticipantBody'>,\n  NonNullable<DefaultApiAddParticipantRequest['addParticipantBody']>\n>\n\nexport type GetParticipantProps = Merge<DefaultApiGetParticipantRequest, {}>\n\nexport type RemoveParticipantProps = Merge<DefaultApiRemoveParticipantRequest, {}>\n\nexport type CreateEventProps = Merge<\n  Except<DefaultApiCreateEventRequest, 'createEventBody'>,\n  NonNullable<DefaultApiCreateEventRequest['createEventBody']>\n>\n\nexport type GetEventProps = Merge<DefaultApiGetEventRequest, {}>\n\nexport type ListEventsProps = Merge<DefaultApiListEventsRequest, {}>\n\nexport type CreateMessageProps = Merge<\n  Except<DefaultApiCreateMessageRequest, 'createMessageBody'>,\n  NonNullable<DefaultApiCreateMessageRequest['createMessageBody']>\n>\n\nexport type GetOrCreateMessageProps = Merge<\n  Except<DefaultApiGetOrCreateMessageRequest, 'getOrCreateMessageBody'>,\n  NonNullable<DefaultApiGetOrCreateMessageRequest['getOrCreateMessageBody']>\n>\n\nexport type GetMessageProps = Merge<DefaultApiGetMessageRequest, {}>\n\nexport type UpdateMessageProps = Merge<\n  Except<DefaultApiUpdateMessageRequest, 'updateMessageBody'>,\n  NonNullable<DefaultApiUpdateMessageRequest['updateMessageBody']>\n>\n\nexport type ListMessagesProps = Merge<DefaultApiListMessagesRequest, {}>\n\nexport type DeleteMessageProps = Merge<DefaultApiDeleteMessageRequest, {}>\n\nexport type CreateUserProps = Merge<\n  Except<DefaultApiCreateUserRequest, 'createUserBody'>,\n  NonNullable<DefaultApiCreateUserRequest['createUserBody']>\n>\n\nexport type GetUserProps = Merge<DefaultApiGetUserRequest, {}>\n\nexport type ListUsersProps = Merge<DefaultApiListUsersRequest, {}>\n\nexport type GetOrCreateUserProps = Merge<\n  Except<DefaultApiGetOrCreateUserRequest, 'getOrCreateUserBody'>,\n  NonNullable<DefaultApiGetOrCreateUserRequest['getOrCreateUserBody']>\n>\n\nexport type UpdateUserProps = Merge<\n  Except<DefaultApiUpdateUserRequest, 'updateUserBody'>,\n  NonNullable<DefaultApiUpdateUserRequest['updateUserBody']>\n>\n\nexport type DeleteUserProps = Merge<DefaultApiDeleteUserRequest, {}>\n\nexport type GetStateProps = Merge<DefaultApiGetStateRequest, {}>\n\nexport type SetStateProps = Merge<\n  Except<DefaultApiSetStateRequest, 'setStateBody'>,\n  NonNullable<DefaultApiSetStateRequest['setStateBody']>\n>\n\nexport type GetOrSetStateProps = Merge<\n  Except<DefaultApiGetOrSetStateRequest, 'getOrSetStateBody'>,\n  NonNullable<DefaultApiGetOrSetStateRequest['getOrSetStateBody']>\n>\n\nexport type PatchStateProps = Merge<\n  Except<DefaultApiPatchStateRequest, 'patchStateBody'>,\n  NonNullable<DefaultApiPatchStateRequest['patchStateBody']>\n>\n\nexport type CallActionProps = Merge<\n  Except<DefaultApiCallActionRequest, 'callActionBody'>,\n  NonNullable<DefaultApiCallActionRequest['callActionBody']>\n>\n\nexport type ConfigureIntegrationProps = Merge<\n  Except<DefaultApiConfigureIntegrationRequest, 'configureIntegrationBody'>,\n  NonNullable<DefaultApiConfigureIntegrationRequest['configureIntegrationBody']>\n>\n\nexport type GetTaskProps = Merge<DefaultApiGetTaskRequest, {}>\n\nexport type CreateTaskProps = Merge<\n  Except<DefaultApiCreateTaskRequest, 'createTaskBody'>,\n  NonNullable<DefaultApiCreateTaskRequest['createTaskBody']>\n>\n\nexport type UpdateTaskProps = Merge<\n  Except<DefaultApiUpdateTaskRequest, 'updateTaskBody'>,\n  NonNullable<DefaultApiUpdateTaskRequest['updateTaskBody']>\n>\n\nexport type DeleteTaskProps = Merge<DefaultApiDeleteTaskRequest, {}>\n\nexport type ListTasksProps = Merge<DefaultApiListTasksRequest, {}>\n\nexport type RunVrlProps = Merge<\n  Except<DefaultApiRunVrlRequest, 'runVrlBody'>,\n  NonNullable<DefaultApiRunVrlRequest['runVrlBody']>\n>\n\n\nexport type UpdateAccountProps = Merge<\n  Except<DefaultApiUpdateAccountRequest, 'updateAccountBody'>,\n  NonNullable<DefaultApiUpdateAccountRequest['updateAccountBody']>\n>\n\n\nexport type CreatePersonalAccessTokenProps = Merge<\n  Except<DefaultApiCreatePersonalAccessTokenRequest, 'createPersonalAccessTokenBody'>,\n  NonNullable<DefaultApiCreatePersonalAccessTokenRequest['createPersonalAccessTokenBody']>\n>\n\nexport type DeletePersonalAccessTokenProps = Merge<DefaultApiDeletePersonalAccessTokenRequest, {}>\n\nexport type SetAccountPreferenceProps = Merge<\n  Except<DefaultApiSetAccountPreferenceRequest, 'setAccountPreferenceBody'>,\n  NonNullable<DefaultApiSetAccountPreferenceRequest['setAccountPreferenceBody']>\n>\n\nexport type GetAccountPreferenceProps = Merge<DefaultApiGetAccountPreferenceRequest, {}>\n\nexport type ListPublicIntegrationsProps = Merge<DefaultApiListPublicIntegrationsRequest, {}>\n\nexport type GetPublicIntegrationByIdProps = Merge<DefaultApiGetPublicIntegrationByIdRequest, {}>\n\nexport type GetPublicIntegrationProps = Merge<DefaultApiGetPublicIntegrationRequest, {}>\n\nexport type CreateBotProps = Merge<\n  Except<DefaultApiCreateBotRequest, 'createBotBody'>,\n  NonNullable<DefaultApiCreateBotRequest['createBotBody']>\n>\n\nexport type UpdateBotProps = Merge<\n  Except<DefaultApiUpdateBotRequest, 'updateBotBody'>,\n  NonNullable<DefaultApiUpdateBotRequest['updateBotBody']>\n>\n\nexport type TransferBotProps = Merge<\n  Except<DefaultApiTransferBotRequest, 'transferBotBody'>,\n  NonNullable<DefaultApiTransferBotRequest['transferBotBody']>\n>\n\nexport type ListBotsProps = Merge<DefaultApiListBotsRequest, {}>\n\nexport type GetBotProps = Merge<DefaultApiGetBotRequest, {}>\n\nexport type DeleteBotProps = Merge<DefaultApiDeleteBotRequest, {}>\n\nexport type GetBotLogsProps = Merge<DefaultApiGetBotLogsRequest, {}>\n\nexport type GetBotWebchatProps = Merge<DefaultApiGetBotWebchatRequest, {}>\n\nexport type GetBotAnalyticsProps = Merge<DefaultApiGetBotAnalyticsRequest, {}>\n\nexport type ListBotIssuesProps = Merge<DefaultApiListBotIssuesRequest, {}>\n\nexport type DeleteBotIssueProps = Merge<DefaultApiDeleteBotIssueRequest, {}>\n\nexport type ListBotIssueEventsProps = Merge<DefaultApiListBotIssueEventsRequest, {}>\n\nexport type SetWorkspacePaymentMethodProps = Merge<\n  Except<DefaultApiSetWorkspacePaymentMethodRequest, 'setWorkspacePaymentMethodBody'>,\n  NonNullable<DefaultApiSetWorkspacePaymentMethodRequest['setWorkspacePaymentMethodBody']>\n>\n\nexport type ListWorkspaceInvoicesProps = Merge<DefaultApiListWorkspaceInvoicesRequest, {}>\n\nexport type GetUpcomingInvoiceProps = Merge<DefaultApiGetUpcomingInvoiceRequest, {}>\n\nexport type ChargeWorkspaceUnpaidInvoicesProps = Merge<\n  Except<DefaultApiChargeWorkspaceUnpaidInvoicesRequest, 'chargeWorkspaceUnpaidInvoicesBody'>,\n  NonNullable<DefaultApiChargeWorkspaceUnpaidInvoicesRequest['chargeWorkspaceUnpaidInvoicesBody']>\n>\n\nexport type CreateWorkspaceProps = Merge<\n  Except<DefaultApiCreateWorkspaceRequest, 'createWorkspaceBody'>,\n  NonNullable<DefaultApiCreateWorkspaceRequest['createWorkspaceBody']>\n>\n\nexport type GetPublicWorkspaceProps = Merge<DefaultApiGetPublicWorkspaceRequest, {}>\n\nexport type GetWorkspaceProps = Merge<DefaultApiGetWorkspaceRequest, {}>\n\nexport type ListWorkspaceUsagesProps = Merge<DefaultApiListWorkspaceUsagesRequest, {}>\n\nexport type BreakDownWorkspaceUsageByBotProps = Merge<DefaultApiBreakDownWorkspaceUsageByBotRequest, {}>\n\n\nexport type GetWorkspaceQuotaProps = Merge<DefaultApiGetWorkspaceQuotaRequest, {}>\n\nexport type ListWorkspaceQuotasProps = Merge<DefaultApiListWorkspaceQuotasRequest, {}>\n\nexport type UpdateWorkspaceProps = Merge<\n  Except<DefaultApiUpdateWorkspaceRequest, 'updateWorkspaceBody'>,\n  NonNullable<DefaultApiUpdateWorkspaceRequest['updateWorkspaceBody']>\n>\n\nexport type CheckHandleAvailabilityProps = Merge<\n  Except<DefaultApiCheckHandleAvailabilityRequest, 'checkHandleAvailabilityBody'>,\n  NonNullable<DefaultApiCheckHandleAvailabilityRequest['checkHandleAvailabilityBody']>\n>\n\nexport type ListWorkspacesProps = Merge<DefaultApiListWorkspacesRequest, {}>\n\nexport type ChangeWorkspacePlanProps = Merge<\n  Except<DefaultApiChangeWorkspacePlanRequest, 'changeWorkspacePlanBody'>,\n  NonNullable<DefaultApiChangeWorkspacePlanRequest['changeWorkspacePlanBody']>\n>\n\nexport type DeleteWorkspaceProps = Merge<DefaultApiDeleteWorkspaceRequest, {}>\n\nexport type GetAuditRecordsProps = Merge<DefaultApiGetAuditRecordsRequest, {}>\n\nexport type ListWorkspaceMembersProps = Merge<DefaultApiListWorkspaceMembersRequest, {}>\n\nexport type DeleteWorkspaceMemberProps = Merge<DefaultApiDeleteWorkspaceMemberRequest, {}>\n\nexport type CreateWorkspaceMemberProps = Merge<\n  Except<DefaultApiCreateWorkspaceMemberRequest, 'createWorkspaceMemberBody'>,\n  NonNullable<DefaultApiCreateWorkspaceMemberRequest['createWorkspaceMemberBody']>\n>\n\nexport type UpdateWorkspaceMemberProps = Merge<\n  Except<DefaultApiUpdateWorkspaceMemberRequest, 'updateWorkspaceMemberBody'>,\n  NonNullable<DefaultApiUpdateWorkspaceMemberRequest['updateWorkspaceMemberBody']>\n>\n\nexport type ListIntegrationApiKeysProps = Merge<DefaultApiListIntegrationApiKeysRequest, {}>\n\nexport type CreateIntegrationApiKeyProps = Merge<\n  Except<DefaultApiCreateIntegrationApiKeyRequest, 'createIntegrationApiKeyBody'>,\n  NonNullable<DefaultApiCreateIntegrationApiKeyRequest['createIntegrationApiKeyBody']>\n>\n\nexport type DeleteIntegrationApiKeyProps = Merge<DefaultApiDeleteIntegrationApiKeyRequest, {}>\n\nexport type CreateIntegrationProps = Merge<\n  Except<DefaultApiCreateIntegrationRequest, 'createIntegrationBody'>,\n  NonNullable<DefaultApiCreateIntegrationRequest['createIntegrationBody']>\n>\n\nexport type UpdateIntegrationProps = Merge<\n  Except<DefaultApiUpdateIntegrationRequest, 'updateIntegrationBody'>,\n  NonNullable<DefaultApiUpdateIntegrationRequest['updateIntegrationBody']>\n>\n\nexport type ListIntegrationsProps = Merge<DefaultApiListIntegrationsRequest, {}>\n\nexport type GetIntegrationProps = Merge<DefaultApiGetIntegrationRequest, {}>\n\nexport type GetIntegrationLogsProps = Merge<DefaultApiGetIntegrationLogsRequest, {}>\n\nexport type GetIntegrationByNameProps = Merge<DefaultApiGetIntegrationByNameRequest, {}>\n\nexport type DeleteIntegrationProps = Merge<DefaultApiDeleteIntegrationRequest, {}>\n\nexport type GetUsageProps = Merge<DefaultApiGetUsageRequest, {}>\n\nexport type ListUsageHistoryProps = Merge<DefaultApiListUsageHistoryRequest, {}>\n\nexport type ChangeAISpendQuotaProps = Merge<\n  Except<DefaultApiChangeAISpendQuotaRequest, 'changeAISpendQuotaBody'>,\n  NonNullable<DefaultApiChangeAISpendQuotaRequest['changeAISpendQuotaBody']>\n>\n\nexport type ListActivitiesProps = Merge<DefaultApiListActivitiesRequest, {}>\n\nexport type IntrospectProps = Merge<\n  Except<DefaultApiIntrospectRequest, 'introspectBody'>,\n  NonNullable<DefaultApiIntrospectRequest['introspectBody']>\n>\n\nexport type CreateFileProps = Merge<\n  Except<DefaultApiCreateFileRequest, 'createFileBody'>,\n  NonNullable<DefaultApiCreateFileRequest['createFileBody']>\n>\n\nexport type DeleteFileProps = Merge<DefaultApiDeleteFileRequest, {}>\n\nexport type ListFilesProps = Merge<DefaultApiListFilesRequest, {}>\n\nexport type GetFileMetadataProps = Merge<DefaultApiGetFileMetadataRequest, {}>\n\nexport type GetFileContentProps = Merge<DefaultApiGetFileContentRequest, {}>\n\nexport type UpdateFileMetadataProps = Merge<\n  Except<DefaultApiUpdateFileMetadataRequest, 'updateFileMetadataBody'>,\n  NonNullable<DefaultApiUpdateFileMetadataRequest['updateFileMetadataBody']>\n>\n\nexport type SearchFilesProps = Merge<DefaultApiSearchFilesRequest, {}>\n\nexport type ListTablesProps = Merge<DefaultApiListTablesRequest, {}>\n\nexport type GetTableProps = Merge<DefaultApiGetTableRequest, {}>\n\nexport type GetOrCreateTableProps = Merge<\n  Except<DefaultApiGetOrCreateTableRequest, 'getOrCreateTableBody'>,\n  NonNullable<DefaultApiGetOrCreateTableRequest['getOrCreateTableBody']>\n>\n\nexport type CreateTableProps = Merge<\n  Except<DefaultApiCreateTableRequest, 'createTableBody'>,\n  NonNullable<DefaultApiCreateTableRequest['createTableBody']>\n>\n\nexport type DuplicateTableProps = Merge<\n  Except<DefaultApiDuplicateTableRequest, 'duplicateTableBody'>,\n  NonNullable<DefaultApiDuplicateTableRequest['duplicateTableBody']>\n>\n\nexport type UpdateTableProps = Merge<\n  Except<DefaultApiUpdateTableRequest, 'updateTableBody'>,\n  NonNullable<DefaultApiUpdateTableRequest['updateTableBody']>\n>\n\nexport type RenameTableColumnProps = Merge<\n  Except<DefaultApiRenameTableColumnRequest, 'renameTableColumnBody'>,\n  NonNullable<DefaultApiRenameTableColumnRequest['renameTableColumnBody']>\n>\n\nexport type DeleteTableProps = Merge<DefaultApiDeleteTableRequest, {}>\n\nexport type GetTableRowProps = Merge<DefaultApiGetTableRowRequest, {}>\n\nexport type FindTableRowsProps = Merge<\n  Except<DefaultApiFindTableRowsRequest, 'findTableRowsBody'>,\n  NonNullable<DefaultApiFindTableRowsRequest['findTableRowsBody']>\n>\n\nexport type CreateTableRowsProps = Merge<\n  Except<DefaultApiCreateTableRowsRequest, 'createTableRowsBody'>,\n  NonNullable<DefaultApiCreateTableRowsRequest['createTableRowsBody']>\n>\n\nexport type DeleteTableRowsProps = Merge<\n  Except<DefaultApiDeleteTableRowsRequest, 'deleteTableRowsBody'>,\n  NonNullable<DefaultApiDeleteTableRowsRequest['deleteTableRowsBody']>\n>\n\nexport type UpdateTableRowsProps = Merge<\n  Except<DefaultApiUpdateTableRowsRequest, 'updateTableRowsBody'>,\n  NonNullable<DefaultApiUpdateTableRowsRequest['updateTableRowsBody']>\n>\n\nexport type UpsertTableRowsProps = Merge<\n  Except<DefaultApiUpsertTableRowsRequest, 'upsertTableRowsBody'>,\n  NonNullable<DefaultApiUpsertTableRowsRequest['upsertTableRowsBody']>\n>\n\n\nfunction getError(err: Error) {\n  if (axios.isAxiosError(err) && err.response?.data) {\n    return errorFrom(err.response.data)\n  }\n  return errorFrom(err)\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Botpress API\n * API for Botpress Cloud\n *\n * The version of the OpenAPI document: 0.24.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// URLSearchParams not necessarily used\n// @ts-ignore\n\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Account\n */\nexport interface Account {\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'displayName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'profilePicture'?: string;\n    /**\n     * Creation date of the [Account](#schema_account) in ISO 8601 format\n     * @type {string}\n     * @memberof Account\n     */\n    'createdAt': string;\n}\n/**\n * \n * @export\n * @interface Activity\n */\nexport interface Activity {\n    /**\n     * \n     * @type {string}\n     * @memberof Activity\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Activity\n     */\n    'description': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Activity\n     */\n    'taskId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Activity\n     */\n    'category': ActivityCategoryEnum;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof Activity\n     */\n    'data': { [key: string]: any; };\n    /**\n     * Creation date of the activity in ISO 8601 format\n     * @type {string}\n     * @memberof Activity\n     */\n    'createdAt': string;\n}\n\nexport const ActivityCategoryEnum = {\n    Unknown: 'unknown',\n    Capture: 'capture',\n    BotMessage: 'bot_message',\n    UserMessage: 'user_message',\n    AgentMessage: 'agent_message',\n    Event: 'event',\n    Action: 'action',\n    TaskStatus: 'task_status',\n    SubtaskStatus: 'subtask_status',\n    Exception: 'exception'\n} as const;\n\nexport type ActivityCategoryEnum = typeof ActivityCategoryEnum[keyof typeof ActivityCategoryEnum];\n\n/**\n * \n * @export\n * @interface AddParticipantBody\n */\nexport interface AddParticipantBody {\n    /**\n     * User id\n     * @type {string}\n     * @memberof AddParticipantBody\n     */\n    'userId': string;\n}\n/**\n * \n * @export\n * @interface AddParticipantResponse\n */\nexport interface AddParticipantResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof AddParticipantResponse\n     */\n    'participant': User;\n}\n/**\n * \n * @export\n * @interface Bot\n */\nexport interface Bot {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Bot\n     */\n    'id': string;\n    /**\n     * Creation date of the [Bot](#schema_bot) in ISO 8601 format\n     * @type {string}\n     * @memberof Bot\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Bot](#schema_bot) in ISO 8601 format\n     * @type {string}\n     * @memberof Bot\n     */\n    'updatedAt': string;\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof Bot\n     */\n    'signingSecret': string;\n    /**\n     * A mapping of integrations to their configuration\n     * @type {{ [key: string]: BotIntegrationsValue; }}\n     * @memberof Bot\n     */\n    'integrations': { [key: string]: BotIntegrationsValue; };\n    /**\n     * \n     * @type {BotUser}\n     * @memberof Bot\n     */\n    'user': BotUser;\n    /**\n     * \n     * @type {BotConversation}\n     * @memberof Bot\n     */\n    'conversation': BotConversation;\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage}\n     * @memberof Bot\n     */\n    'message': GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage;\n    /**\n     * A mapping of states to their definition\n     * @type {{ [key: string]: CreateBotBodyStatesValue; }}\n     * @memberof Bot\n     */\n    'states': { [key: string]: CreateBotBodyStatesValue; };\n    /**\n     * \n     * @type {BotConfiguration}\n     * @memberof Bot\n     */\n    'configuration': BotConfiguration;\n    /**\n     * Events definition\n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; }}\n     * @memberof Bot\n     */\n    'events': { [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; };\n    /**\n     * Recurring events\n     * @type {{ [key: string]: BotRecurringEventsValue; }}\n     * @memberof Bot\n     */\n    'recurringEvents': { [key: string]: BotRecurringEventsValue; };\n    /**\n     * \n     * @type {CreateBotBodySubscriptions}\n     * @memberof Bot\n     */\n    'subscriptions': CreateBotBodySubscriptions;\n    /**\n     * Actions definition\n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; }}\n     * @memberof Bot\n     */\n    'actions': { [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; };\n    /**\n     * Name of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof Bot\n     */\n    'name': string;\n    /**\n     * Last deployment date of the [Bot](#schema_bot) in the ISO 8601 format\n     * @type {string}\n     * @memberof Bot\n     */\n    'deployedAt'?: string;\n    /**\n     * Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations\n     * @type {boolean}\n     * @memberof Bot\n     */\n    'dev': boolean;\n    /**\n     * Id of the user that created the bot\n     * @type {string}\n     * @memberof Bot\n     */\n    'createdBy'?: string;\n    /**\n     * Indicates if the [Bot](#schema_bot) should be in always alive mode\n     * @type {boolean}\n     * @memberof Bot\n     */\n    'alwaysAlive': boolean;\n    /**\n     * Status of the bot\n     * @type {string}\n     * @memberof Bot\n     */\n    'status': BotStatusEnum;\n    /**\n     * Media files associated with the [Bot](#schema_bot)\n     * @type {Array<BotMediasInner>}\n     * @memberof Bot\n     */\n    'medias': Array<BotMediasInner>;\n}\n\nexport const BotStatusEnum = {\n    Active: 'active',\n    Deploying: 'deploying'\n} as const;\n\nexport type BotStatusEnum = typeof BotStatusEnum[keyof typeof BotStatusEnum];\n\n/**\n * Configuration of the bot\n * @export\n * @interface BotConfiguration\n */\nexport interface BotConfiguration {\n    /**\n     * Configuration data\n     * @type {{ [key: string]: any; }}\n     * @memberof BotConfiguration\n     */\n    'data': { [key: string]: any; };\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof BotConfiguration\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * Conversation object configuration\n * @export\n * @interface BotConversation\n */\nexport interface BotConversation {\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}\n     * @memberof BotConversation\n     */\n    'tags': { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; };\n}\n/**\n * \n * @export\n * @interface BotIntegrationsValue\n */\nexport interface BotIntegrationsValue {\n    /**\n     * \n     * @type {boolean}\n     * @memberof BotIntegrationsValue\n     */\n    'enabled': boolean;\n    /**\n     * Type of the task\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'name': string;\n    /**\n     * Type of the task\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'version': string;\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'webhookUrl': string;\n    /**\n     * Type of the task\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'webhookId': string;\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'identifier'?: string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof BotIntegrationsValue\n     */\n    'configuration': { [key: string]: any; };\n    /**\n     * \n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'status': BotIntegrationsValueStatusEnum;\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'statusReason': string | null;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'id': string;\n    /**\n     * Creation date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'updatedAt': string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'title': string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'description': string;\n    /**\n     * URL of the icon of the integration. This is the icon that will be displayed in the UI\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'iconUrl': string;\n    /**\n     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.\n     * @type {boolean}\n     * @memberof BotIntegrationsValue\n     */\n    'public': boolean;\n}\n\nexport const BotIntegrationsValueStatusEnum = {\n    RegistrationPending: 'registration_pending',\n    Registered: 'registered',\n    RegistrationFailed: 'registration_failed',\n    UnregistrationPending: 'unregistration_pending',\n    Unregistered: 'unregistered',\n    UnregistrationFailed: 'unregistration_failed'\n} as const;\n\nexport type BotIntegrationsValueStatusEnum = typeof BotIntegrationsValueStatusEnum[keyof typeof BotIntegrationsValueStatusEnum];\n\n/**\n * \n * @export\n * @interface BotMediasInner\n */\nexport interface BotMediasInner {\n    /**\n     * URL of the media file\n     * @type {string}\n     * @memberof BotMediasInner\n     */\n    'url': string;\n    /**\n     * Name of the media file\n     * @type {string}\n     * @memberof BotMediasInner\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface BotRecurringEventsValue\n */\nexport interface BotRecurringEventsValue {\n    /**\n     * \n     * @type {BotRecurringEventsValueSchedule}\n     * @memberof BotRecurringEventsValue\n     */\n    'schedule': BotRecurringEventsValueSchedule;\n    /**\n     * Type of the task\n     * @type {string}\n     * @memberof BotRecurringEventsValue\n     */\n    'type': string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof BotRecurringEventsValue\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * The number of times the recurring event failed to run. This counter resets once the recurring event runs successfully.\n     * @type {number}\n     * @memberof BotRecurringEventsValue\n     */\n    'failedAttempts': number;\n    /**\n     * The reason why the recurring event failed to run in the last attempt.\n     * @type {string}\n     * @memberof BotRecurringEventsValue\n     */\n    'lastFailureReason': string | null;\n}\n/**\n * \n * @export\n * @interface BotRecurringEventsValueSchedule\n */\nexport interface BotRecurringEventsValueSchedule {\n    /**\n     * Type of the task\n     * @type {string}\n     * @memberof BotRecurringEventsValueSchedule\n     */\n    'cron': string;\n}\n/**\n * User object configuration\n * @export\n * @interface BotUser\n */\nexport interface BotUser {\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}\n     * @memberof BotUser\n     */\n    'tags': { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; };\n}\n/**\n * \n * @export\n * @interface BreakDownWorkspaceUsageByBotResponse\n */\nexport interface BreakDownWorkspaceUsageByBotResponse {\n    /**\n     * \n     * @type {Array<BreakDownWorkspaceUsageByBotResponseDataInner>}\n     * @memberof BreakDownWorkspaceUsageByBotResponse\n     */\n    'data': Array<BreakDownWorkspaceUsageByBotResponseDataInner>;\n}\n/**\n * \n * @export\n * @interface BreakDownWorkspaceUsageByBotResponseDataInner\n */\nexport interface BreakDownWorkspaceUsageByBotResponseDataInner {\n    /**\n     * \n     * @type {string}\n     * @memberof BreakDownWorkspaceUsageByBotResponseDataInner\n     */\n    'botId': string;\n    /**\n     * \n     * @type {number}\n     * @memberof BreakDownWorkspaceUsageByBotResponseDataInner\n     */\n    'value': number;\n}\n/**\n * \n * @export\n * @interface CallActionBody\n */\nexport interface CallActionBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CallActionBody\n     */\n    'type': string;\n    /**\n     * Input of the action\n     * @type {{ [key: string]: any; }}\n     * @memberof CallActionBody\n     */\n    'input': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CallActionResponse\n */\nexport interface CallActionResponse {\n    /**\n     * Input of the action\n     * @type {{ [key: string]: any; }}\n     * @memberof CallActionResponse\n     */\n    'output': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface ChangeAISpendQuotaBody\n */\nexport interface ChangeAISpendQuotaBody {\n    /**\n     * \n     * @type {number}\n     * @memberof ChangeAISpendQuotaBody\n     */\n    'monthlySpendingLimit': number;\n}\n/**\n * \n * @export\n * @interface ChangeWorkspacePlanBody\n */\nexport interface ChangeWorkspacePlanBody {\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanBody\n     */\n    'plan': ChangeWorkspacePlanBodyPlanEnum;\n}\n\nexport const ChangeWorkspacePlanBodyPlanEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type ChangeWorkspacePlanBodyPlanEnum = typeof ChangeWorkspacePlanBodyPlanEnum[keyof typeof ChangeWorkspacePlanBodyPlanEnum];\n\n/**\n * \n * @export\n * @interface ChangeWorkspacePlanResponse\n */\nexport interface ChangeWorkspacePlanResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'accountType': ChangeWorkspacePlanResponseAccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'billingVersion': ChangeWorkspacePlanResponseBillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'plan': ChangeWorkspacePlanResponsePlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'spendingLimit': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'about'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'profilePicture'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'contactEmail'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'website'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'socialAccounts'?: Array<string>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'isPublic'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'handle'?: string;\n}\n\nexport const ChangeWorkspacePlanResponseAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type ChangeWorkspacePlanResponseAccountTypeEnum = typeof ChangeWorkspacePlanResponseAccountTypeEnum[keyof typeof ChangeWorkspacePlanResponseAccountTypeEnum];\nexport const ChangeWorkspacePlanResponseBillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type ChangeWorkspacePlanResponseBillingVersionEnum = typeof ChangeWorkspacePlanResponseBillingVersionEnum[keyof typeof ChangeWorkspacePlanResponseBillingVersionEnum];\nexport const ChangeWorkspacePlanResponsePlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type ChangeWorkspacePlanResponsePlanEnum = typeof ChangeWorkspacePlanResponsePlanEnum[keyof typeof ChangeWorkspacePlanResponsePlanEnum];\n\n/**\n * \n * @export\n * @interface ChargeWorkspaceUnpaidInvoicesBody\n */\nexport interface ChargeWorkspaceUnpaidInvoicesBody {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ChargeWorkspaceUnpaidInvoicesBody\n     */\n    'invoiceIds'?: Array<string>;\n}\n/**\n * \n * @export\n * @interface ChargeWorkspaceUnpaidInvoicesResponse\n */\nexport interface ChargeWorkspaceUnpaidInvoicesResponse {\n    /**\n     * Invoices that were successfully charged by this request.\n     * @type {Array<ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner>}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponse\n     */\n    'chargedInvoices': Array<ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner>;\n    /**\n     * Invoices that failed to be charged by this request.\n     * @type {Array<ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner>}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponse\n     */\n    'failedInvoices': Array<ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner>;\n}\n/**\n * \n * @export\n * @interface ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner\n */\nexport interface ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner\n     */\n    'amount': number;\n}\n/**\n * \n * @export\n * @interface ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner\n */\nexport interface ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner\n     */\n    'amount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner\n     */\n    'failedReason': string;\n}\n/**\n * \n * @export\n * @interface CheckHandleAvailabilityBody\n */\nexport interface CheckHandleAvailabilityBody {\n    /**\n     * \n     * @type {string}\n     * @memberof CheckHandleAvailabilityBody\n     */\n    'handle': string;\n}\n/**\n * \n * @export\n * @interface CheckHandleAvailabilityResponse\n */\nexport interface CheckHandleAvailabilityResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof CheckHandleAvailabilityResponse\n     */\n    'available': boolean;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CheckHandleAvailabilityResponse\n     */\n    'suggestions': Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof CheckHandleAvailabilityResponse\n     */\n    'usedBy'?: string;\n}\n/**\n * \n * @export\n * @interface Column\n */\nexport interface Column {\n    /**\n     * Unique identifier for the column.\n     * @type {string}\n     * @memberof Column\n     */\n    'id'?: string;\n    /**\n     * Name of the column, must be within length limits.\n     * @type {string}\n     * @memberof Column\n     */\n    'name': string;\n    /**\n     * Optional descriptive text about the column.\n     * @type {string}\n     * @memberof Column\n     */\n    'description'?: string;\n    /**\n     * Indicates if the column is vectorized and searchable.\n     * @type {boolean}\n     * @memberof Column\n     */\n    'searchable'?: boolean;\n    /**\n     * Specifies the data type of the column. Use \\\"object\\\" for complex data structures.\n     * @type {string}\n     * @memberof Column\n     */\n    'type': ColumnTypeEnum;\n    /**\n     * TypeScript typings for the column. Recommended if the type is \\\"object\\\", ex: \\\"\\\\{ foo: string; bar: number \\\\}\\\"\n     * @type {string}\n     * @memberof Column\n     */\n    'typings'?: string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof Column\n     */\n    'schema'?: { [key: string]: any; };\n}\n\nexport const ColumnTypeEnum = {\n    String: 'string',\n    Number: 'number',\n    Boolean: 'boolean',\n    Date: 'date',\n    Object: 'object'\n} as const;\n\nexport type ColumnTypeEnum = typeof ColumnTypeEnum[keyof typeof ColumnTypeEnum];\n\n/**\n * \n * @export\n * @interface ConfigureIntegrationBody\n */\nexport interface ConfigureIntegrationBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof ConfigureIntegrationBody\n     */\n    'identifier': string;\n}\n/**\n * The conversation object represents an exchange of messages between one or more users. A [Conversation](#schema_conversation) is always linked to an integration\\'s channels. For example, a Slack channel represents a conversation.\n * @export\n * @interface Conversation\n */\nexport interface Conversation {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Conversation\n     */\n    'id': string;\n    /**\n     * Id of the current [Task](#schema_task)\n     * @type {string}\n     * @memberof Conversation\n     */\n    'currentTaskId'?: string;\n    /**\n     * Creation date of the [Conversation](#schema_conversation) in ISO 8601 format\n     * @type {string}\n     * @memberof Conversation\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Conversation](#schema_conversation) in ISO 8601 format\n     * @type {string}\n     * @memberof Conversation\n     */\n    'updatedAt': string;\n    /**\n     * Name of the channel where the [Conversation](#schema_conversation) is happening\n     * @type {string}\n     * @memberof Conversation\n     */\n    'channel': string;\n    /**\n     * Name of the integration that created the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Conversation\n     */\n    'integration': string;\n    /**\n     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof Conversation\n     */\n    'tags': { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface CreateBotBody\n */\nexport interface CreateBotBody {\n    /**\n     * A mapping of states to their definition\n     * @type {{ [key: string]: CreateBotBodyStatesValue; }}\n     * @memberof CreateBotBody\n     */\n    'states'?: { [key: string]: CreateBotBodyStatesValue; };\n    /**\n     * Events definition\n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; }}\n     * @memberof CreateBotBody\n     */\n    'events'?: { [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyRecurringEventsValue; }}\n     * @memberof CreateBotBody\n     */\n    'recurringEvents'?: { [key: string]: CreateBotBodyRecurringEventsValue; };\n    /**\n     * \n     * @type {CreateBotBodySubscriptions}\n     * @memberof CreateBotBody\n     */\n    'subscriptions'?: CreateBotBodySubscriptions;\n    /**\n     * Actions definition\n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; }}\n     * @memberof CreateBotBody\n     */\n    'actions'?: { [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; };\n    /**\n     * \n     * @type {CreateBotBodyConfiguration}\n     * @memberof CreateBotBody\n     */\n    'configuration'?: CreateBotBodyConfiguration;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateBotBody\n     */\n    'user'?: CreateBotBodyUser;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateBotBody\n     */\n    'conversation'?: CreateBotBodyUser;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateBotBody\n     */\n    'message'?: CreateBotBodyUser;\n    /**\n     * JavaScript code of the bot\n     * @type {string}\n     * @memberof CreateBotBody\n     */\n    'code'?: string;\n    /**\n     * Optional name for the bot, if not provided will be auto-generated\n     * @type {string}\n     * @memberof CreateBotBody\n     */\n    'name'?: string;\n    /**\n     * Media files associated with the [Bot](#schema_bot)\n     * @type {Array<CreateBotBodyMediasInner>}\n     * @memberof CreateBotBody\n     */\n    'medias'?: Array<CreateBotBodyMediasInner>;\n    /**\n     * URL of the [Bot](#schema_bot); Only available for dev bots\n     * @type {string}\n     * @memberof CreateBotBody\n     */\n    'url'?: string;\n    /**\n     * Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations\n     * @type {boolean}\n     * @memberof CreateBotBody\n     */\n    'dev'?: boolean;\n}\n/**\n * \n * @export\n * @interface CreateBotBodyConfiguration\n */\nexport interface CreateBotBodyConfiguration {\n    /**\n     * Configuration data\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyConfiguration\n     */\n    'data'?: { [key: string]: any; };\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyConfiguration\n     */\n    'schema'?: { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CreateBotBodyMediasInner\n */\nexport interface CreateBotBodyMediasInner {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateBotBodyMediasInner\n     */\n    'url': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateBotBodyMediasInner\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface CreateBotBodyRecurringEventsValue\n */\nexport interface CreateBotBodyRecurringEventsValue {\n    /**\n     * \n     * @type {CreateBotBodyRecurringEventsValueSchedule}\n     * @memberof CreateBotBodyRecurringEventsValue\n     */\n    'schedule': CreateBotBodyRecurringEventsValueSchedule;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateBotBodyRecurringEventsValue\n     */\n    'type': string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyRecurringEventsValue\n     */\n    'payload': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CreateBotBodyRecurringEventsValueSchedule\n */\nexport interface CreateBotBodyRecurringEventsValueSchedule {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateBotBodyRecurringEventsValueSchedule\n     */\n    'cron': string;\n}\n/**\n * \n * @export\n * @interface CreateBotBodyStatesValue\n */\nexport interface CreateBotBodyStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)\n     * @type {string}\n     * @memberof CreateBotBodyStatesValue\n     */\n    'type': CreateBotBodyStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyStatesValue\n     */\n    'schema': { [key: string]: any; };\n    /**\n     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\\'t expire.\n     * @type {number}\n     * @memberof CreateBotBodyStatesValue\n     */\n    'expiry'?: number;\n}\n\nexport const CreateBotBodyStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Task: 'task'\n} as const;\n\nexport type CreateBotBodyStatesValueTypeEnum = typeof CreateBotBodyStatesValueTypeEnum[keyof typeof CreateBotBodyStatesValueTypeEnum];\n\n/**\n * Subscriptions of the bot\n * @export\n * @interface CreateBotBodySubscriptions\n */\nexport interface CreateBotBodySubscriptions {\n    /**\n     * Events that the bot is currently subscribed on (ex: \\\"slack:reactionAdded\\\"). If null, the bot is subscribed to all events.\n     * @type {{ [key: string]: { [key: string]: any; }; }}\n     * @memberof CreateBotBodySubscriptions\n     */\n    'events': { [key: string]: { [key: string]: any; }; } | null;\n}\n/**\n * \n * @export\n * @interface CreateBotBodyUser\n */\nexport interface CreateBotBodyUser {\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}\n     * @memberof CreateBotBodyUser\n     */\n    'tags'?: { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; };\n}\n/**\n * \n * @export\n * @interface CreateBotResponse\n */\nexport interface CreateBotResponse {\n    /**\n     * \n     * @type {Bot}\n     * @memberof CreateBotResponse\n     */\n    'bot': Bot;\n}\n/**\n * \n * @export\n * @interface CreateConversationBody\n */\nexport interface CreateConversationBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateConversationBody\n     */\n    'channel': string;\n    /**\n     * Tags for the [Conversation](#schema_conversation)\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateConversationBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * [DEPRECATED] To create a conversation from within a bot, call an action of the integration instead.\n     * @type {string}\n     * @memberof CreateConversationBody\n     * @deprecated\n     */\n    'integrationName'?: string;\n}\n/**\n * \n * @export\n * @interface CreateConversationResponse\n */\nexport interface CreateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof CreateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface CreateEventBody\n */\nexport interface CreateEventBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateEventBody\n     */\n    'type': string;\n    /**\n     * Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our API.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateEventBody\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * \n     * @type {CreateEventBodySchedule}\n     * @memberof CreateEventBody\n     */\n    'schedule'?: CreateEventBodySchedule;\n    /**\n     * ID of the [Conversation](#schema_conversation) to link the event to.\n     * @type {string}\n     * @memberof CreateEventBody\n     */\n    'conversationId'?: string;\n    /**\n     * ID of the [User](#schema_user) to link the event to.\n     * @type {string}\n     * @memberof CreateEventBody\n     */\n    'userId'?: string;\n    /**\n     * ID of the [Message](#schema_message) to link the event to.\n     * @type {string}\n     * @memberof CreateEventBody\n     */\n    'messageId'?: string;\n}\n/**\n * Schedule the Event to be sent at a specific time. Either dateTime or delay must be provided.\n * @export\n * @interface CreateEventBodySchedule\n */\nexport interface CreateEventBodySchedule {\n    /**\n     * When the [Event](#schema_event) will be sent, in the ISO 8601 format\n     * @type {string}\n     * @memberof CreateEventBodySchedule\n     */\n    'dateTime'?: string;\n    /**\n     * Delay in milliseconds before sending the [Event](#schema_event)\n     * @type {number}\n     * @memberof CreateEventBodySchedule\n     */\n    'delay'?: number;\n}\n/**\n * \n * @export\n * @interface CreateEventResponse\n */\nexport interface CreateEventResponse {\n    /**\n     * \n     * @type {Event}\n     * @memberof CreateEventResponse\n     */\n    'event': Event;\n}\n/**\n * \n * @export\n * @interface CreateFileBody\n */\nexport interface CreateFileBody {\n    /**\n     * \n     * @type {any}\n     * @memberof CreateFileBody\n     */\n    'data'?: any | null;\n}\n/**\n * \n * @export\n * @interface CreateFileResponse\n */\nexport interface CreateFileResponse {\n    /**\n     * \n     * @type {CreateFileResponseFile}\n     * @memberof CreateFileResponse\n     */\n    'file': CreateFileResponseFile;\n}\n/**\n * \n * @export\n * @interface CreateFileResponseFile\n */\nexport interface CreateFileResponseFile {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof CreateFileResponseFile\n     */\n    'id': string;\n    /**\n     * The ID of the bot the file belongs to\n     * @type {string}\n     * @memberof CreateFileResponseFile\n     */\n    'botId': string;\n    /**\n     * File name\n     * @type {string}\n     * @memberof CreateFileResponseFile\n     */\n    'name': string | null;\n    /**\n     * File size in bytes\n     * @type {number}\n     * @memberof CreateFileResponseFile\n     */\n    'size': number | null;\n    /**\n     * MIME type of the file\\'s content\n     * @type {string}\n     * @memberof CreateFileResponseFile\n     */\n    'contentType': string;\n    /**\n     * The tags of the file as an object of key/value pairs\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateFileResponseFile\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * File creation timestamp in ISO 8601 format\n     * @type {string}\n     * @memberof CreateFileResponseFile\n     */\n    'createdAt': string;\n    /**\n     * File last update timestamp in ISO 8601 format\n     * @type {string}\n     * @memberof CreateFileResponseFile\n     */\n    'updatedAt': string;\n    /**\n     * Access policies configured for the file.\n     * @type {Array<string>}\n     * @memberof CreateFileResponseFile\n     */\n    'accessPolicies': Array<string>;\n    /**\n     * Status of the file indexing process. No value will be set if indexing was not enabled for the file when it was created.\n     * @type {string}\n     * @memberof CreateFileResponseFile\n     */\n    'indexingStatus'?: CreateFileResponseFileIndexingStatusEnum;\n    /**\n     * Last failure reason of the file indexing if the indexing status is \\\"FAILED\\\".\n     * @type {string}\n     * @memberof CreateFileResponseFile\n     */\n    'indexingFailureReason'?: string;\n}\n\nexport const CreateFileResponseFileIndexingStatusEnum = {\n    Pending: 'PENDING',\n    InProgress: 'IN_PROGRESS',\n    Complete: 'COMPLETE',\n    Failed: 'FAILED'\n} as const;\n\nexport type CreateFileResponseFileIndexingStatusEnum = typeof CreateFileResponseFileIndexingStatusEnum[keyof typeof CreateFileResponseFileIndexingStatusEnum];\n\n/**\n * \n * @export\n * @interface CreateIntegrationApiKeyBody\n */\nexport interface CreateIntegrationApiKeyBody {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateIntegrationApiKeyBody\n     */\n    'integrationVersionId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateIntegrationApiKeyBody\n     */\n    'note'?: string;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationApiKeyResponse\n */\nexport interface CreateIntegrationApiKeyResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateIntegrationApiKeyResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateIntegrationApiKeyResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateIntegrationApiKeyResponse\n     */\n    'note': string;\n    /**\n     * The IAK value. This will only be returned here when created and cannot be retrieved later.\n     * @type {string}\n     * @memberof CreateIntegrationApiKeyResponse\n     */\n    'value': string;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBody\n */\nexport interface CreateIntegrationBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'name': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'version': string;\n    /**\n     * \n     * @type {CreateIntegrationBodyConfiguration}\n     * @memberof CreateIntegrationBody\n     */\n    'configuration'?: CreateIntegrationBodyConfiguration;\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'states'?: { [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue; };\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'events'?: { [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'actions'?: { [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; };\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'entities'?: { [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyIdentifier}\n     * @memberof CreateIntegrationBody\n     */\n    'identifier'?: CreateIntegrationBodyIdentifier;\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyChannelsValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'channels'?: { [key: string]: CreateIntegrationBodyChannelsValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyUser}\n     * @memberof CreateIntegrationBody\n     */\n    'user'?: CreateIntegrationBodyUser;\n    /**\n     * Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing.\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateIntegrationBody\n     */\n    'secrets'?: { [key: string]: string; };\n    /**\n     * JavaScript code of the integration\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'code'?: string;\n    /**\n     * URL of the integration; Only available for dev integrations\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'url'?: string;\n    /**\n     * Indicates if the integration is a development integration; Dev integrations run locally\n     * @type {boolean}\n     * @memberof CreateIntegrationBody\n     */\n    'dev'?: boolean;\n    /**\n     * Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes.\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'icon'?: string;\n    /**\n     * Base64 encoded markdown of the integration readme. The readme is specific to each integration versions.\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'readme'?: string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'title'?: string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'description'?: string;\n    /**\n     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.\n     * @type {boolean}\n     * @memberof CreateIntegrationBody\n     */\n    'public'?: boolean;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyChannelsValue\n */\nexport interface CreateIntegrationBodyChannelsValue {\n    /**\n     * Title of the channel\n     * @type {string}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the channel\n     * @type {string}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue; }}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'messages': { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyChannelsValueConversation}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'conversation'?: CreateIntegrationBodyChannelsValueConversation;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'message'?: CreateBotBodyUser;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyChannelsValueConversation\n */\nexport interface CreateIntegrationBodyChannelsValueConversation {\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation}\n     * @memberof CreateIntegrationBodyChannelsValueConversation\n     */\n    'creation'?: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation;\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}\n     * @memberof CreateIntegrationBodyChannelsValueConversation\n     */\n    'tags'?: { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; };\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyConfiguration\n */\nexport interface CreateIntegrationBodyConfiguration {\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateIntegrationBodyConfiguration\n     */\n    'schema'?: { [key: string]: any; };\n    /**\n     * \n     * @type {CreateIntegrationBodyConfigurationIdentifier}\n     * @memberof CreateIntegrationBodyConfiguration\n     */\n    'identifier'?: CreateIntegrationBodyConfigurationIdentifier;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyConfigurationIdentifier\n */\nexport interface CreateIntegrationBodyConfigurationIdentifier {\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateIntegrationBodyConfigurationIdentifier\n     */\n    'required'?: boolean;\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof CreateIntegrationBodyConfigurationIdentifier\n     */\n    'linkTemplateScript'?: string;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyIdentifier\n */\nexport interface CreateIntegrationBodyIdentifier {\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof CreateIntegrationBodyIdentifier\n     */\n    'fallbackHandlerScript'?: string;\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof CreateIntegrationBodyIdentifier\n     */\n    'extractScript'?: string;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyUser\n */\nexport interface CreateIntegrationBodyUser {\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationUserCreation}\n     * @memberof CreateIntegrationBodyUser\n     */\n    'creation'?: GetPublicIntegrationByIdResponseIntegrationUserCreation;\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}\n     * @memberof CreateIntegrationBodyUser\n     */\n    'tags'?: { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; };\n}\n/**\n * \n * @export\n * @interface CreateIntegrationResponse\n */\nexport interface CreateIntegrationResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof CreateIntegrationResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface CreateMessageBody\n */\nexport interface CreateMessageBody {\n    /**\n     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateMessageBody\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * User id\n     * @type {string}\n     * @memberof CreateMessageBody\n     */\n    'userId': string;\n    /**\n     * User id\n     * @type {string}\n     * @memberof CreateMessageBody\n     */\n    'conversationId': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateMessageBody\n     */\n    'type': string;\n    /**\n     * Set of [Tags](#tags) that you can attach to a [Message](#schema_message). The set of [Tags](#tags) available on a [Message](#schema_message) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateMessageBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * \n     * @type {CreateMessageBodySchedule}\n     * @memberof CreateMessageBody\n     */\n    'schedule'?: CreateMessageBodySchedule;\n}\n/**\n * Schedule the Message to be sent at a specific time. Either dateTime or delay must be provided.\n * @export\n * @interface CreateMessageBodySchedule\n */\nexport interface CreateMessageBodySchedule {\n    /**\n     * When the [Event](#schema_event) will be sent, in the ISO 8601 format\n     * @type {string}\n     * @memberof CreateMessageBodySchedule\n     */\n    'dateTime'?: string;\n    /**\n     * Delay in milliseconds before sending the [Message](#schema_message)\n     * @type {number}\n     * @memberof CreateMessageBodySchedule\n     */\n    'delay'?: number;\n}\n/**\n * \n * @export\n * @interface CreateMessageResponse\n */\nexport interface CreateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof CreateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface CreatePersonalAccessTokenBody\n */\nexport interface CreatePersonalAccessTokenBody {\n    /**\n     * Note to identify the PAT\n     * @type {string}\n     * @memberof CreatePersonalAccessTokenBody\n     */\n    'note': string;\n}\n/**\n * \n * @export\n * @interface CreatePersonalAccessTokenResponse\n */\nexport interface CreatePersonalAccessTokenResponse {\n    /**\n     * \n     * @type {CreatePersonalAccessTokenResponsePat}\n     * @memberof CreatePersonalAccessTokenResponse\n     */\n    'pat': CreatePersonalAccessTokenResponsePat;\n}\n/**\n * \n * @export\n * @interface CreatePersonalAccessTokenResponsePat\n */\nexport interface CreatePersonalAccessTokenResponsePat {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePersonalAccessTokenResponsePat\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePersonalAccessTokenResponsePat\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePersonalAccessTokenResponsePat\n     */\n    'note': string;\n    /**\n     * The PAT value. This will only be returned here when created and cannot be retrieved later.\n     * @type {string}\n     * @memberof CreatePersonalAccessTokenResponsePat\n     */\n    'value': string;\n}\n/**\n * \n * @export\n * @interface CreateTableBody\n */\nexport interface CreateTableBody {\n    /**\n     * Required. This name is used to identify your table.\n     * @type {string}\n     * @memberof CreateTableBody\n     */\n    'name': string;\n    /**\n     * The \\'factor\\' multiplies the row\\'s data storage limit by 4KB and its quota count, but can only be set at table creation and not modified later. For instance, a factor of 2 increases storage to 8KB but counts as 2 rows in your quota. The default factor is 1.\n     * @type {number}\n     * @memberof CreateTableBody\n     */\n    'factor'?: number;\n    /**\n     * A table designated as \\\"frozen\\\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations.\n     * @type {boolean}\n     * @memberof CreateTableBody\n     */\n    'frozen'?: boolean;\n    /**\n     * Provide an object or a JSON schema to define the columns of the table. A maximum of 20 keys in the object/schema is allowed.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateTableBody\n     */\n    'schema': { [key: string]: any; };\n    /**\n     * Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs.\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateTableBody\n     */\n    'tags'?: { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface CreateTableResponse\n */\nexport interface CreateTableResponse {\n    /**\n     * \n     * @type {Table}\n     * @memberof CreateTableResponse\n     */\n    'table': Table;\n}\n/**\n * \n * @export\n * @interface CreateTableRowsBody\n */\nexport interface CreateTableRowsBody {\n    /**\n     * \n     * @type {Array<{ [key: string]: any; }>}\n     * @memberof CreateTableRowsBody\n     */\n    'rows': Array<{ [key: string]: any; }>;\n}\n/**\n * \n * @export\n * @interface CreateTableRowsResponse\n */\nexport interface CreateTableRowsResponse {\n    /**\n     * \n     * @type {Array<Row>}\n     * @memberof CreateTableRowsResponse\n     */\n    'rows': Array<Row>;\n    /**\n     * Alerts for minor issues that don\\'t block the operation but suggest possible improvements.\n     * @type {Array<string>}\n     * @memberof CreateTableRowsResponse\n     */\n    'warnings'?: Array<string>;\n    /**\n     * Critical issues in specific elements that prevent their successful processing, allowing partial operation success.\n     * @type {Array<string>}\n     * @memberof CreateTableRowsResponse\n     */\n    'errors'?: Array<string>;\n}\n/**\n * \n * @export\n * @interface CreateTaskBody\n */\nexport interface CreateTaskBody {\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof CreateTaskBody\n     */\n    'title'?: string;\n    /**\n     * All the notes related to the execution of the current task\n     * @type {string}\n     * @memberof CreateTaskBody\n     */\n    'description'?: string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateTaskBody\n     */\n    'type': string;\n    /**\n     * Content related to the task\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateTaskBody\n     */\n    'data'?: { [key: string]: any; };\n    /**\n     * Parent task id is the parent task that created this task\n     * @type {string}\n     * @memberof CreateTaskBody\n     */\n    'parentTaskId'?: string;\n    /**\n     * Conversation id related to this task\n     * @type {string}\n     * @memberof CreateTaskBody\n     */\n    'conversationId': string;\n    /**\n     * Specific user related to this task\n     * @type {string}\n     * @memberof CreateTaskBody\n     */\n    'userId'?: string;\n    /**\n     * The timeout date where the task should be failed in the ISO 8601 format\n     * @type {string}\n     * @memberof CreateTaskBody\n     */\n    'timeoutAt'?: string;\n    /**\n     * Tags for the [Task](#schema_task)\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateTaskBody\n     */\n    'tags'?: { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface CreateTaskResponse\n */\nexport interface CreateTaskResponse {\n    /**\n     * \n     * @type {Task}\n     * @memberof CreateTaskResponse\n     */\n    'task': Task;\n}\n/**\n * \n * @export\n * @interface CreateUserBody\n */\nexport interface CreateUserBody {\n    /**\n     * Tags for the [User](#schema_user)\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateUserBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * [DEPRECATED] To create a user from within a bot, call an action of the integration instead.\n     * @type {string}\n     * @memberof CreateUserBody\n     * @deprecated\n     */\n    'integrationName'?: string;\n    /**\n     * Name of the user\n     * @type {string}\n     * @memberof CreateUserBody\n     */\n    'name'?: string;\n    /**\n     * URI of the user picture\n     * @type {string}\n     * @memberof CreateUserBody\n     */\n    'pictureUrl'?: string;\n}\n/**\n * \n * @export\n * @interface CreateUserResponse\n */\nexport interface CreateUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof CreateUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface CreateWorkspaceBody\n */\nexport interface CreateWorkspaceBody {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceBody\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface CreateWorkspaceMemberBody\n */\nexport interface CreateWorkspaceMemberBody {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberBody\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberBody\n     */\n    'role': CreateWorkspaceMemberBodyRoleEnum;\n}\n\nexport const CreateWorkspaceMemberBodyRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type CreateWorkspaceMemberBodyRoleEnum = typeof CreateWorkspaceMemberBodyRoleEnum[keyof typeof CreateWorkspaceMemberBodyRoleEnum];\n\n/**\n * \n * @export\n * @interface CreateWorkspaceMemberResponse\n */\nexport interface CreateWorkspaceMemberResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'userId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'role': CreateWorkspaceMemberResponseRoleEnum;\n}\n\nexport const CreateWorkspaceMemberResponseRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type CreateWorkspaceMemberResponseRoleEnum = typeof CreateWorkspaceMemberResponseRoleEnum[keyof typeof CreateWorkspaceMemberResponseRoleEnum];\n\n/**\n * \n * @export\n * @interface CreateWorkspaceResponse\n */\nexport interface CreateWorkspaceResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateWorkspaceResponse\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'accountType': CreateWorkspaceResponseAccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'billingVersion': CreateWorkspaceResponseBillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'plan': CreateWorkspaceResponsePlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateWorkspaceResponse\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateWorkspaceResponse\n     */\n    'spendingLimit': number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'about'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'profilePicture'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'contactEmail'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'website'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateWorkspaceResponse\n     */\n    'socialAccounts'?: Array<string>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateWorkspaceResponse\n     */\n    'isPublic'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'handle'?: string;\n}\n\nexport const CreateWorkspaceResponseAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type CreateWorkspaceResponseAccountTypeEnum = typeof CreateWorkspaceResponseAccountTypeEnum[keyof typeof CreateWorkspaceResponseAccountTypeEnum];\nexport const CreateWorkspaceResponseBillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type CreateWorkspaceResponseBillingVersionEnum = typeof CreateWorkspaceResponseBillingVersionEnum[keyof typeof CreateWorkspaceResponseBillingVersionEnum];\nexport const CreateWorkspaceResponsePlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type CreateWorkspaceResponsePlanEnum = typeof CreateWorkspaceResponsePlanEnum[keyof typeof CreateWorkspaceResponsePlanEnum];\n\n/**\n * \n * @export\n * @interface DeleteTableRowsBody\n */\nexport interface DeleteTableRowsBody {\n    /**\n     * \n     * @type {Array<number>}\n     * @memberof DeleteTableRowsBody\n     */\n    'ids'?: Array<number>;\n    /**\n     * Filter to apply when deleting rows. Example: \\\\{ \\\"name\\\": \\\\{ \\\"$eq\\\": \\\"John\\\" \\\\} \\\\}\n     * @type {{ [key: string]: any; }}\n     * @memberof DeleteTableRowsBody\n     */\n    'filter'?: { [key: string]: any; };\n    /**\n     * Flag to delete all rows. Use with caution as this action is irreversible.\n     * @type {boolean}\n     * @memberof DeleteTableRowsBody\n     */\n    'deleteAllRows'?: boolean;\n}\n/**\n * \n * @export\n * @interface DeleteTableRowsResponse\n */\nexport interface DeleteTableRowsResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof DeleteTableRowsResponse\n     */\n    'deletedRows': number;\n}\n/**\n * \n * @export\n * @interface DuplicateTableBody\n */\nexport interface DuplicateTableBody {\n    /**\n     * \n     * @type {string}\n     * @memberof DuplicateTableBody\n     */\n    'tableName'?: string;\n    /**\n     * Only duplicate the schema, not the content\n     * @type {boolean}\n     * @memberof DuplicateTableBody\n     */\n    'schemaOnly'?: boolean;\n    /**\n     * Use a different factor for the table. Leave empty to use the same as the duplicated table.\n     * @type {number}\n     * @memberof DuplicateTableBody\n     */\n    'factor'?: number;\n}\n/**\n * \n * @export\n * @interface DuplicateTableResponse\n */\nexport interface DuplicateTableResponse {\n    /**\n     * \n     * @type {Table}\n     * @memberof DuplicateTableResponse\n     */\n    'table': Table;\n    /**\n     * The total number of rows present in the table.\n     * @type {number}\n     * @memberof DuplicateTableResponse\n     */\n    'rows': number;\n}\n/**\n * The event object represents an action or an occurrence.\n * @export\n * @interface Event\n */\nexport interface Event {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Event\n     */\n    'id': string;\n    /**\n     * Creation date of the [Event](#schema_event) in ISO 8601 format\n     * @type {string}\n     * @memberof Event\n     */\n    'createdAt': string;\n    /**\n     * Type of the task\n     * @type {string}\n     * @memberof Event\n     */\n    'type': string;\n    /**\n     * Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our api.\n     * @type {{ [key: string]: any; }}\n     * @memberof Event\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * ID of the [Conversation](#schema_conversation) to link the event to.\n     * @type {string}\n     * @memberof Event\n     */\n    'conversationId'?: string;\n    /**\n     * ID of the [User](#schema_user) to link the event to.\n     * @type {string}\n     * @memberof Event\n     */\n    'userId'?: string;\n    /**\n     * ID of the [Message](#schema_message) to link the event to.\n     * @type {string}\n     * @memberof Event\n     */\n    'messageId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Event\n     */\n    'status': EventStatusEnum;\n    /**\n     * Reason why the event failed to be processed\n     * @type {string}\n     * @memberof Event\n     */\n    'failureReason': string | null;\n}\n\nexport const EventStatusEnum = {\n    Pending: 'pending',\n    Processed: 'processed',\n    Ignored: 'ignored',\n    Failed: 'failed'\n} as const;\n\nexport type EventStatusEnum = typeof EventStatusEnum[keyof typeof EventStatusEnum];\n\n/**\n * \n * @export\n * @interface FindTableRowsBody\n */\nexport interface FindTableRowsBody {\n    /**\n     * Limit for pagination, specifying the maximum number of rows to return.\n     * @type {number}\n     * @memberof FindTableRowsBody\n     */\n    'limit'?: number;\n    /**\n     * Offset for pagination, specifying where to start returning rows from.\n     * @type {number}\n     * @memberof FindTableRowsBody\n     */\n    'offset'?: number;\n    /**\n     * Provide a mongodb-like filter to apply to the query. Example: \\\\{ \\\"name\\\": \\\\{ \\\"$eq\\\": \\\"John\\\" \\\\} \\\\}\n     * @type {{ [key: string]: any; }}\n     * @memberof FindTableRowsBody\n     */\n    'filter'?: { [key: string]: any; };\n    /**\n     * Group the rows by a specific column and apply aggregations to them. Allowed values: key, avg, max, min, sum, count. Example: \\\\{ \\\"someId\\\": \\\"key\\\", \\\"orders\\\": [\\\"sum\\\", \\\"avg\\\"] \\\\}\n     * @type {{ [key: string]: any; }}\n     * @memberof FindTableRowsBody\n     */\n    'group'?: { [key: string]: any; };\n    /**\n     * Search term to apply to the row search. When using this parameter, some rows which doesn\\'t match the search term will be returned, use the similarity field to know how much the row matches the search term. \n     * @type {string}\n     * @memberof FindTableRowsBody\n     */\n    'search'?: string;\n    /**\n     * Specifies the column by which to order the results. By default it is ordered by id. Build-in columns: id, createdAt, updatedAt\n     * @type {string}\n     * @memberof FindTableRowsBody\n     */\n    'orderBy'?: string;\n    /**\n     * Specifies the direction of sorting, either ascending or descending.\n     * @type {string}\n     * @memberof FindTableRowsBody\n     */\n    'orderDirection'?: FindTableRowsBodyOrderDirectionEnum;\n}\n\nexport const FindTableRowsBodyOrderDirectionEnum = {\n    Asc: 'asc',\n    Desc: 'desc'\n} as const;\n\nexport type FindTableRowsBodyOrderDirectionEnum = typeof FindTableRowsBodyOrderDirectionEnum[keyof typeof FindTableRowsBodyOrderDirectionEnum];\n\n/**\n * \n * @export\n * @interface FindTableRowsResponse\n */\nexport interface FindTableRowsResponse {\n    /**\n     * \n     * @type {Array<Row>}\n     * @memberof FindTableRowsResponse\n     */\n    'rows': Array<Row>;\n    /**\n     * The total number of rows matching the search criteria, regardless of pagination.\n     * @type {number}\n     * @memberof FindTableRowsResponse\n     */\n    'count': number;\n    /**\n     * \n     * @type {number}\n     * @memberof FindTableRowsResponse\n     */\n    'offset': number;\n    /**\n     * \n     * @type {number}\n     * @memberof FindTableRowsResponse\n     */\n    'limit': number;\n}\n/**\n * \n * @export\n * @interface GetAccountPreferenceResponse\n */\nexport interface GetAccountPreferenceResponse {\n    /**\n     * \n     * @type {any}\n     * @memberof GetAccountPreferenceResponse\n     */\n    'value'?: any | null;\n}\n/**\n * \n * @export\n * @interface GetAccountResponse\n */\nexport interface GetAccountResponse {\n    /**\n     * \n     * @type {GetAccountResponseAccount}\n     * @memberof GetAccountResponse\n     */\n    'account': GetAccountResponseAccount;\n}\n/**\n * \n * @export\n * @interface GetAccountResponseAccount\n */\nexport interface GetAccountResponseAccount {\n    /**\n     * \n     * @type {string}\n     * @memberof GetAccountResponseAccount\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAccountResponseAccount\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAccountResponseAccount\n     */\n    'displayName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAccountResponseAccount\n     */\n    'profilePicture'?: string;\n    /**\n     * Creation date of the [Account](#schema_account) in ISO 8601 format\n     * @type {string}\n     * @memberof GetAccountResponseAccount\n     */\n    'createdAt': string;\n}\n/**\n * \n * @export\n * @interface GetAllWorkspaceQuotaCompletionResponse\n */\nexport interface GetAllWorkspaceQuotaCompletionResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GetAllWorkspaceQuotaCompletionResponse\n     */\n    'type': GetAllWorkspaceQuotaCompletionResponseTypeEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof GetAllWorkspaceQuotaCompletionResponse\n     */\n    'completion': number;\n}\n\nexport const GetAllWorkspaceQuotaCompletionResponseTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\n\nexport type GetAllWorkspaceQuotaCompletionResponseTypeEnum = typeof GetAllWorkspaceQuotaCompletionResponseTypeEnum[keyof typeof GetAllWorkspaceQuotaCompletionResponseTypeEnum];\n\n/**\n * \n * @export\n * @interface GetAuditRecordsResponse\n */\nexport interface GetAuditRecordsResponse {\n    /**\n     * \n     * @type {Array<GetAuditRecordsResponseRecordsInner>}\n     * @memberof GetAuditRecordsResponse\n     */\n    'records': Array<GetAuditRecordsResponseRecordsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof GetAuditRecordsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface GetAuditRecordsResponseRecordsInner\n */\nexport interface GetAuditRecordsResponseRecordsInner {\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'recordedAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'userId': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'userEmail'?: string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'resourceId': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'resourceName'?: string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'value'?: string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'action': GetAuditRecordsResponseRecordsInnerActionEnum;\n}\n\nexport const GetAuditRecordsResponseRecordsInnerActionEnum = {\n    Unknown: 'UNKNOWN',\n    AddWorkspaceMember: 'ADD_WORKSPACE_MEMBER',\n    RemoveWorkspaceMember: 'REMOVE_WORKSPACE_MEMBER',\n    UpdateWorkspaceMember: 'UPDATE_WORKSPACE_MEMBER',\n    CloseWorkspace: 'CLOSE_WORKSPACE',\n    CreateBot: 'CREATE_BOT',\n    CreateWorkspace: 'CREATE_WORKSPACE',\n    DeleteBot: 'DELETE_BOT',\n    DeployBot: 'DEPLOY_BOT',\n    TransferBot: 'TRANSFER_BOT',\n    DowngradeWorkspacePlan: 'DOWNGRADE_WORKSPACE_PLAN',\n    DownloadBotArchive: 'DOWNLOAD_BOT_ARCHIVE',\n    UpdateBot: 'UPDATE_BOT',\n    UpdateBotChannel: 'UPDATE_BOT_CHANNEL',\n    UpdateBotConfig: 'UPDATE_BOT_CONFIG',\n    UpdatePaymentMethod: 'UPDATE_PAYMENT_METHOD',\n    UpdateWorkspace: 'UPDATE_WORKSPACE',\n    UpgradeWorkspacePlan: 'UPGRADE_WORKSPACE_PLAN',\n    SetSpendingLimit: 'SET_SPENDING_LIMIT',\n    SetAiSpendingLimit: 'SET_AI_SPENDING_LIMIT'\n} as const;\n\nexport type GetAuditRecordsResponseRecordsInnerActionEnum = typeof GetAuditRecordsResponseRecordsInnerActionEnum[keyof typeof GetAuditRecordsResponseRecordsInnerActionEnum];\n\n/**\n * \n * @export\n * @interface GetBotAnalyticsResponse\n */\nexport interface GetBotAnalyticsResponse {\n    /**\n     * \n     * @type {Array<GetBotAnalyticsResponseRecordsInner>}\n     * @memberof GetBotAnalyticsResponse\n     */\n    'records': Array<GetBotAnalyticsResponseRecordsInner>;\n}\n/**\n * \n * @export\n * @interface GetBotAnalyticsResponseRecordsInner\n */\nexport interface GetBotAnalyticsResponseRecordsInner {\n    /**\n     * ISO 8601 date string of the beginning (inclusive) of the period\n     * @type {string}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'startDateTimeUtc': string;\n    /**\n     * ISO 8601 date string of the end (exclusive) of the period\n     * @type {string}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'endDateTimeUtc': string;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'returningUsers': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'newUsers': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'sessions': number;\n    /**\n     * Deprecated. Use `userMessages` instead.\n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'messages': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'userMessages': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'botMessages': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'events': number;\n    /**\n     * \n     * @type {{ [key: string]: number; }}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'eventTypes': { [key: string]: number; };\n}\n/**\n * \n * @export\n * @interface GetBotLogsResponse\n */\nexport interface GetBotLogsResponse {\n    /**\n     * \n     * @type {Array<GetBotLogsResponseLogsInner>}\n     * @memberof GetBotLogsResponse\n     */\n    'logs': Array<GetBotLogsResponseLogsInner>;\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotLogsResponse\n     */\n    'nextToken'?: string;\n}\n/**\n * \n * @export\n * @interface GetBotLogsResponseLogsInner\n */\nexport interface GetBotLogsResponseLogsInner {\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotLogsResponseLogsInner\n     */\n    'timestamp': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotLogsResponseLogsInner\n     */\n    'level': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotLogsResponseLogsInner\n     */\n    'message': string;\n}\n/**\n * \n * @export\n * @interface GetBotResponse\n */\nexport interface GetBotResponse {\n    /**\n     * \n     * @type {Bot}\n     * @memberof GetBotResponse\n     */\n    'bot': Bot;\n}\n/**\n * \n * @export\n * @interface GetBotWebchatResponse\n */\nexport interface GetBotWebchatResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotWebchatResponse\n     */\n    'code': string;\n}\n/**\n * \n * @export\n * @interface GetConversationResponse\n */\nexport interface GetConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof GetConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface GetEventResponse\n */\nexport interface GetEventResponse {\n    /**\n     * \n     * @type {Event}\n     * @memberof GetEventResponse\n     */\n    'event': Event;\n}\n/**\n * \n * @export\n * @interface GetFileContentResponse\n */\nexport interface GetFileContentResponse {\n    /**\n     * Temporary pre-signed URL to download the file, should be used shortly after retrieving and should not be stored long-term as the URL will expire after a short timeframe.\n     * @type {string}\n     * @memberof GetFileContentResponse\n     */\n    'url': string;\n}\n/**\n * \n * @export\n * @interface GetFileMetadataResponse\n */\nexport interface GetFileMetadataResponse {\n    /**\n     * \n     * @type {CreateFileResponseFile}\n     * @memberof GetFileMetadataResponse\n     */\n    'file': CreateFileResponseFile;\n}\n/**\n * \n * @export\n * @interface GetIntegrationByNameResponse\n */\nexport interface GetIntegrationByNameResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof GetIntegrationByNameResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface GetIntegrationLogsResponse\n */\nexport interface GetIntegrationLogsResponse {\n    /**\n     * \n     * @type {Array<GetBotLogsResponseLogsInner>}\n     * @memberof GetIntegrationLogsResponse\n     */\n    'logs': Array<GetBotLogsResponseLogsInner>;\n    /**\n     * \n     * @type {string}\n     * @memberof GetIntegrationLogsResponse\n     */\n    'nextToken'?: string;\n}\n/**\n * \n * @export\n * @interface GetIntegrationResponse\n */\nexport interface GetIntegrationResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof GetIntegrationResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface GetMessageResponse\n */\nexport interface GetMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof GetMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface GetOrCreateConversationBody\n */\nexport interface GetOrCreateConversationBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof GetOrCreateConversationBody\n     */\n    'channel': string;\n    /**\n     * Tags for the [Conversation](#schema_conversation)\n     * @type {{ [key: string]: string; }}\n     * @memberof GetOrCreateConversationBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * [DEPRECATED] To create a conversation from within a bot, call an action of the integration instead.\n     * @type {string}\n     * @memberof GetOrCreateConversationBody\n     * @deprecated\n     */\n    'integrationName'?: string;\n}\n/**\n * \n * @export\n * @interface GetOrCreateConversationResponse\n */\nexport interface GetOrCreateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof GetOrCreateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface GetOrCreateMessageBody\n */\nexport interface GetOrCreateMessageBody {\n    /**\n     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location\n     * @type {{ [key: string]: any; }}\n     * @memberof GetOrCreateMessageBody\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * User id\n     * @type {string}\n     * @memberof GetOrCreateMessageBody\n     */\n    'userId': string;\n    /**\n     * User id\n     * @type {string}\n     * @memberof GetOrCreateMessageBody\n     */\n    'conversationId': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof GetOrCreateMessageBody\n     */\n    'type': string;\n    /**\n     * Set of [Tags](#tags) that you can attach to a [Message](#schema_message). The set of [Tags](#tags) available on a [Message](#schema_message) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof GetOrCreateMessageBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * \n     * @type {CreateMessageBodySchedule}\n     * @memberof GetOrCreateMessageBody\n     */\n    'schedule'?: CreateMessageBodySchedule;\n}\n/**\n * \n * @export\n * @interface GetOrCreateMessageResponse\n */\nexport interface GetOrCreateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof GetOrCreateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface GetOrCreateTableBody\n */\nexport interface GetOrCreateTableBody {\n    /**\n     * The \\'factor\\' multiplies the row\\'s data storage limit by 4KB and its quota count, but can only be set at table creation and not modified later. For instance, a factor of 2 increases storage to 8KB but counts as 2 rows in your quota. The default factor is 1.\n     * @type {number}\n     * @memberof GetOrCreateTableBody\n     */\n    'factor'?: number;\n    /**\n     * A table designated as \\\"frozen\\\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations.\n     * @type {boolean}\n     * @memberof GetOrCreateTableBody\n     */\n    'frozen'?: boolean;\n    /**\n     * Provide an object or a JSON schema to define the columns of the table. A maximum of 20 keys in the object/schema is allowed.\n     * @type {{ [key: string]: any; }}\n     * @memberof GetOrCreateTableBody\n     */\n    'schema': { [key: string]: any; };\n    /**\n     * Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs.\n     * @type {{ [key: string]: string; }}\n     * @memberof GetOrCreateTableBody\n     */\n    'tags'?: { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface GetOrCreateTableResponse\n */\nexport interface GetOrCreateTableResponse {\n    /**\n     * \n     * @type {Table}\n     * @memberof GetOrCreateTableResponse\n     */\n    'table': Table;\n    /**\n     * Flag indicating if the table was newly created.\n     * @type {boolean}\n     * @memberof GetOrCreateTableResponse\n     */\n    'created': boolean;\n    /**\n     * The total number of rows present in the table.\n     * @type {number}\n     * @memberof GetOrCreateTableResponse\n     */\n    'rows': number;\n    /**\n     * The number of rows pending indexing, relevant for search functionalities.\n     * @type {number}\n     * @memberof GetOrCreateTableResponse\n     */\n    'indexingCount': number;\n}\n/**\n * \n * @export\n * @interface GetOrCreateUserBody\n */\nexport interface GetOrCreateUserBody {\n    /**\n     * Tags for the [User](#schema_user)\n     * @type {{ [key: string]: string; }}\n     * @memberof GetOrCreateUserBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * [DEPRECATED] To create a user from within a bot, call an action of the integration instead.\n     * @type {string}\n     * @memberof GetOrCreateUserBody\n     * @deprecated\n     */\n    'integrationName'?: string;\n    /**\n     * Name of the user\n     * @type {string}\n     * @memberof GetOrCreateUserBody\n     */\n    'name'?: string;\n    /**\n     * URI of the user picture\n     * @type {string}\n     * @memberof GetOrCreateUserBody\n     */\n    'pictureUrl'?: string;\n}\n/**\n * \n * @export\n * @interface GetOrCreateUserResponse\n */\nexport interface GetOrCreateUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof GetOrCreateUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface GetOrSetStateBody\n */\nexport interface GetOrSetStateBody {\n    /**\n     * Payload is the content of the state defined by your bot.\n     * @type {{ [key: string]: any; }}\n     * @memberof GetOrSetStateBody\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\\'t expire.\n     * @type {number}\n     * @memberof GetOrSetStateBody\n     */\n    'expiry'?: number;\n}\n/**\n * \n * @export\n * @interface GetOrSetStateResponse\n */\nexport interface GetOrSetStateResponse {\n    /**\n     * \n     * @type {State}\n     * @memberof GetOrSetStateResponse\n     */\n    'state': State;\n}\n/**\n * \n * @export\n * @interface GetParticipantResponse\n */\nexport interface GetParticipantResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof GetParticipantResponse\n     */\n    'participant': User;\n}\n/**\n * \n * @export\n * @interface GetPublicIntegrationByIdResponse\n */\nexport interface GetPublicIntegrationByIdResponse {\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegration}\n     * @memberof GetPublicIntegrationByIdResponse\n     */\n    'integration': GetPublicIntegrationByIdResponseIntegration;\n}\n/**\n * \n * @export\n * @interface GetPublicIntegrationByIdResponseIntegration\n */\nexport interface GetPublicIntegrationByIdResponseIntegration {\n    /**\n     * User id\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'id': string;\n    /**\n     * Creation date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationIdentifier}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'identifier': GetPublicIntegrationByIdResponseIntegrationIdentifier;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'name': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'version': string;\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationConfiguration}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'configuration': GetPublicIntegrationByIdResponseIntegrationConfiguration;\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValue; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'channels': { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValue; };\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'states': { [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue; };\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'events': { [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'actions': { [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; };\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationUser}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'user': GetPublicIntegrationByIdResponseIntegrationUser;\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'entities': { [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue; };\n    /**\n     * Indicates if the integration is a development integration; Dev integrations run locally\n     * @type {boolean}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'dev': boolean;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'title': string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'description': string;\n    /**\n     * URL of the icon of the integration. This is the icon that will be displayed in the UI\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'iconUrl': string;\n    /**\n     * URL of the readme of the integration. This is the readme that will be displayed in the UI\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'readmeUrl': string;\n    /**\n     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.\n     * @type {boolean}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'public': boolean;\n    /**\n     * Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing.\n     * @type {Array<string>}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'secrets': Array<string>;\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace}\n     * @memberof GetPublicIntegrationByIdResponseIntegration\n     */\n    'ownerWorkspace': GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace;\n}\n/**\n * Action definition\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationActionsValue\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationActionsValue {\n    /**\n     * Title of the action\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationActionsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the action\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationActionsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationActionsValueInput}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationActionsValue\n     */\n    'input': GetPublicIntegrationByIdResponseIntegrationActionsValueInput;\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationActionsValueInput}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationActionsValue\n     */\n    'output': GetPublicIntegrationByIdResponseIntegrationActionsValueInput;\n}\n/**\n * \n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationActionsValueInput\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationActionsValueInput {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationActionsValueInput\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * Channel definition\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValue\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationChannelsValue {\n    /**\n     * Title of the channel\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the channel\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValue\n     */\n    'messages': { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue; };\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValue\n     */\n    'conversation': GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation;\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValue\n     */\n    'message': GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage;\n}\n/**\n * Conversation object configuration\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation {\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation\n     */\n    'tags': { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; };\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation\n     */\n    'creation': GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation;\n}\n/**\n * The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation {\n    /**\n     * Enable conversation creation\n     * @type {boolean}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation\n     */\n    'enabled': boolean;\n    /**\n     * The list of tags that are required to be specified when calling the API directly to create a conversation.\n     * @type {Array<string>}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation\n     */\n    'requiredTags': Array<string>;\n}\n/**\n * Definition of a tag that can be provided on the object\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue {\n    /**\n     * Title of the tag\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the tag\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue\n     */\n    'description'?: string;\n}\n/**\n * Message object configuration\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage {\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage\n     */\n    'tags': { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; };\n}\n/**\n * Message definition\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * Configuration definition\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationConfiguration\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationConfiguration {\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationConfiguration\n     */\n    'identifier': GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier;\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationConfiguration\n     */\n    'schema'?: { [key: string]: any; };\n}\n/**\n * Identifier configuration of the [Integration](#schema_integration)\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier {\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier\n     */\n    'linkTemplateScript'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier\n     */\n    'required': boolean;\n}\n/**\n * Entity definition\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationEntitiesValue\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationEntitiesValue {\n    /**\n     * Title of the entity\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationEntitiesValue\n     */\n    'title'?: string;\n    /**\n     * Description of the entity\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationEntitiesValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationEntitiesValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * Event Definition\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationEventsValue\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationEventsValue {\n    /**\n     * Title of the event\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationEventsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the event\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationEventsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationEventsValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * Global identifier configuration of the [Integration](#schema_integration)\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationIdentifier\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationIdentifier {\n    /**\n     * VRL Script of the [Integration](#schema_integration) to handle incoming requests for a request that doesn\\'t have an identifier\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationIdentifier\n     */\n    'fallbackHandlerScript'?: string;\n    /**\n     * VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook often use for OAuth\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationIdentifier\n     */\n    'extractScript'?: string;\n}\n/**\n * \n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace {\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace\n     */\n    'handle': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace\n     */\n    'name': string;\n}\n/**\n * State definition\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationStatesValue\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user` or `integration`)\n     * @type {string}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationStatesValue\n     */\n    'type': GetPublicIntegrationByIdResponseIntegrationStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationStatesValue\n     */\n    'schema': { [key: string]: any; };\n}\n\nexport const GetPublicIntegrationByIdResponseIntegrationStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Integration: 'integration'\n} as const;\n\nexport type GetPublicIntegrationByIdResponseIntegrationStatesValueTypeEnum = typeof GetPublicIntegrationByIdResponseIntegrationStatesValueTypeEnum[keyof typeof GetPublicIntegrationByIdResponseIntegrationStatesValueTypeEnum];\n\n/**\n * User object configuration\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationUser\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationUser {\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationUser\n     */\n    'tags': { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; };\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationUserCreation}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationUser\n     */\n    'creation': GetPublicIntegrationByIdResponseIntegrationUserCreation;\n}\n/**\n * The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.\n * @export\n * @interface GetPublicIntegrationByIdResponseIntegrationUserCreation\n */\nexport interface GetPublicIntegrationByIdResponseIntegrationUserCreation {\n    /**\n     * Enable user creation\n     * @type {boolean}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationUserCreation\n     */\n    'enabled': boolean;\n    /**\n     * The list of tags that are required to be specified when calling the API directly to create a user.\n     * @type {Array<string>}\n     * @memberof GetPublicIntegrationByIdResponseIntegrationUserCreation\n     */\n    'requiredTags': Array<string>;\n}\n/**\n * \n * @export\n * @interface GetPublicIntegrationResponse\n */\nexport interface GetPublicIntegrationResponse {\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegration}\n     * @memberof GetPublicIntegrationResponse\n     */\n    'integration': GetPublicIntegrationByIdResponseIntegration;\n}\n/**\n * \n * @export\n * @interface GetPublicWorkspaceResponse\n */\nexport interface GetPublicWorkspaceResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicWorkspaceResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicWorkspaceResponse\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicWorkspaceResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicWorkspaceResponse\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicWorkspaceResponse\n     */\n    'about'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicWorkspaceResponse\n     */\n    'profilePicture'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicWorkspaceResponse\n     */\n    'contactEmail'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicWorkspaceResponse\n     */\n    'website'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GetPublicWorkspaceResponse\n     */\n    'socialAccounts'?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPublicWorkspaceResponse\n     */\n    'handle'?: string;\n}\n/**\n * \n * @export\n * @interface GetStateResponse\n */\nexport interface GetStateResponse {\n    /**\n     * \n     * @type {State}\n     * @memberof GetStateResponse\n     */\n    'state': State;\n}\n/**\n * \n * @export\n * @interface GetTableResponse\n */\nexport interface GetTableResponse {\n    /**\n     * \n     * @type {Table}\n     * @memberof GetTableResponse\n     */\n    'table': Table;\n    /**\n     * The total number of rows present in the table.\n     * @type {number}\n     * @memberof GetTableResponse\n     */\n    'rows': number;\n    /**\n     * The number of rows pending indexing, relevant for search functionalities.\n     * @type {number}\n     * @memberof GetTableResponse\n     */\n    'indexingCount': number;\n}\n/**\n * \n * @export\n * @interface GetTableRowResponse\n */\nexport interface GetTableRowResponse {\n    /**\n     * \n     * @type {Row}\n     * @memberof GetTableRowResponse\n     */\n    'row': Row;\n}\n/**\n * \n * @export\n * @interface GetTaskResponse\n */\nexport interface GetTaskResponse {\n    /**\n     * \n     * @type {Task}\n     * @memberof GetTaskResponse\n     */\n    'task': Task;\n}\n/**\n * \n * @export\n * @interface GetUpcomingInvoiceResponse\n */\nexport interface GetUpcomingInvoiceResponse {\n    /**\n     * ID of the invoice.\n     * @type {string}\n     * @memberof GetUpcomingInvoiceResponse\n     */\n    'id': string;\n    /**\n     * Total amount to pay of the invoice.\n     * @type {number}\n     * @memberof GetUpcomingInvoiceResponse\n     */\n    'total': number;\n}\n/**\n * \n * @export\n * @interface GetUsageResponse\n */\nexport interface GetUsageResponse {\n    /**\n     * \n     * @type {Usage}\n     * @memberof GetUsageResponse\n     */\n    'usage': Usage;\n}\n/**\n * \n * @export\n * @interface GetUserResponse\n */\nexport interface GetUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof GetUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface GetWorkspaceQuotaResponse\n */\nexport interface GetWorkspaceQuotaResponse {\n    /**\n     * \n     * @type {GetWorkspaceQuotaResponseQuota}\n     * @memberof GetWorkspaceQuotaResponse\n     */\n    'quota': GetWorkspaceQuotaResponseQuota;\n}\n/**\n * \n * @export\n * @interface GetWorkspaceQuotaResponseQuota\n */\nexport interface GetWorkspaceQuotaResponseQuota {\n    /**\n     * Period of the quota that it is applied to\n     * @type {string}\n     * @memberof GetWorkspaceQuotaResponseQuota\n     */\n    'period': string;\n    /**\n     * Value of the quota that is used\n     * @type {number}\n     * @memberof GetWorkspaceQuotaResponseQuota\n     */\n    'value': number;\n    /**\n     * Usage type that can be used\n     * @type {string}\n     * @memberof GetWorkspaceQuotaResponseQuota\n     */\n    'type': GetWorkspaceQuotaResponseQuotaTypeEnum;\n}\n\nexport const GetWorkspaceQuotaResponseQuotaTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\n\nexport type GetWorkspaceQuotaResponseQuotaTypeEnum = typeof GetWorkspaceQuotaResponseQuotaTypeEnum[keyof typeof GetWorkspaceQuotaResponseQuotaTypeEnum];\n\n/**\n * \n * @export\n * @interface GetWorkspaceResponse\n */\nexport interface GetWorkspaceResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof GetWorkspaceResponse\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'accountType': GetWorkspaceResponseAccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'billingVersion': GetWorkspaceResponseBillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'plan': GetWorkspaceResponsePlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof GetWorkspaceResponse\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof GetWorkspaceResponse\n     */\n    'spendingLimit': number;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'about'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'profilePicture'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'contactEmail'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'website'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GetWorkspaceResponse\n     */\n    'socialAccounts'?: Array<string>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof GetWorkspaceResponse\n     */\n    'isPublic'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'handle'?: string;\n}\n\nexport const GetWorkspaceResponseAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type GetWorkspaceResponseAccountTypeEnum = typeof GetWorkspaceResponseAccountTypeEnum[keyof typeof GetWorkspaceResponseAccountTypeEnum];\nexport const GetWorkspaceResponseBillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type GetWorkspaceResponseBillingVersionEnum = typeof GetWorkspaceResponseBillingVersionEnum[keyof typeof GetWorkspaceResponseBillingVersionEnum];\nexport const GetWorkspaceResponsePlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type GetWorkspaceResponsePlanEnum = typeof GetWorkspaceResponsePlanEnum[keyof typeof GetWorkspaceResponsePlanEnum];\n\n/**\n * \n * @export\n * @interface Integration\n */\nexport interface Integration {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Integration\n     */\n    'id': string;\n    /**\n     * Creation date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof Integration\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof Integration\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationIdentifier}\n     * @memberof Integration\n     */\n    'identifier': GetPublicIntegrationByIdResponseIntegrationIdentifier;\n    /**\n     * Type of the task\n     * @type {string}\n     * @memberof Integration\n     */\n    'name': string;\n    /**\n     * Type of the task\n     * @type {string}\n     * @memberof Integration\n     */\n    'version': string;\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationConfiguration}\n     * @memberof Integration\n     */\n    'configuration': GetPublicIntegrationByIdResponseIntegrationConfiguration;\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValue; }}\n     * @memberof Integration\n     */\n    'channels': { [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValue; };\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue; }}\n     * @memberof Integration\n     */\n    'states': { [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue; };\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; }}\n     * @memberof Integration\n     */\n    'events': { [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; }}\n     * @memberof Integration\n     */\n    'actions': { [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; };\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationUser}\n     * @memberof Integration\n     */\n    'user': GetPublicIntegrationByIdResponseIntegrationUser;\n    /**\n     * \n     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue; }}\n     * @memberof Integration\n     */\n    'entities': { [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue; };\n    /**\n     * Indicates if the integration is a development integration; Dev integrations run locally\n     * @type {boolean}\n     * @memberof Integration\n     */\n    'dev': boolean;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'title': string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'description': string;\n    /**\n     * URL of the icon of the integration. This is the icon that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'iconUrl': string;\n    /**\n     * URL of the readme of the integration. This is the readme that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'readmeUrl': string;\n    /**\n     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.\n     * @type {boolean}\n     * @memberof Integration\n     */\n    'public': boolean;\n    /**\n     * Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing.\n     * @type {Array<string>}\n     * @memberof Integration\n     */\n    'secrets': Array<string>;\n}\n/**\n * \n * @export\n * @interface IntrospectBody\n */\nexport interface IntrospectBody {\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectBody\n     */\n    'botId': string;\n}\n/**\n * \n * @export\n * @interface IntrospectResponse\n */\nexport interface IntrospectResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectResponse\n     */\n    'workspaceId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectResponse\n     */\n    'botId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectResponse\n     */\n    'userId': string;\n}\n/**\n * \n * @export\n * @interface Issue\n */\nexport interface Issue {\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'code': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'lastSeenAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'title': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'description': string;\n    /**\n     * \n     * @type {{ [key: string]: IssueGroupedDataValue; }}\n     * @memberof Issue\n     */\n    'groupedData': { [key: string]: IssueGroupedDataValue; };\n    /**\n     * \n     * @type {number}\n     * @memberof Issue\n     */\n    'eventsCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'category': IssueCategoryEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'resolutionLink': string | null;\n}\n\nexport const IssueCategoryEnum = {\n    UserCode: 'user_code',\n    Limits: 'limits',\n    Configuration: 'configuration',\n    Other: 'other'\n} as const;\n\nexport type IssueCategoryEnum = typeof IssueCategoryEnum[keyof typeof IssueCategoryEnum];\n\n/**\n * \n * @export\n * @interface IssueEvent\n */\nexport interface IssueEvent {\n    /**\n     * \n     * @type {string}\n     * @memberof IssueEvent\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IssueEvent\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {{ [key: string]: IssueGroupedDataValue; }}\n     * @memberof IssueEvent\n     */\n    'data': { [key: string]: IssueGroupedDataValue; };\n}\n/**\n * \n * @export\n * @interface IssueGroupedDataValue\n */\nexport interface IssueGroupedDataValue {\n    /**\n     * \n     * @type {string}\n     * @memberof IssueGroupedDataValue\n     */\n    'raw': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IssueGroupedDataValue\n     */\n    'pretty'?: string;\n}\n/**\n * \n * @export\n * @interface ListActivitiesResponse\n */\nexport interface ListActivitiesResponse {\n    /**\n     * \n     * @type {Array<Activity>}\n     * @memberof ListActivitiesResponse\n     */\n    'activities': Array<Activity>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListActivitiesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListBotIssueEventsResponse\n */\nexport interface ListBotIssueEventsResponse {\n    /**\n     * \n     * @type {Array<ListBotIssueEventsResponseIssueEventsInner>}\n     * @memberof ListBotIssueEventsResponse\n     */\n    'issueEvents': Array<ListBotIssueEventsResponseIssueEventsInner>;\n}\n/**\n * \n * @export\n * @interface ListBotIssueEventsResponseIssueEventsInner\n */\nexport interface ListBotIssueEventsResponseIssueEventsInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssueEventsResponseIssueEventsInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssueEventsResponseIssueEventsInner\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {{ [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; }}\n     * @memberof ListBotIssueEventsResponseIssueEventsInner\n     */\n    'data': { [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; };\n}\n/**\n * \n * @export\n * @interface ListBotIssuesResponse\n */\nexport interface ListBotIssuesResponse {\n    /**\n     * \n     * @type {Array<ListBotIssuesResponseIssuesInner>}\n     * @memberof ListBotIssuesResponse\n     */\n    'issues': Array<ListBotIssuesResponseIssuesInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListBotIssuesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListBotIssuesResponseIssuesInner\n */\nexport interface ListBotIssuesResponseIssuesInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'code': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'lastSeenAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'title': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'description': string;\n    /**\n     * \n     * @type {{ [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; }}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'groupedData': { [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; };\n    /**\n     * \n     * @type {number}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'eventsCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'category': ListBotIssuesResponseIssuesInnerCategoryEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'resolutionLink': string | null;\n}\n\nexport const ListBotIssuesResponseIssuesInnerCategoryEnum = {\n    UserCode: 'user_code',\n    Limits: 'limits',\n    Configuration: 'configuration',\n    Other: 'other'\n} as const;\n\nexport type ListBotIssuesResponseIssuesInnerCategoryEnum = typeof ListBotIssuesResponseIssuesInnerCategoryEnum[keyof typeof ListBotIssuesResponseIssuesInnerCategoryEnum];\n\n/**\n * \n * @export\n * @interface ListBotIssuesResponseIssuesInnerGroupedDataValue\n */\nexport interface ListBotIssuesResponseIssuesInnerGroupedDataValue {\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInnerGroupedDataValue\n     */\n    'raw': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInnerGroupedDataValue\n     */\n    'pretty'?: string;\n}\n/**\n * \n * @export\n * @interface ListBotsResponse\n */\nexport interface ListBotsResponse {\n    /**\n     * \n     * @type {Array<ListBotsResponseBotsInner>}\n     * @memberof ListBotsResponse\n     */\n    'bots': Array<ListBotsResponseBotsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListBotsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListBotsResponseBotsInner\n */\nexport interface ListBotsResponseBotsInner {\n    /**\n     * User id\n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'id': string;\n    /**\n     * Creation date of the [Bot](#schema_bot) in ISO 8601 format\n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Bot](#schema_bot) in ISO 8601 format\n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'deployedAt'?: string;\n}\n/**\n * \n * @export\n * @interface ListConversationsResponse\n */\nexport interface ListConversationsResponse {\n    /**\n     * \n     * @type {Array<Conversation>}\n     * @memberof ListConversationsResponse\n     */\n    'conversations': Array<Conversation>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListConversationsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListConversationsResponseMeta\n */\nexport interface ListConversationsResponseMeta {\n    /**\n     * The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint.\n     * @type {string}\n     * @memberof ListConversationsResponseMeta\n     */\n    'nextToken'?: string;\n}\n/**\n * \n * @export\n * @interface ListEventsResponse\n */\nexport interface ListEventsResponse {\n    /**\n     * \n     * @type {Array<Event>}\n     * @memberof ListEventsResponse\n     */\n    'events': Array<Event>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListEventsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListFilesResponse\n */\nexport interface ListFilesResponse {\n    /**\n     * \n     * @type {Array<ListFilesResponseFilesInner>}\n     * @memberof ListFilesResponse\n     */\n    'files': Array<ListFilesResponseFilesInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListFilesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListFilesResponseFilesInner\n */\nexport interface ListFilesResponseFilesInner {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof ListFilesResponseFilesInner\n     */\n    'id': string;\n    /**\n     * The ID of the bot the file belongs to\n     * @type {string}\n     * @memberof ListFilesResponseFilesInner\n     */\n    'botId': string;\n    /**\n     * File name\n     * @type {string}\n     * @memberof ListFilesResponseFilesInner\n     */\n    'name': string | null;\n    /**\n     * File size in bytes\n     * @type {number}\n     * @memberof ListFilesResponseFilesInner\n     */\n    'size': number | null;\n    /**\n     * MIME type of the file\\'s content\n     * @type {string}\n     * @memberof ListFilesResponseFilesInner\n     */\n    'contentType': string;\n    /**\n     * The tags of the file as an object of key/value pairs\n     * @type {{ [key: string]: string; }}\n     * @memberof ListFilesResponseFilesInner\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * File creation timestamp in ISO 8601 format\n     * @type {string}\n     * @memberof ListFilesResponseFilesInner\n     */\n    'createdAt': string;\n    /**\n     * File last update timestamp in ISO 8601 format\n     * @type {string}\n     * @memberof ListFilesResponseFilesInner\n     */\n    'updatedAt': string;\n    /**\n     * Access policies configured for the file.\n     * @type {Array<string>}\n     * @memberof ListFilesResponseFilesInner\n     */\n    'accessPolicies': Array<string>;\n    /**\n     * Status of the file indexing process. No value will be set if indexing was not enabled for the file when it was created.\n     * @type {string}\n     * @memberof ListFilesResponseFilesInner\n     */\n    'indexingStatus'?: ListFilesResponseFilesInnerIndexingStatusEnum;\n    /**\n     * Last failure reason of the file indexing if the indexing status is \\\"FAILED\\\".\n     * @type {string}\n     * @memberof ListFilesResponseFilesInner\n     */\n    'indexingFailureReason'?: string;\n}\n\nexport const ListFilesResponseFilesInnerIndexingStatusEnum = {\n    Pending: 'PENDING',\n    InProgress: 'IN_PROGRESS',\n    Complete: 'COMPLETE',\n    Failed: 'FAILED'\n} as const;\n\nexport type ListFilesResponseFilesInnerIndexingStatusEnum = typeof ListFilesResponseFilesInnerIndexingStatusEnum[keyof typeof ListFilesResponseFilesInnerIndexingStatusEnum];\n\n/**\n * \n * @export\n * @interface ListIntegrationApiKeysResponse\n */\nexport interface ListIntegrationApiKeysResponse {\n    /**\n     * \n     * @type {Array<ListPersonalAccessTokensResponsePatsInner>}\n     * @memberof ListIntegrationApiKeysResponse\n     */\n    'iaks': Array<ListPersonalAccessTokensResponsePatsInner>;\n}\n/**\n * \n * @export\n * @interface ListIntegrationsResponse\n */\nexport interface ListIntegrationsResponse {\n    /**\n     * \n     * @type {Array<ListIntegrationsResponseIntegrationsInner>}\n     * @memberof ListIntegrationsResponse\n     */\n    'integrations': Array<ListIntegrationsResponseIntegrationsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListIntegrationsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListIntegrationsResponseIntegrationsInner\n */\nexport interface ListIntegrationsResponseIntegrationsInner {\n    /**\n     * User id\n     * @type {string}\n     * @memberof ListIntegrationsResponseIntegrationsInner\n     */\n    'id': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof ListIntegrationsResponseIntegrationsInner\n     */\n    'name': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof ListIntegrationsResponseIntegrationsInner\n     */\n    'version': string;\n    /**\n     * Creation date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof ListIntegrationsResponseIntegrationsInner\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof ListIntegrationsResponseIntegrationsInner\n     */\n    'updatedAt': string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof ListIntegrationsResponseIntegrationsInner\n     */\n    'title': string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof ListIntegrationsResponseIntegrationsInner\n     */\n    'description': string;\n    /**\n     * URL of the icon of the integration. This is the icon that will be displayed in the UI\n     * @type {string}\n     * @memberof ListIntegrationsResponseIntegrationsInner\n     */\n    'iconUrl': string;\n    /**\n     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.\n     * @type {boolean}\n     * @memberof ListIntegrationsResponseIntegrationsInner\n     */\n    'public': boolean;\n}\n/**\n * \n * @export\n * @interface ListMessagesResponse\n */\nexport interface ListMessagesResponse {\n    /**\n     * \n     * @type {Array<Message>}\n     * @memberof ListMessagesResponse\n     */\n    'messages': Array<Message>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListMessagesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListParticipantsResponse\n */\nexport interface ListParticipantsResponse {\n    /**\n     * \n     * @type {Array<User>}\n     * @memberof ListParticipantsResponse\n     */\n    'participants': Array<User>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListParticipantsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListPersonalAccessTokensResponse\n */\nexport interface ListPersonalAccessTokensResponse {\n    /**\n     * \n     * @type {Array<ListPersonalAccessTokensResponsePatsInner>}\n     * @memberof ListPersonalAccessTokensResponse\n     */\n    'pats': Array<ListPersonalAccessTokensResponsePatsInner>;\n}\n/**\n * \n * @export\n * @interface ListPersonalAccessTokensResponsePatsInner\n */\nexport interface ListPersonalAccessTokensResponsePatsInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListPersonalAccessTokensResponsePatsInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListPersonalAccessTokensResponsePatsInner\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListPersonalAccessTokensResponsePatsInner\n     */\n    'note': string;\n}\n/**\n * \n * @export\n * @interface ListPublicIntegrationsResponse\n */\nexport interface ListPublicIntegrationsResponse {\n    /**\n     * \n     * @type {Array<ListPublicIntegrationsResponseIntegrationsInner>}\n     * @memberof ListPublicIntegrationsResponse\n     */\n    'integrations': Array<ListPublicIntegrationsResponseIntegrationsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListPublicIntegrationsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListPublicIntegrationsResponseIntegrationsInner\n */\nexport interface ListPublicIntegrationsResponseIntegrationsInner {\n    /**\n     * User id\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'id': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'name': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'version': string;\n    /**\n     * Creation date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'updatedAt': string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'title': string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'description': string;\n    /**\n     * URL of the icon of the integration. This is the icon that will be displayed in the UI\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'iconUrl': string;\n    /**\n     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.\n     * @type {boolean}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'public': boolean;\n    /**\n     * \n     * @type {ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'ownerWorkspace': ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace;\n}\n/**\n * \n * @export\n * @interface ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace\n */\nexport interface ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace {\n    /**\n     * \n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace\n     */\n    'handle': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface ListTablesResponse\n */\nexport interface ListTablesResponse {\n    /**\n     * \n     * @type {Array<Table>}\n     * @memberof ListTablesResponse\n     */\n    'tables': Array<Table>;\n}\n/**\n * \n * @export\n * @interface ListTasksResponse\n */\nexport interface ListTasksResponse {\n    /**\n     * \n     * @type {Array<Task>}\n     * @memberof ListTasksResponse\n     */\n    'tasks': Array<Task>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListTasksResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListUsageHistoryResponse\n */\nexport interface ListUsageHistoryResponse {\n    /**\n     * \n     * @type {Array<Usage>}\n     * @memberof ListUsageHistoryResponse\n     */\n    'usages': Array<Usage>;\n}\n/**\n * \n * @export\n * @interface ListUsersResponse\n */\nexport interface ListUsersResponse {\n    /**\n     * \n     * @type {Array<User>}\n     * @memberof ListUsersResponse\n     */\n    'users': Array<User>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListUsersResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceInvoicesResponse\n */\nexport interface ListWorkspaceInvoicesResponse {\n    /**\n     * \n     * @type {Array<ListWorkspaceInvoicesResponseInvoicesInner>}\n     * @memberof ListWorkspaceInvoicesResponse\n     */\n    'invoices': Array<ListWorkspaceInvoicesResponseInvoicesInner>;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceInvoicesResponseInvoicesInner\n */\nexport interface ListWorkspaceInvoicesResponseInvoicesInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {ListWorkspaceInvoicesResponseInvoicesInnerPeriod}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'period': ListWorkspaceInvoicesResponseInvoicesInnerPeriod;\n    /**\n     * Date on which the invoice was generated.\n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'date': string;\n    /**\n     * Total amount to pay of the invoice.\n     * @type {number}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'amount': number;\n    /**\n     * Currency of the invoice amount.\n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'currency': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'paymentStatus': ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum;\n    /**\n     * Number of times payment has been unsuccessfully attempted on the invoice.\n     * @type {number}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'paymentAttemptCount': number | null;\n    /**\n     * Date on which the next payment attempt will be made.\n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'nextPaymentAttemptDate': string | null;\n    /**\n     * URL to download the PDF file of the invoice.\n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'pdfUrl': string;\n}\n\nexport const ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum = {\n    Paid: 'paid',\n    Unpaid: 'unpaid'\n} as const;\n\nexport type ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum = typeof ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum[keyof typeof ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum];\n\n/**\n * \n * @export\n * @interface ListWorkspaceInvoicesResponseInvoicesInnerPeriod\n */\nexport interface ListWorkspaceInvoicesResponseInvoicesInnerPeriod {\n    /**\n     * \n     * @type {number}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInnerPeriod\n     */\n    'month': number;\n    /**\n     * \n     * @type {number}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInnerPeriod\n     */\n    'year': number;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceMembersResponse\n */\nexport interface ListWorkspaceMembersResponse {\n    /**\n     * \n     * @type {Array<ListWorkspaceMembersResponseMembersInner>}\n     * @memberof ListWorkspaceMembersResponse\n     */\n    'members': Array<ListWorkspaceMembersResponseMembersInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListWorkspaceMembersResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceMembersResponseMembersInner\n */\nexport interface ListWorkspaceMembersResponseMembersInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'userId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'role': ListWorkspaceMembersResponseMembersInnerRoleEnum;\n}\n\nexport const ListWorkspaceMembersResponseMembersInnerRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type ListWorkspaceMembersResponseMembersInnerRoleEnum = typeof ListWorkspaceMembersResponseMembersInnerRoleEnum[keyof typeof ListWorkspaceMembersResponseMembersInnerRoleEnum];\n\n/**\n * \n * @export\n * @interface ListWorkspaceQuotasResponse\n */\nexport interface ListWorkspaceQuotasResponse {\n    /**\n     * \n     * @type {Array<ListWorkspaceQuotasResponseQuotasInner>}\n     * @memberof ListWorkspaceQuotasResponse\n     */\n    'quotas': Array<ListWorkspaceQuotasResponseQuotasInner>;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceQuotasResponseQuotasInner\n */\nexport interface ListWorkspaceQuotasResponseQuotasInner {\n    /**\n     * Period of the quota that it is applied to\n     * @type {string}\n     * @memberof ListWorkspaceQuotasResponseQuotasInner\n     */\n    'period': string;\n    /**\n     * Value of the quota that is used\n     * @type {number}\n     * @memberof ListWorkspaceQuotasResponseQuotasInner\n     */\n    'value': number;\n    /**\n     * Usage type that can be used\n     * @type {string}\n     * @memberof ListWorkspaceQuotasResponseQuotasInner\n     */\n    'type': ListWorkspaceQuotasResponseQuotasInnerTypeEnum;\n}\n\nexport const ListWorkspaceQuotasResponseQuotasInnerTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\n\nexport type ListWorkspaceQuotasResponseQuotasInnerTypeEnum = typeof ListWorkspaceQuotasResponseQuotasInnerTypeEnum[keyof typeof ListWorkspaceQuotasResponseQuotasInnerTypeEnum];\n\n/**\n * \n * @export\n * @interface ListWorkspaceUsagesResponse\n */\nexport interface ListWorkspaceUsagesResponse {\n    /**\n     * \n     * @type {Array<Usage>}\n     * @memberof ListWorkspaceUsagesResponse\n     */\n    'usages': Array<Usage>;\n}\n/**\n * \n * @export\n * @interface ListWorkspacesResponse\n */\nexport interface ListWorkspacesResponse {\n    /**\n     * \n     * @type {Array<UpdateWorkspaceResponse>}\n     * @memberof ListWorkspacesResponse\n     */\n    'workspaces': Array<UpdateWorkspaceResponse>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListWorkspacesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).\n * @export\n * @interface Message\n */\nexport interface Message {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Message\n     */\n    'id': string;\n    /**\n     * Creation date of the [Message](#schema_message) in ISO 8601 format\n     * @type {string}\n     * @memberof Message\n     */\n    'createdAt': string;\n    /**\n     * Type of the task\n     * @type {string}\n     * @memberof Message\n     */\n    'type': string;\n    /**\n     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location\n     * @type {{ [key: string]: any; }}\n     * @memberof Message\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * Direction of the message (`incoming` or `outgoing`).\n     * @type {string}\n     * @memberof Message\n     */\n    'direction': MessageDirectionEnum;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Message\n     */\n    'userId': string;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Message\n     */\n    'conversationId': string;\n    /**\n     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof Message\n     */\n    'tags': { [key: string]: string; };\n}\n\nexport const MessageDirectionEnum = {\n    Incoming: 'incoming',\n    Outgoing: 'outgoing'\n} as const;\n\nexport type MessageDirectionEnum = typeof MessageDirectionEnum[keyof typeof MessageDirectionEnum];\n\n/**\n * \n * @export\n * @interface ModelFile\n */\nexport interface ModelFile {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'id': string;\n    /**\n     * The ID of the bot the file belongs to\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'botId': string;\n    /**\n     * File name\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'name': string | null;\n    /**\n     * File size in bytes\n     * @type {number}\n     * @memberof ModelFile\n     */\n    'size': number | null;\n    /**\n     * MIME type of the file\\'s content\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'contentType': string;\n    /**\n     * The tags of the file as an object of key/value pairs\n     * @type {{ [key: string]: string; }}\n     * @memberof ModelFile\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * File creation timestamp in ISO 8601 format\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'createdAt': string;\n    /**\n     * File last update timestamp in ISO 8601 format\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'updatedAt': string;\n    /**\n     * Access policies configured for the file.\n     * @type {Array<string>}\n     * @memberof ModelFile\n     */\n    'accessPolicies': Array<string>;\n    /**\n     * Status of the file indexing process. No value will be set if indexing was not enabled for the file when it was created.\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'indexingStatus'?: ModelFileIndexingStatusEnum;\n    /**\n     * Last failure reason of the file indexing if the indexing status is \\\"FAILED\\\".\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'indexingFailureReason'?: string;\n}\n\nexport const ModelFileIndexingStatusEnum = {\n    Pending: 'PENDING',\n    InProgress: 'IN_PROGRESS',\n    Complete: 'COMPLETE',\n    Failed: 'FAILED'\n} as const;\n\nexport type ModelFileIndexingStatusEnum = typeof ModelFileIndexingStatusEnum[keyof typeof ModelFileIndexingStatusEnum];\n\n/**\n * \n * @export\n * @interface PatchStateBody\n */\nexport interface PatchStateBody {\n    /**\n     * Payload is the content of the state defined by your bot.\n     * @type {{ [key: string]: any; }}\n     * @memberof PatchStateBody\n     */\n    'payload': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface PatchStateResponse\n */\nexport interface PatchStateResponse {\n    /**\n     * \n     * @type {State}\n     * @memberof PatchStateResponse\n     */\n    'state': State;\n}\n/**\n * \n * @export\n * @interface RenameTableColumnBody\n */\nexport interface RenameTableColumnBody {\n    /**\n     * The existing name of the column.\n     * @type {string}\n     * @memberof RenameTableColumnBody\n     */\n    'name': string;\n    /**\n     * The new name to assign to the column.\n     * @type {string}\n     * @memberof RenameTableColumnBody\n     */\n    'newName': string;\n}\n/**\n * \n * @export\n * @interface RenameTableColumnResponse\n */\nexport interface RenameTableColumnResponse {\n    /**\n     * \n     * @type {Table}\n     * @memberof RenameTableColumnResponse\n     */\n    'table': Table;\n}\n/**\n * \n * @export\n * @interface Row\n */\nexport interface Row {\n    [key: string]: any;\n\n    /**\n     * Unique identifier for the row.\n     * @type {number}\n     * @memberof Row\n     */\n    'id': number;\n    /**\n     * Timestamp of row creation.\n     * @type {string}\n     * @memberof Row\n     */\n    'createdAt'?: string;\n    /**\n     * Timestamp of the last row update.\n     * @type {string}\n     * @memberof Row\n     */\n    'updatedAt'?: string;\n    /**\n     * Optional numeric value indicating similarity, when using findTableRows.\n     * @type {number}\n     * @memberof Row\n     */\n    'similarity'?: number;\n}\n/**\n * \n * @export\n * @interface RunVrlBody\n */\nexport interface RunVrlBody {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof RunVrlBody\n     */\n    'data': { [key: string]: any; };\n    /**\n     * \n     * @type {string}\n     * @memberof RunVrlBody\n     */\n    'script': string;\n}\n/**\n * \n * @export\n * @interface RunVrlResponse\n */\nexport interface RunVrlResponse {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof RunVrlResponse\n     */\n    'data': { [key: string]: any; };\n    /**\n     * \n     * @type {any}\n     * @memberof RunVrlResponse\n     */\n    'result'?: any | null;\n}\n/**\n * \n * @export\n * @interface SearchFilesResponse\n */\nexport interface SearchFilesResponse {\n    /**\n     * \n     * @type {Array<SearchFilesResponsePassagesInner>}\n     * @memberof SearchFilesResponse\n     */\n    'passages': Array<SearchFilesResponsePassagesInner>;\n}\n/**\n * \n * @export\n * @interface SearchFilesResponsePassagesInner\n */\nexport interface SearchFilesResponsePassagesInner {\n    /**\n     * The content of the matching passage in the file including surrounding context, if any.\n     * @type {string}\n     * @memberof SearchFilesResponsePassagesInner\n     */\n    'content': string;\n    /**\n     * The score indicating the similarity of the passage to the query. A higher score indicates higher similarity.\n     * @type {number}\n     * @memberof SearchFilesResponsePassagesInner\n     */\n    'score': number;\n    /**\n     * \n     * @type {SearchFilesResponsePassagesInnerFile}\n     * @memberof SearchFilesResponsePassagesInner\n     */\n    'file': SearchFilesResponsePassagesInnerFile;\n}\n/**\n * \n * @export\n * @interface SearchFilesResponsePassagesInnerFile\n */\nexport interface SearchFilesResponsePassagesInnerFile {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof SearchFilesResponsePassagesInnerFile\n     */\n    'id': string;\n    /**\n     * File name\n     * @type {string}\n     * @memberof SearchFilesResponsePassagesInnerFile\n     */\n    'name': string | null;\n    /**\n     * The tags of the file as an object of key/value pairs.\n     * @type {{ [key: string]: string; }}\n     * @memberof SearchFilesResponsePassagesInnerFile\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * File creation timestamp in ISO 8601 format\n     * @type {string}\n     * @memberof SearchFilesResponsePassagesInnerFile\n     */\n    'createdAt': string;\n    /**\n     * File last update timestamp in ISO 8601 format\n     * @type {string}\n     * @memberof SearchFilesResponsePassagesInnerFile\n     */\n    'updatedAt': string;\n}\n/**\n * \n * @export\n * @interface SetAccountPreferenceBody\n */\nexport interface SetAccountPreferenceBody {\n    /**\n     * \n     * @type {any}\n     * @memberof SetAccountPreferenceBody\n     */\n    'value'?: any;\n}\n/**\n * \n * @export\n * @interface SetStateBody\n */\nexport interface SetStateBody {\n    /**\n     * Payload is the content of the state defined by your bot.\n     * @type {{ [key: string]: any; }}\n     * @memberof SetStateBody\n     */\n    'payload': { [key: string]: any; } | null;\n    /**\n     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\\'t expire.\n     * @type {number}\n     * @memberof SetStateBody\n     */\n    'expiry'?: number;\n}\n/**\n * \n * @export\n * @interface SetStateResponse\n */\nexport interface SetStateResponse {\n    /**\n     * \n     * @type {State}\n     * @memberof SetStateResponse\n     */\n    'state': State;\n}\n/**\n * \n * @export\n * @interface SetWorkspacePaymentMethodBody\n */\nexport interface SetWorkspacePaymentMethodBody {\n    /**\n     * ID of the Stripe PaymentMethod to attach to the workspace.\n     * @type {string}\n     * @memberof SetWorkspacePaymentMethodBody\n     */\n    'stripePaymentMethodId': string;\n}\n/**\n * \n * @export\n * @interface SetWorkspacePaymentMethodResponse\n */\nexport interface SetWorkspacePaymentMethodResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof SetWorkspacePaymentMethodResponse\n     */\n    'stripePaymentMethodId': string;\n    /**\n     * \n     * @type {SetWorkspacePaymentMethodResponsePaymentMethod}\n     * @memberof SetWorkspacePaymentMethodResponse\n     */\n    'paymentMethod': SetWorkspacePaymentMethodResponsePaymentMethod | null;\n    /**\n     * \n     * @type {string}\n     * @memberof SetWorkspacePaymentMethodResponse\n     */\n    'status': SetWorkspacePaymentMethodResponseStatusEnum;\n    /**\n     * \n     * @type {SetWorkspacePaymentMethodResponseNextAction}\n     * @memberof SetWorkspacePaymentMethodResponse\n     */\n    'nextAction'?: SetWorkspacePaymentMethodResponseNextAction;\n}\n\nexport const SetWorkspacePaymentMethodResponseStatusEnum = {\n    Succeeded: 'succeeded',\n    Processing: 'processing',\n    Canceled: 'canceled',\n    RequiresConfirmation: 'requires_confirmation',\n    RequiresAction: 'requires_action',\n    RequiresPaymentMethod: 'requires_payment_method'\n} as const;\n\nexport type SetWorkspacePaymentMethodResponseStatusEnum = typeof SetWorkspacePaymentMethodResponseStatusEnum[keyof typeof SetWorkspacePaymentMethodResponseStatusEnum];\n\n/**\n * If the payment needs to be confirmed, this will contain a URL to redirect the user to so they can complete the verification process to confirm it.\n * @export\n * @interface SetWorkspacePaymentMethodResponseNextAction\n */\nexport interface SetWorkspacePaymentMethodResponseNextAction {\n    /**\n     * \n     * @type {string}\n     * @memberof SetWorkspacePaymentMethodResponseNextAction\n     */\n    'redirectToUrl': string;\n}\n/**\n * \n * @export\n * @interface SetWorkspacePaymentMethodResponsePaymentMethod\n */\nexport interface SetWorkspacePaymentMethodResponsePaymentMethod {\n    /**\n     * \n     * @type {string}\n     * @memberof SetWorkspacePaymentMethodResponsePaymentMethod\n     */\n    'type': string;\n    /**\n     * \n     * @type {string}\n     * @memberof SetWorkspacePaymentMethodResponsePaymentMethod\n     */\n    'lastDigits': string;\n}\n/**\n * The state object represents the current payload. A state is always linked to either a bot, a conversation or a user.\n * @export\n * @interface State\n */\nexport interface State {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof State\n     */\n    'id': string;\n    /**\n     * Creation date of the [State](#schema_state) in ISO 8601 format\n     * @type {string}\n     * @memberof State\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [State](#schema_state) in ISO 8601 format\n     * @type {string}\n     * @memberof State\n     */\n    'updatedAt': string;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof State\n     */\n    'botId': string;\n    /**\n     * Id of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof State\n     */\n    'conversationId'?: string;\n    /**\n     * Id of the [User](#schema_user)\n     * @type {string}\n     * @memberof State\n     */\n    'userId'?: string;\n    /**\n     * Type of the task\n     * @type {string}\n     * @memberof State\n     */\n    'name': string;\n    /**\n     * Type of the [State](#schema_state) represents the resource type (`conversation`, `user`, `bot`, `task` or `integration`) that the state is related to\n     * @type {string}\n     * @memberof State\n     */\n    'type': StateTypeEnum;\n    /**\n     * Payload is the content of the state defined by your bot.\n     * @type {{ [key: string]: any; }}\n     * @memberof State\n     */\n    'payload': { [key: string]: any; };\n}\n\nexport const StateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Task: 'task',\n    Integration: 'integration'\n} as const;\n\nexport type StateTypeEnum = typeof StateTypeEnum[keyof typeof StateTypeEnum];\n\n/**\n * \n * @export\n * @interface Table\n */\nexport interface Table {\n    /**\n     * Unique identifier for the table\n     * @type {string}\n     * @memberof Table\n     */\n    'id': string;\n    /**\n     * Required. This name is used to identify your table.\n     * @type {string}\n     * @memberof Table\n     */\n    'name': string;\n    /**\n     * The \\'factor\\' multiplies the row\\'s data storage limit by 4KB and its quota count, but can only be set at table creation and not modified later. For instance, a factor of 2 increases storage to 8KB but counts as 2 rows in your quota. The default factor is 1.\n     * @type {number}\n     * @memberof Table\n     */\n    'factor'?: number;\n    /**\n     * A table designated as \\\"frozen\\\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations.\n     * @type {boolean}\n     * @memberof Table\n     */\n    'frozen'?: boolean;\n    /**\n     * \n     * @type {TableSchema}\n     * @memberof Table\n     */\n    'schema': TableSchema;\n    /**\n     * Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs.\n     * @type {{ [key: string]: string; }}\n     * @memberof Table\n     */\n    'tags'?: { [key: string]: string; };\n    /**\n     * Timestamp of table creation.\n     * @type {string}\n     * @memberof Table\n     */\n    'createdAt'?: string;\n    /**\n     * Timestamp of the last table update.\n     * @type {string}\n     * @memberof Table\n     */\n    'updatedAt'?: string;\n}\n/**\n * \n * @export\n * @interface TableSchema\n */\nexport interface TableSchema {\n    /**\n     * \n     * @type {string}\n     * @memberof TableSchema\n     */\n    '$schema': string;\n    /**\n     * List of keys/columns in the table.\n     * @type {{ [key: string]: TableSchemaPropertiesValue; }}\n     * @memberof TableSchema\n     */\n    'properties': { [key: string]: TableSchemaPropertiesValue; };\n    /**\n     * Additional properties can be provided, but they will be ignored if no column matches.\n     * @type {boolean}\n     * @memberof TableSchema\n     */\n    'additionalProperties': boolean;\n    /**\n     * Array of required properties.\n     * @type {Array<string>}\n     * @memberof TableSchema\n     */\n    'required'?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof TableSchema\n     */\n    'type': TableSchemaTypeEnum;\n}\n\nexport const TableSchemaTypeEnum = {\n    Object: 'object'\n} as const;\n\nexport type TableSchemaTypeEnum = typeof TableSchemaTypeEnum[keyof typeof TableSchemaTypeEnum];\n\n/**\n * \n * @export\n * @interface TableSchemaPropertiesValue\n */\nexport interface TableSchemaPropertiesValue {\n    /**\n     * \n     * @type {string}\n     * @memberof TableSchemaPropertiesValue\n     */\n    'type': TableSchemaPropertiesValueTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof TableSchemaPropertiesValue\n     */\n    'format'?: TableSchemaPropertiesValueFormatEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof TableSchemaPropertiesValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TableSchemaPropertiesValue\n     */\n    'nullable'?: boolean;\n    /**\n     * \n     * @type {TableSchemaPropertiesValueXZui}\n     * @memberof TableSchemaPropertiesValue\n     */\n    'x-zui': TableSchemaPropertiesValueXZui;\n}\n\nexport const TableSchemaPropertiesValueTypeEnum = {\n    String: 'string',\n    Number: 'number',\n    Boolean: 'boolean',\n    Object: 'object',\n    Null: 'null'\n} as const;\n\nexport type TableSchemaPropertiesValueTypeEnum = typeof TableSchemaPropertiesValueTypeEnum[keyof typeof TableSchemaPropertiesValueTypeEnum];\nexport const TableSchemaPropertiesValueFormatEnum = {\n    DateTime: 'date-time'\n} as const;\n\nexport type TableSchemaPropertiesValueFormatEnum = typeof TableSchemaPropertiesValueFormatEnum[keyof typeof TableSchemaPropertiesValueFormatEnum];\n\n/**\n * \n * @export\n * @interface TableSchemaPropertiesValueXZui\n */\nexport interface TableSchemaPropertiesValueXZui {\n    /**\n     * \n     * @type {number}\n     * @memberof TableSchemaPropertiesValueXZui\n     */\n    'index': number;\n    /**\n     * [deprecated] ID of the column.\n     * @type {string}\n     * @memberof TableSchemaPropertiesValueXZui\n     */\n    'id'?: string;\n    /**\n     * Indicates if the column is vectorized and searchable.\n     * @type {boolean}\n     * @memberof TableSchemaPropertiesValueXZui\n     */\n    'searchable'?: boolean;\n    /**\n     * TypeScript typings for the column. Recommended if the type is \\\"object\\\", ex: \\\"\\\\{ foo: string; bar: number \\\\}\\\"\n     * @type {string}\n     * @memberof TableSchemaPropertiesValueXZui\n     */\n    'typings'?: string;\n}\n/**\n * Task definition\n * @export\n * @interface Task\n */\nexport interface Task {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Task\n     */\n    'id': string;\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof Task\n     */\n    'title': string;\n    /**\n     * All the notes related to the execution of the current task\n     * @type {string}\n     * @memberof Task\n     */\n    'description': string;\n    /**\n     * Type of the task\n     * @type {string}\n     * @memberof Task\n     */\n    'type': string;\n    /**\n     * Content related to the task\n     * @type {{ [key: string]: any; }}\n     * @memberof Task\n     */\n    'data': { [key: string]: any; };\n    /**\n     * Status of the task\n     * @type {string}\n     * @memberof Task\n     */\n    'status': TaskStatusEnum;\n    /**\n     * Parent task id is the parent task that created this task\n     * @type {string}\n     * @memberof Task\n     */\n    'parentTaskId'?: string;\n    /**\n     * Conversation id related to this task\n     * @type {string}\n     * @memberof Task\n     */\n    'conversationId'?: string;\n    /**\n     * Specific user related to this task\n     * @type {string}\n     * @memberof Task\n     */\n    'userId'?: string;\n    /**\n     * The timeout date where the task should be failed in the ISO 8601 format\n     * @type {string}\n     * @memberof Task\n     */\n    'timeoutAt': string;\n    /**\n     * Creation date of the task in ISO 8601 format\n     * @type {string}\n     * @memberof Task\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the task in ISO 8601 format\n     * @type {string}\n     * @memberof Task\n     */\n    'updatedAt': string;\n    /**\n     * If the task fails this is the reason behind it\n     * @type {string}\n     * @memberof Task\n     */\n    'failureReason'?: string;\n    /**\n     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Task](#schema_task). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof Task\n     */\n    'tags': { [key: string]: string; };\n}\n\nexport const TaskStatusEnum = {\n    Pending: 'pending',\n    InProgress: 'in_progress',\n    Failed: 'failed',\n    Completed: 'completed',\n    Blocked: 'blocked',\n    Paused: 'paused',\n    Timeout: 'timeout',\n    Cancelled: 'cancelled'\n} as const;\n\nexport type TaskStatusEnum = typeof TaskStatusEnum[keyof typeof TaskStatusEnum];\n\n/**\n * \n * @export\n * @interface TransferBotBody\n */\nexport interface TransferBotBody {\n    /**\n     * The ID of the workspace you want to transfer the bot to.\n     * @type {string}\n     * @memberof TransferBotBody\n     */\n    'targetWorkspaceId': string;\n}\n/**\n * \n * @export\n * @interface UpdateAccountBody\n */\nexport interface UpdateAccountBody {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateAccountBody\n     */\n    'displayName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateAccountBody\n     */\n    'profilePicture'?: string;\n}\n/**\n * \n * @export\n * @interface UpdateAccountResponse\n */\nexport interface UpdateAccountResponse {\n    /**\n     * \n     * @type {GetAccountResponseAccount}\n     * @memberof UpdateAccountResponse\n     */\n    'account': GetAccountResponseAccount;\n}\n/**\n * \n * @export\n * @interface UpdateBotBody\n */\nexport interface UpdateBotBody {\n    /**\n     * URL of the [Bot](#schema_bot); Only available for dev bots\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'url'?: string;\n    /**\n     * Type of the [Bot](#schema_bot) authentication (`iam`)\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'authentication'?: UpdateBotBodyAuthenticationEnum;\n    /**\n     * \n     * @type {CreateBotBodyConfiguration}\n     * @memberof UpdateBotBody\n     */\n    'configuration'?: CreateBotBodyConfiguration;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateBotBody\n     */\n    'blocked'?: boolean;\n    /**\n     * Indicates if the [Bot](#schema_bot) should be in always alive mode\n     * @type {boolean}\n     * @memberof UpdateBotBody\n     */\n    'alwaysAlive'?: boolean;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateBotBody\n     */\n    'user'?: UpdateBotBodyUser;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateBotBody\n     */\n    'message'?: UpdateBotBodyUser;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateBotBody\n     */\n    'conversation'?: UpdateBotBodyUser;\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyEventsValue | null; }}\n     * @memberof UpdateBotBody\n     */\n    'events'?: { [key: string]: UpdateBotBodyEventsValue | null; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyActionsValue | null; }}\n     * @memberof UpdateBotBody\n     */\n    'actions'?: { [key: string]: UpdateBotBodyActionsValue | null; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyStatesValue | null; }}\n     * @memberof UpdateBotBody\n     */\n    'states'?: { [key: string]: UpdateBotBodyStatesValue | null; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyRecurringEventsValue | null; }}\n     * @memberof UpdateBotBody\n     */\n    'recurringEvents'?: { [key: string]: UpdateBotBodyRecurringEventsValue | null; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyIntegrationsValue | null; }}\n     * @memberof UpdateBotBody\n     */\n    'integrations'?: { [key: string]: UpdateBotBodyIntegrationsValue | null; };\n    /**\n     * \n     * @type {UpdateBotBodySubscriptions}\n     * @memberof UpdateBotBody\n     */\n    'subscriptions'?: UpdateBotBodySubscriptions;\n    /**\n     * JavaScript code of the bot\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'code'?: string;\n    /**\n     * Optional name for the bot, if not provided will be auto-generated\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'name'?: string;\n    /**\n     * Media files associated with the [Bot](#schema_bot)\n     * @type {Array<CreateBotBodyMediasInner>}\n     * @memberof UpdateBotBody\n     */\n    'medias'?: Array<CreateBotBodyMediasInner>;\n}\n\nexport const UpdateBotBodyAuthenticationEnum = {\n    Iam: 'iam'\n} as const;\n\nexport type UpdateBotBodyAuthenticationEnum = typeof UpdateBotBodyAuthenticationEnum[keyof typeof UpdateBotBodyAuthenticationEnum];\n\n/**\n * Action definition\n * @export\n * @interface UpdateBotBodyActionsValue\n */\nexport interface UpdateBotBodyActionsValue {\n    /**\n     * Title of the action\n     * @type {string}\n     * @memberof UpdateBotBodyActionsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the action\n     * @type {string}\n     * @memberof UpdateBotBodyActionsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationActionsValueInput}\n     * @memberof UpdateBotBodyActionsValue\n     */\n    'input': GetPublicIntegrationByIdResponseIntegrationActionsValueInput;\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationActionsValueInput}\n     * @memberof UpdateBotBodyActionsValue\n     */\n    'output': GetPublicIntegrationByIdResponseIntegrationActionsValueInput;\n}\n/**\n * Event Definition\n * @export\n * @interface UpdateBotBodyEventsValue\n */\nexport interface UpdateBotBodyEventsValue {\n    /**\n     * Title of the event\n     * @type {string}\n     * @memberof UpdateBotBodyEventsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the event\n     * @type {string}\n     * @memberof UpdateBotBodyEventsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyEventsValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateBotBodyIntegrationsValue\n */\nexport interface UpdateBotBodyIntegrationsValue {\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateBotBodyIntegrationsValue\n     */\n    'enabled'?: boolean;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyIntegrationsValue\n     */\n    'configuration'?: { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateBotBodyRecurringEventsValue\n */\nexport interface UpdateBotBodyRecurringEventsValue {\n    /**\n     * \n     * @type {CreateBotBodyRecurringEventsValueSchedule}\n     * @memberof UpdateBotBodyRecurringEventsValue\n     */\n    'schedule': CreateBotBodyRecurringEventsValueSchedule;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof UpdateBotBodyRecurringEventsValue\n     */\n    'type': string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyRecurringEventsValue\n     */\n    'payload': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateBotBodyStatesValue\n */\nexport interface UpdateBotBodyStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)\n     * @type {string}\n     * @memberof UpdateBotBodyStatesValue\n     */\n    'type': UpdateBotBodyStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyStatesValue\n     */\n    'schema': { [key: string]: any; };\n    /**\n     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\\'t expire.\n     * @type {number}\n     * @memberof UpdateBotBodyStatesValue\n     */\n    'expiry'?: number;\n}\n\nexport const UpdateBotBodyStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Task: 'task'\n} as const;\n\nexport type UpdateBotBodyStatesValueTypeEnum = typeof UpdateBotBodyStatesValueTypeEnum[keyof typeof UpdateBotBodyStatesValueTypeEnum];\n\n/**\n * \n * @export\n * @interface UpdateBotBodySubscriptions\n */\nexport interface UpdateBotBodySubscriptions {\n    /**\n     * \n     * @type {{ [key: string]: { [key: string]: any; } | null; }}\n     * @memberof UpdateBotBodySubscriptions\n     */\n    'events': { [key: string]: { [key: string]: any; } | null; } | null;\n}\n/**\n * \n * @export\n * @interface UpdateBotBodyUser\n */\nexport interface UpdateBotBodyUser {\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}\n     * @memberof UpdateBotBodyUser\n     */\n    'tags'?: { [key: string]: UpdateBotBodyUserTagsValue | null; };\n}\n/**\n * Definition of a tag that can be provided on the object\n * @export\n * @interface UpdateBotBodyUserTagsValue\n */\nexport interface UpdateBotBodyUserTagsValue {\n    /**\n     * Title of the tag\n     * @type {string}\n     * @memberof UpdateBotBodyUserTagsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the tag\n     * @type {string}\n     * @memberof UpdateBotBodyUserTagsValue\n     */\n    'description'?: string;\n}\n/**\n * \n * @export\n * @interface UpdateBotResponse\n */\nexport interface UpdateBotResponse {\n    /**\n     * \n     * @type {Bot}\n     * @memberof UpdateBotResponse\n     */\n    'bot': Bot;\n}\n/**\n * \n * @export\n * @interface UpdateConversationBody\n */\nexport interface UpdateConversationBody {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateConversationBody\n     */\n    'currentTaskId'?: string;\n    /**\n     * Tags for the [Conversation](#schema_conversation)\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateConversationBody\n     */\n    'tags'?: { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface UpdateConversationResponse\n */\nexport interface UpdateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof UpdateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface UpdateFileMetadataBody\n */\nexport interface UpdateFileMetadataBody {\n    /**\n     * The tags to update as an object of key/value pairs. A tag key can be set to a null value to delete it.\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateFileMetadataBody\n     */\n    'tags': { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface UpdateFileMetadataResponse\n */\nexport interface UpdateFileMetadataResponse {\n    /**\n     * The updated tags of the file.\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateFileMetadataResponse\n     */\n    'tags': { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBody\n */\nexport interface UpdateIntegrationBody {\n    /**\n     * \n     * @type {UpdateIntegrationBodyConfiguration}\n     * @memberof UpdateIntegrationBody\n     */\n    'configuration'?: UpdateIntegrationBodyConfiguration;\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyChannelsValue | null; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'channels'?: { [key: string]: UpdateIntegrationBodyChannelsValue | null; };\n    /**\n     * \n     * @type {UpdateIntegrationBodyIdentifier}\n     * @memberof UpdateIntegrationBody\n     */\n    'identifier'?: UpdateIntegrationBodyIdentifier;\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyActionsValue | null; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'actions'?: { [key: string]: UpdateBotBodyActionsValue | null; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyEventsValue | null; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'events'?: { [key: string]: UpdateBotBodyEventsValue | null; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyStatesValue | null; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'states'?: { [key: string]: UpdateIntegrationBodyStatesValue | null; };\n    /**\n     * \n     * @type {UpdateIntegrationBodyUser}\n     * @memberof UpdateIntegrationBody\n     */\n    'user'?: UpdateIntegrationBodyUser;\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyEntitiesValue | null; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'entities'?: { [key: string]: UpdateIntegrationBodyEntitiesValue | null; };\n    /**\n     * Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing.\n     * @type {{ [key: string]: string | null; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'secrets'?: { [key: string]: string | null; };\n    /**\n     * JavaScript code of the integration\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'code'?: string;\n    /**\n     * Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes.\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'icon'?: string;\n    /**\n     * Base64 encoded markdown of the integration readme. The readme is specific to each integration versions.\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'readme'?: string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'title'?: string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'description'?: string;\n    /**\n     * URL of the integration; Only available for dev integrations\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'url'?: string;\n    /**\n     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.\n     * @type {boolean}\n     * @memberof UpdateIntegrationBody\n     */\n    'public'?: boolean;\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyChannelsValue\n */\nexport interface UpdateIntegrationBodyChannelsValue {\n    /**\n     * Title of the channel\n     * @type {string}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the channel\n     * @type {string}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyChannelsValueMessagesValue | null; }}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'messages'?: { [key: string]: UpdateIntegrationBodyChannelsValueMessagesValue | null; };\n    /**\n     * \n     * @type {UpdateIntegrationBodyChannelsValueConversation}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'conversation'?: UpdateIntegrationBodyChannelsValueConversation;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'message'?: UpdateBotBodyUser;\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyChannelsValueConversation\n */\nexport interface UpdateIntegrationBodyChannelsValueConversation {\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation}\n     * @memberof UpdateIntegrationBodyChannelsValueConversation\n     */\n    'creation'?: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation;\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}\n     * @memberof UpdateIntegrationBodyChannelsValueConversation\n     */\n    'tags'?: { [key: string]: UpdateBotBodyUserTagsValue | null; };\n}\n/**\n * Message definition\n * @export\n * @interface UpdateIntegrationBodyChannelsValueMessagesValue\n */\nexport interface UpdateIntegrationBodyChannelsValueMessagesValue {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateIntegrationBodyChannelsValueMessagesValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyConfiguration\n */\nexport interface UpdateIntegrationBodyConfiguration {\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateIntegrationBodyConfiguration\n     */\n    'schema'?: { [key: string]: any; };\n    /**\n     * \n     * @type {UpdateIntegrationBodyConfigurationIdentifier}\n     * @memberof UpdateIntegrationBodyConfiguration\n     */\n    'identifier'?: UpdateIntegrationBodyConfigurationIdentifier;\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyConfigurationIdentifier\n */\nexport interface UpdateIntegrationBodyConfigurationIdentifier {\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof UpdateIntegrationBodyConfigurationIdentifier\n     */\n    'linkTemplateScript'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateIntegrationBodyConfigurationIdentifier\n     */\n    'required'?: boolean;\n}\n/**\n * Entity definition\n * @export\n * @interface UpdateIntegrationBodyEntitiesValue\n */\nexport interface UpdateIntegrationBodyEntitiesValue {\n    /**\n     * Title of the entity\n     * @type {string}\n     * @memberof UpdateIntegrationBodyEntitiesValue\n     */\n    'title'?: string;\n    /**\n     * Description of the entity\n     * @type {string}\n     * @memberof UpdateIntegrationBodyEntitiesValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateIntegrationBodyEntitiesValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyIdentifier\n */\nexport interface UpdateIntegrationBodyIdentifier {\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof UpdateIntegrationBodyIdentifier\n     */\n    'extractScript'?: string | null;\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof UpdateIntegrationBodyIdentifier\n     */\n    'fallbackHandlerScript'?: string | null;\n}\n/**\n * State definition\n * @export\n * @interface UpdateIntegrationBodyStatesValue\n */\nexport interface UpdateIntegrationBodyStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user` or `integration`)\n     * @type {string}\n     * @memberof UpdateIntegrationBodyStatesValue\n     */\n    'type': UpdateIntegrationBodyStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateIntegrationBodyStatesValue\n     */\n    'schema': { [key: string]: any; };\n}\n\nexport const UpdateIntegrationBodyStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Integration: 'integration'\n} as const;\n\nexport type UpdateIntegrationBodyStatesValueTypeEnum = typeof UpdateIntegrationBodyStatesValueTypeEnum[keyof typeof UpdateIntegrationBodyStatesValueTypeEnum];\n\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyUser\n */\nexport interface UpdateIntegrationBodyUser {\n    /**\n     * \n     * @type {GetPublicIntegrationByIdResponseIntegrationUserCreation}\n     * @memberof UpdateIntegrationBodyUser\n     */\n    'creation'?: GetPublicIntegrationByIdResponseIntegrationUserCreation;\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}\n     * @memberof UpdateIntegrationBodyUser\n     */\n    'tags'?: { [key: string]: UpdateBotBodyUserTagsValue | null; };\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationResponse\n */\nexport interface UpdateIntegrationResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof UpdateIntegrationResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface UpdateMessageBody\n */\nexport interface UpdateMessageBody {\n    /**\n     * Set of [Tags](#tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](#tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateMessageBody\n     */\n    'tags': { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface UpdateMessageResponse\n */\nexport interface UpdateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof UpdateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface UpdateTableBody\n */\nexport interface UpdateTableBody {\n    /**\n     * Required. This name is used to identify your table.\n     * @type {string}\n     * @memberof UpdateTableBody\n     */\n    'name'?: string;\n    /**\n     * A table designated as \\\"frozen\\\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations.\n     * @type {boolean}\n     * @memberof UpdateTableBody\n     */\n    'frozen'?: boolean;\n    /**\n     * Provide an object or a JSON schema to define the columns of the table. A maximum of 20 keys in the object/schema is allowed.\n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateTableBody\n     */\n    'schema'?: { [key: string]: any; };\n    /**\n     * Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs.\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateTableBody\n     */\n    'tags'?: { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface UpdateTableResponse\n */\nexport interface UpdateTableResponse {\n    /**\n     * \n     * @type {Table}\n     * @memberof UpdateTableResponse\n     */\n    'table': Table;\n}\n/**\n * \n * @export\n * @interface UpdateTableRowsBody\n */\nexport interface UpdateTableRowsBody {\n    /**\n     * Rows with updated data, identified by ID.\n     * @type {Array<UpdateTableRowsBodyRowsInner>}\n     * @memberof UpdateTableRowsBody\n     */\n    'rows': Array<UpdateTableRowsBodyRowsInner>;\n}\n/**\n * \n * @export\n * @interface UpdateTableRowsBodyRowsInner\n */\nexport interface UpdateTableRowsBodyRowsInner {\n    [key: string]: any;\n\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateTableRowsBodyRowsInner\n     */\n    'id': number;\n}\n/**\n * \n * @export\n * @interface UpdateTableRowsResponse\n */\nexport interface UpdateTableRowsResponse {\n    /**\n     * \n     * @type {Array<Row>}\n     * @memberof UpdateTableRowsResponse\n     */\n    'rows': Array<Row>;\n    /**\n     * Alerts for minor issues that don\\'t block the operation but suggest possible improvements.\n     * @type {Array<string>}\n     * @memberof UpdateTableRowsResponse\n     */\n    'warnings'?: Array<string>;\n    /**\n     * Critical issues in specific elements that prevent their successful processing, allowing partial operation success.\n     * @type {Array<string>}\n     * @memberof UpdateTableRowsResponse\n     */\n    'errors'?: Array<string>;\n}\n/**\n * \n * @export\n * @interface UpdateTaskBody\n */\nexport interface UpdateTaskBody {\n    /**\n     * Title describing the task\n     * @type {string}\n     * @memberof UpdateTaskBody\n     */\n    'title'?: string;\n    /**\n     * All the notes related to the execution of the current task\n     * @type {string}\n     * @memberof UpdateTaskBody\n     */\n    'description'?: string;\n    /**\n     * Content related to the task\n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateTaskBody\n     */\n    'data'?: { [key: string]: any; };\n    /**\n     * The timeout date where the task should be failed in the ISO 8601 format\n     * @type {string}\n     * @memberof UpdateTaskBody\n     */\n    'timeoutAt'?: string;\n    /**\n     * Status of the task\n     * @type {string}\n     * @memberof UpdateTaskBody\n     */\n    'status'?: UpdateTaskBodyStatusEnum;\n    /**\n     * Tags for the [Task](#schema_task)\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateTaskBody\n     */\n    'tags'?: { [key: string]: string; };\n}\n\nexport const UpdateTaskBodyStatusEnum = {\n    Pending: 'pending',\n    InProgress: 'in_progress',\n    Failed: 'failed',\n    Completed: 'completed',\n    Blocked: 'blocked',\n    Paused: 'paused',\n    Timeout: 'timeout',\n    Cancelled: 'cancelled'\n} as const;\n\nexport type UpdateTaskBodyStatusEnum = typeof UpdateTaskBodyStatusEnum[keyof typeof UpdateTaskBodyStatusEnum];\n\n/**\n * \n * @export\n * @interface UpdateTaskResponse\n */\nexport interface UpdateTaskResponse {\n    /**\n     * \n     * @type {Task}\n     * @memberof UpdateTaskResponse\n     */\n    'task': Task;\n}\n/**\n * \n * @export\n * @interface UpdateUserBody\n */\nexport interface UpdateUserBody {\n    /**\n     * Tags for the [User](#schema_user)\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateUserBody\n     */\n    'tags'?: { [key: string]: string; };\n    /**\n     * Name of the user\n     * @type {string}\n     * @memberof UpdateUserBody\n     */\n    'name'?: string;\n    /**\n     * URI of the user picture\n     * @type {string}\n     * @memberof UpdateUserBody\n     */\n    'pictureUrl'?: string | null;\n}\n/**\n * \n * @export\n * @interface UpdateUserResponse\n */\nexport interface UpdateUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof UpdateUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface UpdateWorkspaceBody\n */\nexport interface UpdateWorkspaceBody {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceBody\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceBody\n     */\n    'spendingLimit'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceBody\n     */\n    'about'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceBody\n     */\n    'profilePicture'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceBody\n     */\n    'contactEmail'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceBody\n     */\n    'website'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UpdateWorkspaceBody\n     */\n    'socialAccounts'?: Array<string>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateWorkspaceBody\n     */\n    'isPublic'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceBody\n     */\n    'handle'?: string;\n}\n/**\n * \n * @export\n * @interface UpdateWorkspaceMemberBody\n */\nexport interface UpdateWorkspaceMemberBody {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberBody\n     */\n    'role'?: UpdateWorkspaceMemberBodyRoleEnum;\n}\n\nexport const UpdateWorkspaceMemberBodyRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type UpdateWorkspaceMemberBodyRoleEnum = typeof UpdateWorkspaceMemberBodyRoleEnum[keyof typeof UpdateWorkspaceMemberBodyRoleEnum];\n\n/**\n * \n * @export\n * @interface UpdateWorkspaceMemberResponse\n */\nexport interface UpdateWorkspaceMemberResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'userId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'role': UpdateWorkspaceMemberResponseRoleEnum;\n}\n\nexport const UpdateWorkspaceMemberResponseRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type UpdateWorkspaceMemberResponseRoleEnum = typeof UpdateWorkspaceMemberResponseRoleEnum[keyof typeof UpdateWorkspaceMemberResponseRoleEnum];\n\n/**\n * \n * @export\n * @interface UpdateWorkspaceResponse\n */\nexport interface UpdateWorkspaceResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'accountType': UpdateWorkspaceResponseAccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'billingVersion': UpdateWorkspaceResponseBillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'plan': UpdateWorkspaceResponsePlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'spendingLimit': number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'about'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'profilePicture'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'contactEmail'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'website'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'socialAccounts'?: Array<string>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'isPublic'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'handle'?: string;\n}\n\nexport const UpdateWorkspaceResponseAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type UpdateWorkspaceResponseAccountTypeEnum = typeof UpdateWorkspaceResponseAccountTypeEnum[keyof typeof UpdateWorkspaceResponseAccountTypeEnum];\nexport const UpdateWorkspaceResponseBillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type UpdateWorkspaceResponseBillingVersionEnum = typeof UpdateWorkspaceResponseBillingVersionEnum[keyof typeof UpdateWorkspaceResponseBillingVersionEnum];\nexport const UpdateWorkspaceResponsePlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type UpdateWorkspaceResponsePlanEnum = typeof UpdateWorkspaceResponsePlanEnum[keyof typeof UpdateWorkspaceResponsePlanEnum];\n\n/**\n * \n * @export\n * @interface UpdateWorkspaceResponse1\n */\nexport interface UpdateWorkspaceResponse1 {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'accountType': UpdateWorkspaceResponse1AccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'billingVersion': UpdateWorkspaceResponse1BillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'plan': UpdateWorkspaceResponse1PlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'spendingLimit': number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'about'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'profilePicture'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'contactEmail'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'website'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'socialAccounts'?: Array<string>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'isPublic'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'handle'?: string;\n}\n\nexport const UpdateWorkspaceResponse1AccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type UpdateWorkspaceResponse1AccountTypeEnum = typeof UpdateWorkspaceResponse1AccountTypeEnum[keyof typeof UpdateWorkspaceResponse1AccountTypeEnum];\nexport const UpdateWorkspaceResponse1BillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type UpdateWorkspaceResponse1BillingVersionEnum = typeof UpdateWorkspaceResponse1BillingVersionEnum[keyof typeof UpdateWorkspaceResponse1BillingVersionEnum];\nexport const UpdateWorkspaceResponse1PlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type UpdateWorkspaceResponse1PlanEnum = typeof UpdateWorkspaceResponse1PlanEnum[keyof typeof UpdateWorkspaceResponse1PlanEnum];\n\n/**\n * \n * @export\n * @interface UpsertTableRowsBody\n */\nexport interface UpsertTableRowsBody {\n    /**\n     * \n     * @type {Array<UpsertTableRowsBodyRowsInner>}\n     * @memberof UpsertTableRowsBody\n     */\n    'rows': Array<UpsertTableRowsBodyRowsInner>;\n    /**\n     * Determines if a row is inserted or updated. Defaults to \\\"id\\\".\n     * @type {string}\n     * @memberof UpsertTableRowsBody\n     */\n    'keyColumn'?: string;\n}\n/**\n * \n * @export\n * @interface UpsertTableRowsBodyRowsInner\n */\nexport interface UpsertTableRowsBodyRowsInner {\n    [key: string]: any;\n\n    /**\n     * \n     * @type {number}\n     * @memberof UpsertTableRowsBodyRowsInner\n     */\n    'id'?: number;\n}\n/**\n * \n * @export\n * @interface UpsertTableRowsResponse\n */\nexport interface UpsertTableRowsResponse {\n    /**\n     * \n     * @type {Array<Row>}\n     * @memberof UpsertTableRowsResponse\n     */\n    'inserted': Array<Row>;\n    /**\n     * \n     * @type {Array<Row>}\n     * @memberof UpsertTableRowsResponse\n     */\n    'updated': Array<Row>;\n    /**\n     * Alerts for minor issues that don\\'t block the operation but suggest possible improvements.\n     * @type {Array<string>}\n     * @memberof UpsertTableRowsResponse\n     */\n    'warnings'?: Array<string>;\n    /**\n     * Critical issues in specific elements that prevent their successful processing, allowing partial operation success.\n     * @type {Array<string>}\n     * @memberof UpsertTableRowsResponse\n     */\n    'errors'?: Array<string>;\n}\n/**\n * \n * @export\n * @interface Usage\n */\nexport interface Usage {\n    /**\n     * Id of the usage that it is linked to. It can either be a workspace id or a bot id\n     * @type {string}\n     * @memberof Usage\n     */\n    'id': string;\n    /**\n     * Period of the quota that it is applied to\n     * @type {string}\n     * @memberof Usage\n     */\n    'period': string;\n    /**\n     * Value of the current usage\n     * @type {number}\n     * @memberof Usage\n     */\n    'value': number;\n    /**\n     * Quota of the current usage\n     * @type {number}\n     * @memberof Usage\n     */\n    'quota': number;\n    /**\n     * Usage type that can be used\n     * @type {string}\n     * @memberof Usage\n     */\n    'type': UsageTypeEnum;\n}\n\nexport const UsageTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\n\nexport type UsageTypeEnum = typeof UsageTypeEnum[keyof typeof UsageTypeEnum];\n\n/**\n * The user object represents someone interacting with the bot within a specific integration. The same person interacting with a bot in slack and messenger will be represented with two different users.\n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof User\n     */\n    'id': string;\n    /**\n     * Creation date of the [User](#schema_user) in ISO 8601 format\n     * @type {string}\n     * @memberof User\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [User](#schema_user) in ISO 8601 format\n     * @type {string}\n     * @memberof User\n     */\n    'updatedAt': string;\n    /**\n     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [User](#schema_user). The set of [Tags](/docs/developers/concepts/tags) available on a [User](#schema_user) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof User\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * Name of the [User](#schema_user)\n     * @type {string}\n     * @memberof User\n     */\n    'name'?: string;\n    /**\n     * Picture URL of the [User](#schema_user)\n     * @type {string}\n     * @memberof User\n     */\n    'pictureUrl'?: string;\n}\n/**\n * \n * @export\n * @interface Workspace\n */\nexport interface Workspace {\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof Workspace\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'accountType': WorkspaceAccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'billingVersion': WorkspaceBillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'plan': WorkspacePlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Workspace\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Workspace\n     */\n    'spendingLimit': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'about'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'profilePicture'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'contactEmail'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'website'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Workspace\n     */\n    'socialAccounts'?: Array<string>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Workspace\n     */\n    'isPublic'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'handle'?: string;\n}\n\nexport const WorkspaceAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type WorkspaceAccountTypeEnum = typeof WorkspaceAccountTypeEnum[keyof typeof WorkspaceAccountTypeEnum];\nexport const WorkspaceBillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type WorkspaceBillingVersionEnum = typeof WorkspaceBillingVersionEnum[keyof typeof WorkspaceBillingVersionEnum];\nexport const WorkspacePlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type WorkspacePlanEnum = typeof WorkspacePlanEnum[keyof typeof WorkspacePlanEnum];\n\n/**\n * \n * @export\n * @interface WorkspaceMember\n */\nexport interface WorkspaceMember {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkspaceMember\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkspaceMember\n     */\n    'userId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkspaceMember\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkspaceMember\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkspaceMember\n     */\n    'role': WorkspaceMemberRoleEnum;\n}\n\nexport const WorkspaceMemberRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type WorkspaceMemberRoleEnum = typeof WorkspaceMemberRoleEnum[keyof typeof WorkspaceMemberRoleEnum];\n\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {AddParticipantBody} [addParticipantBody] Participant data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addParticipant: async (id: string, addParticipantBody?: AddParticipantBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('addParticipant', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}/participants`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addParticipantBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Break down workspace usage by bot\n         * @param {string} id Workspace ID\n         * @param {BreakDownWorkspaceUsageByBotTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        breakDownWorkspaceUsageByBot: async (id: string, type: BreakDownWorkspaceUsageByBotTypeEnum, period?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('breakDownWorkspaceUsageByBot', 'id', id)\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('breakDownWorkspaceUsageByBot', 'type', type)\n            const localVarPath = `/v1/admin/workspaces/{id}/usages/by-bot`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Call an action\n         * @param {CallActionBody} [callActionBody] Action payload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        callAction: async (callActionBody?: CallActionBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/actions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(callActionBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Change AI Spend quota\n         * @param {ChangeAISpendQuotaBody} [changeAISpendQuotaBody] New AI Spend quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changeAISpendQuota: async (changeAISpendQuotaBody?: ChangeAISpendQuotaBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/quotas/ai-spend`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(changeAISpendQuotaBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Change workspace billing plan\n         * @param {string} id Workspace ID\n         * @param {ChangeWorkspacePlanBody} [changeWorkspacePlanBody] Billing plan to change the workspace to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changeWorkspacePlan: async (id: string, changeWorkspacePlanBody?: ChangeWorkspacePlanBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('changeWorkspacePlan', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/change-plan`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(changeWorkspacePlanBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Charge unpaid invoices of a workspace.\n         * @param {string} id Workspace ID\n         * @param {ChargeWorkspaceUnpaidInvoicesBody} [chargeWorkspaceUnpaidInvoicesBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        chargeWorkspaceUnpaidInvoices: async (id: string, chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('chargeWorkspaceUnpaidInvoices', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/billing/invoices/charge-unpaid`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(chargeWorkspaceUnpaidInvoicesBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if a workspace handle is available\n         * @param {CheckHandleAvailabilityBody} [checkHandleAvailabilityBody] Workspace handle availability\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        checkHandleAvailability: async (checkHandleAvailabilityBody?: CheckHandleAvailabilityBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspaces/handle-availability`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(checkHandleAvailabilityBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * An integration can call this endpoint to configure itself\n         * @param {ConfigureIntegrationBody} [configureIntegrationBody] Configuration of the integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        configureIntegration: async (configureIntegrationBody?: ConfigureIntegrationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/integrations/configure`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(configureIntegrationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create bot\n         * @param {CreateBotBody} [createBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createBot: async (createBotBody?: CreateBotBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/bots`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createBotBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateConversationBody} [createConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConversation: async (createConversationBody?: CreateConversationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/conversations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateEventBody} [createEventBody] Event data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEvent: async (createEventBody?: CreateEventBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/events`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createEventBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a file.\n         * @param {string} [xName] File name\n         * @param {string} [xTags] File tags as URL-encoded JSON string representing an object of key-value pairs.\n         * @param {string} [xAccessPolicies] File access policies, comma-separated. Add \\&quot;public_content\\&quot; to allow public access to the file content. Add \\&quot;integrations\\&quot; to allo read, search and list operations for any integration installed in the bot.\n         * @param {boolean} [xIndex] Set to a value of \\&quot;true\\&quot; to index the file in vector storage (default: false). Only PDFs, Office documents, and text-based files are currently supported. Note that if a file is indexed, it will count towards the Vector Storage quota of the workspace rather than the File Storage quota.\n         * @param {string} [contentType] File content type. If omitted, the content type will be inferred from the file extension. If a type cannot be inferred, the default is \\&quot;application/octet-stream\\&quot;.\n         * @param {string} [contentLength] File content length\n         * @param {CreateFileBody} [createFileBody] The file to upload.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile: async (xName?: string, xTags?: string, xAccessPolicies?: string, xIndex?: boolean, contentType?: string, contentLength?: string, createFileBody?: CreateFileBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/files`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xName != null) {\n                localVarHeaderParameter['x-name'] = String(xName);\n            }\n\n            if (xTags != null) {\n                localVarHeaderParameter['x-tags'] = String(xTags);\n            }\n\n            if (xAccessPolicies != null) {\n                localVarHeaderParameter['x-access-policies'] = String(xAccessPolicies);\n            }\n\n            if (xIndex != null) {\n                localVarHeaderParameter['x-index'] = typeof xIndex === 'string' \n                    ? xIndex \n                    : JSON.stringify(xIndex);\n            }\n\n            if (contentType != null) {\n                localVarHeaderParameter['Content-Type'] = String(contentType);\n            }\n\n            if (contentLength != null) {\n                localVarHeaderParameter['Content-Length'] = String(contentLength);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createFileBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create integration\n         * @param {CreateIntegrationBody} [createIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIntegration: async (createIntegrationBody?: CreateIntegrationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/integrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createIntegrationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create an IAK\n         * @param {CreateIntegrationApiKeyBody} [createIntegrationApiKeyBody] IAK metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIntegrationApiKey: async (createIntegrationApiKeyBody?: CreateIntegrationApiKeyBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/integrations/iaks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createIntegrationApiKeyBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateMessageBody} [createMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createMessage: async (createMessageBody?: CreateMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/messages`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a PAT\n         * @param {CreatePersonalAccessTokenBody} [createPersonalAccessTokenBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPersonalAccessToken: async (createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/account/pats`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createPersonalAccessTokenBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Initiates the creation of a new table based on the provided schema, excluding system-managed fields like IDs and timestamps.\n         * @param {CreateTableBody} [createTableBody] Schema defining the structure of the new table\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTable: async (createTableBody?: CreateTableBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/tables`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createTableBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Inserts one or multiple new rows into the specified table.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {CreateTableRowsBody} [createTableRowsBody] A batch of new rows to insert into the table. Each row must adhere to the table\u2019s schema. A maximum of 1000 rows can be inserted in a single request.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTableRows: async (table: string, createTableRowsBody?: CreateTableRowsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'table' is not null or undefined\n            assertParamExists('createTableRows', 'table', table)\n            const localVarPath = `/v1/tables/{table}/rows`\n                .replace(`{${\"table\"}}`, encodeURIComponent(String(table)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createTableRowsBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Task](#schema_task). When creating a new [Task](#schema_task), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateTaskBody} [createTaskBody] Task data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTask: async (createTaskBody?: CreateTaskBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/tasks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createTaskBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateUserBody} [createUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser: async (createUserBody?: CreateUserBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/users`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createUserBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create workspace\n         * @param {CreateWorkspaceBody} [createWorkspaceBody] Workspace metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkspace: async (createWorkspaceBody?: CreateWorkspaceBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspaces`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createWorkspaceBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Add a member to the workspace\n         * @param {CreateWorkspaceMemberBody} [createWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkspaceMember: async (createWorkspaceMemberBody?: CreateWorkspaceMemberBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspace-members`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createWorkspaceMemberBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete bot\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBot: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete Bot Issue\n         * @param {string} id Bot ID\n         * @param {string} issueId Issue ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBotIssue: async (id: string, issueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteBotIssue', 'id', id)\n            // verify required parameter 'issueId' is not null or undefined\n            assertParamExists('deleteBotIssue', 'issueId', issueId)\n            const localVarPath = `/v1/admin/bots/{id}/issues/{issueId}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"issueId\"}}`, encodeURIComponent(String(issueId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConversation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteConversation', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes a file.\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteFile', 'id', id)\n            const localVarPath = `/v1/files/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete integration\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteIntegration: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteIntegration', 'id', id)\n            const localVarPath = `/v1/admin/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete an IAK\n         * @param {string} id ID of Integration Api Key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteIntegrationApiKey: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteIntegrationApiKey', 'id', id)\n            const localVarPath = `/v1/admin/integrations/iaks/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {string} id Message id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteMessage: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteMessage', 'id', id)\n            const localVarPath = `/v1/chat/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a PAT\n         * @param {string} id ID of Personal Access Token\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePersonalAccessToken: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deletePersonalAccessToken', 'id', id)\n            const localVarPath = `/v1/admin/account/pats/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a table and all its associated data from the system. Use with caution, as this action cannot be undone.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteTable: async (table: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'table' is not null or undefined\n            assertParamExists('deleteTable', 'table', table)\n            const localVarPath = `/v1/tables/{table}`\n                .replace(`{${\"table\"}}`, encodeURIComponent(String(table)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Allows selective deletion of rows or complete clearance of a table.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {DeleteTableRowsBody} [deleteTableRowsBody] Identifiers of the rows to be deleted.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteTableRows: async (table: string, deleteTableRowsBody?: DeleteTableRowsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'table' is not null or undefined\n            assertParamExists('deleteTableRows', 'table', table)\n            const localVarPath = `/v1/tables/{table}/rows/delete`\n                .replace(`{${\"table\"}}`, encodeURIComponent(String(table)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(deleteTableRowsBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [Task](#schema_task). It cannot be undone.\n         * @param {string} id Task id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteTask: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteTask', 'id', id)\n            const localVarPath = `/v1/chat/tasks/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteUser', 'id', id)\n            const localVarPath = `/v1/chat/users/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkspace: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteWorkspace', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove a member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkspaceMember: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteWorkspaceMember', 'id', id)\n            const localVarPath = `/v1/admin/workspace-members/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Duplicates the table schema & content\n         * @param {string} sourceTableId The table\\&#39;s unique identifier\n         * @param {DuplicateTableBody} [duplicateTableBody] Parameters for the duplication operation.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        duplicateTable: async (sourceTableId: string, duplicateTableBody?: DuplicateTableBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sourceTableId' is not null or undefined\n            assertParamExists('duplicateTable', 'sourceTableId', sourceTableId)\n            const localVarPath = `/v1/tables/{sourceTableId}/duplicate`\n                .replace(`{${\"sourceTableId\"}}`, encodeURIComponent(String(sourceTableId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(duplicateTableBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Enables the search and filtering of rows within a table based on specific criteria. This operation supports complex queries for advanced data manipulation and retrieval.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {FindTableRowsBody} [findTableRowsBody] The search criteria and filters to apply when searching for rows. This includes conditions, search terms, and pagination options.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findTableRows: async (table: string, findTableRowsBody?: FindTableRowsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'table' is not null or undefined\n            assertParamExists('findTableRows', 'table', table)\n            const localVarPath = `/v1/tables/{table}/rows/find`\n                .replace(`{${\"table\"}}`, encodeURIComponent(String(table)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(findTableRowsBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get details of the account authenticating with this endpoint.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAccount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/account/me`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a preference of the account\n         * @param {string} key Preference key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAccountPreference: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getAccountPreference', 'key', key)\n            const localVarPath = `/v1/admin/account/preferences/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * For a user, gets a map of workspace IDs to their highest quota completion rate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllWorkspaceQuotaCompletion: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspaces/usages/quota-completion`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the audit records of a workspace, sorted from most recent to oldest.\n         * @param {string} id Workspace ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAuditRecords: async (id: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getAuditRecords', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/audit-records`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get bot details\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBot: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get bot analytics\n         * @param {string} id Bot ID\n         * @param {string} startDate Start date/time (inclusive)\n         * @param {string} endDate End date/time (exclusive)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotAnalytics: async (id: string, startDate: string, endDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBotAnalytics', 'id', id)\n            // verify required parameter 'startDate' is not null or undefined\n            assertParamExists('getBotAnalytics', 'startDate', startDate)\n            // verify required parameter 'endDate' is not null or undefined\n            assertParamExists('getBotAnalytics', 'endDate', endDate)\n            const localVarPath = `/v1/admin/bots/{id}/analytics`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (startDate !== undefined) {\n                localVarQueryParameter['startDate'] = startDate;\n            }\n\n            if (endDate !== undefined) {\n                localVarQueryParameter['endDate'] = endDate;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get bot logs\n         * @param {string} id Bot ID\n         * @param {string} timeStart Beginning of the time range to get logs from\n         * @param {string} timeEnd End of the time range to get logs from\n         * @param {string} [nextToken] Token to get the next page of logs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotLogs: async (id: string, timeStart: string, timeEnd: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBotLogs', 'id', id)\n            // verify required parameter 'timeStart' is not null or undefined\n            assertParamExists('getBotLogs', 'timeStart', timeStart)\n            // verify required parameter 'timeEnd' is not null or undefined\n            assertParamExists('getBotLogs', 'timeEnd', timeEnd)\n            const localVarPath = `/v1/admin/bots/{id}/logs`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (timeStart !== undefined) {\n                localVarQueryParameter['timeStart'] = timeStart;\n            }\n\n            if (timeEnd !== undefined) {\n                localVarQueryParameter['timeEnd'] = timeEnd;\n            }\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the webchat code/URL for a bot\n         * @param {string} id Bot ID\n         * @param {GetBotWebchatTypeEnum} type type of script to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotWebchat: async (id: string, type: GetBotWebchatTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBotWebchat', 'id', id)\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('getBotWebchat', 'type', type)\n            const localVarPath = `/v1/admin/bots/{id}/webchat`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConversation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getConversation', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Event](#schema_event) object for a valid identifiers.\n         * @param {string} id Event id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEvent: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getEvent', 'id', id)\n            const localVarPath = `/v1/chat/events/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a presigned URL to download the file content.\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFileContent: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getFileContent', 'id', id)\n            const localVarPath = `/v1/files/{id}/content`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get file metadata\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFileMetadata: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getFileMetadata', 'id', id)\n            const localVarPath = `/v1/files/{id}/metadata`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get integration\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegration: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getIntegration', 'id', id)\n            const localVarPath = `/v1/admin/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get integration\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationByName: async (name: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('getIntegrationByName', 'name', name)\n            // verify required parameter 'version' is not null or undefined\n            assertParamExists('getIntegrationByName', 'version', version)\n            const localVarPath = `/v1/admin/integrations/{name}/{version}`\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)))\n                .replace(`{${\"version\"}}`, encodeURIComponent(String(version)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get integration logs\n         * @param {string} id Integration ID\n         * @param {string} timeStart Beginning of the time range to get logs from\n         * @param {string} timeEnd End of the time range to get logs from\n         * @param {string} [nextToken] Token to get the next page of logs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationLogs: async (id: string, timeStart: string, timeEnd: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getIntegrationLogs', 'id', id)\n            // verify required parameter 'timeStart' is not null or undefined\n            assertParamExists('getIntegrationLogs', 'timeStart', timeStart)\n            // verify required parameter 'timeEnd' is not null or undefined\n            assertParamExists('getIntegrationLogs', 'timeEnd', timeEnd)\n            const localVarPath = `/v1/admin/integrations/{id}/logs`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (timeStart !== undefined) {\n                localVarQueryParameter['timeStart'] = timeStart;\n            }\n\n            if (timeEnd !== undefined) {\n                localVarQueryParameter['timeEnd'] = timeEnd;\n            }\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {string} id Id of the Message\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMessage: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMessage', 'id', id)\n            const localVarPath = `/v1/chat/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n         * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateConversation: async (getOrCreateConversationBody?: GetOrCreateConversationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/conversations/get-or-create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n         * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateMessage: async (getOrCreateMessageBody?: GetOrCreateMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/messages/get-or-create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves information about a specific table if it exists; otherwise, creates a new table based on the provided schema.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {GetOrCreateTableBody} [getOrCreateTableBody] Schema defining the structure of the table\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateTable: async (table: string, getOrCreateTableBody?: GetOrCreateTableBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'table' is not null or undefined\n            assertParamExists('getOrCreateTable', 'table', table)\n            const localVarPath = `/v1/tables/{table}`\n                .replace(`{${\"table\"}}`, encodeURIComponent(String(table)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateTableBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n         * @param {GetOrCreateUserBody} [getOrCreateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateUser: async (getOrCreateUserBody?: GetOrCreateUserBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/users/get-or-create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateUserBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers. If the state does not exist, it creates a new state.\n         * @param {GetOrSetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {GetOrSetStateBody} [getOrSetStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrSetState: async (type: GetOrSetStateTypeEnum, id: string, name: string, getOrSetStateBody?: GetOrSetStateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('getOrSetState', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getOrSetState', 'id', id)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('getOrSetState', 'name', name)\n            const localVarPath = `/v1/chat/states/{type}/{id}/{name}/get-or-set`\n                .replace(`{${\"type\"}}`, encodeURIComponent(String(type)))\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrSetStateBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getParticipant: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getParticipant', 'id', id)\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('getParticipant', 'userId', userId)\n            const localVarPath = `/v1/chat/conversations/{id}/participants/{userId}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get public integration by name and version\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegration: async (name: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('getPublicIntegration', 'name', name)\n            // verify required parameter 'version' is not null or undefined\n            assertParamExists('getPublicIntegration', 'version', version)\n            const localVarPath = `/v1/admin/hub/integrations/{name}/{version}`\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)))\n                .replace(`{${\"version\"}}`, encodeURIComponent(String(version)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get public integration by Id\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegrationById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getPublicIntegrationById', 'id', id)\n            const localVarPath = `/v1/admin/hub/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get workspace public details\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicWorkspace: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getPublicWorkspace', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/public`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers.\n         * @param {GetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getState: async (type: GetStateTypeEnum, id: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('getState', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getState', 'id', id)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('getState', 'name', name)\n            const localVarPath = `/v1/chat/states/{type}/{id}/{name}`\n                .replace(`{${\"type\"}}`, encodeURIComponent(String(type)))\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves detailed information about a specific table, identified by its name or unique identifier.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTable: async (table: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'table' is not null or undefined\n            assertParamExists('getTable', 'table', table)\n            const localVarPath = `/v1/tables/{table}`\n                .replace(`{${\"table\"}}`, encodeURIComponent(String(table)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetches a specific row from a table using the row\\'s unique identifier.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {number} id Identifier of the row within the table.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTableRow: async (table: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'table' is not null or undefined\n            assertParamExists('getTableRow', 'table', table)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getTableRow', 'id', id)\n            const localVarPath = `/v1/tables/{table}/row`\n                .replace(`{${\"table\"}}`, encodeURIComponent(String(table)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (id !== undefined) {\n                localVarQueryParameter['id'] = id;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Task](#schema_task) object for a valid identifier.\n         * @param {string} id Task id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTask: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getTask', 'id', id)\n            const localVarPath = `/v1/chat/tasks/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upcoming invoice for workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUpcomingInvoice: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getUpcomingInvoice', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/billing/upcoming-invoice`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get usage\n         * @param {GetUsageTypeEnum} type Type of usage\n         * @param {string} id ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUsage: async (type: GetUsageTypeEnum, id: string, period?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('getUsage', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getUsage', 'id', id)\n            const localVarPath = `/v1/admin/usages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getUser', 'id', id)\n            const localVarPath = `/v1/chat/users/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get workspace details\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspace: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getWorkspace', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get workspace quota\n         * @param {string} id Workspace ID\n         * @param {GetWorkspaceQuotaTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspaceQuota: async (id: string, type: GetWorkspaceQuotaTypeEnum, period?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getWorkspaceQuota', 'id', id)\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('getWorkspaceQuota', 'type', type)\n            const localVarPath = `/v1/admin/workspaces/{id}/quota`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Introspect the API\n         * @param {IntrospectBody} [introspectBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        introspect: async (introspectBody?: IntrospectBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/introspect`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(introspectBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List activities of a task\n         * @param {string} taskId ID of the task to list activities for\n         * @param {string} botId ID of the bot to list activities for\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listActivities: async (taskId: string, botId: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'taskId' is not null or undefined\n            assertParamExists('listActivities', 'taskId', taskId)\n            // verify required parameter 'botId' is not null or undefined\n            assertParamExists('listActivities', 'botId', botId)\n            const localVarPath = `/v1/admin/activities`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (taskId !== undefined) {\n                localVarQueryParameter['taskId'] = taskId;\n            }\n\n            if (botId !== undefined) {\n                localVarQueryParameter['botId'] = botId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Events for a Bot Issue\n         * @param {string} id Bot ID\n         * @param {string} issueId Issue ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBotIssueEvents: async (id: string, issueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listBotIssueEvents', 'id', id)\n            // verify required parameter 'issueId' is not null or undefined\n            assertParamExists('listBotIssueEvents', 'issueId', issueId)\n            const localVarPath = `/v1/admin/bots/{id}/issues/{issueId}/events`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"issueId\"}}`, encodeURIComponent(String(issueId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Bot Issues\n         * @param {string} id Bot ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBotIssues: async (id: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listBotIssues', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}/issues`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List bots\n         * @param {boolean} [dev] If true, only dev bots are returned. Otherwise, only production bots are returned.\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBots: async (dev?: boolean, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/bots`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (dev !== undefined) {\n                localVarQueryParameter['dev'] = dev;\n            }\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {Array<string>} [participantIds] Filter by participant ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConversations: async (nextToken?: string, tags?: { [key: string]: string; }, participantIds?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/conversations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n            if (participantIds) {\n                localVarQueryParameter['participantIds'] = participantIds;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [type] Filter by event type\n         * @param {string} [conversationId] Filter by conversation id\n         * @param {string} [userId] Filter by user id\n         * @param {string} [messageId] Filter by message id\n         * @param {string} [status] Filter by status. Allowed values: pending, ignored, processed, failed.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listEvents: async (nextToken?: string, type?: string, conversationId?: string, userId?: string, messageId?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/events`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (conversationId !== undefined) {\n                localVarQueryParameter['conversationId'] = conversationId;\n            }\n\n            if (userId !== undefined) {\n                localVarQueryParameter['userId'] = userId;\n            }\n\n            if (messageId !== undefined) {\n                localVarQueryParameter['messageId'] = messageId;\n            }\n\n            if (status !== undefined) {\n                localVarQueryParameter['status'] = status;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List files for bot\n         * @param {string} botId Bot ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles: async (botId: string, nextToken?: string, tags?: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'botId' is not null or undefined\n            assertParamExists('listFiles', 'botId', botId)\n            const localVarPath = `/v1/files/bot/{botId}`\n                .replace(`{${\"botId\"}}`, encodeURIComponent(String(botId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List IAKs (Integration Api Keys) of an integration\n         * @param {string} integrationVersionId ID of the integration version\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listIntegrationApiKeys: async (integrationVersionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'integrationVersionId' is not null or undefined\n            assertParamExists('listIntegrationApiKeys', 'integrationVersionId', integrationVersionId)\n            const localVarPath = `/v1/admin/integrations/iaks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (integrationVersionId !== undefined) {\n                localVarQueryParameter['integrationVersionId'] = integrationVersionId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List integrations\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {boolean} [dev] If true, only dev integrations are returned. Otherwise, only production integrations are returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listIntegrations: async (nextToken?: string, name?: string, version?: string, dev?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/integrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (version !== undefined) {\n                localVarQueryParameter['version'] = version;\n            }\n\n            if (dev !== undefined) {\n                localVarQueryParameter['dev'] = dev;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Conversation id\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listMessages: async (nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/messages`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (conversationId !== undefined) {\n                localVarQueryParameter['conversationId'] = conversationId;\n            }\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listParticipants: async (id: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listParticipants', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}/participants`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List PATs (Personal Access Tokens) of account.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPersonalAccessTokens: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/account/pats`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List public integration\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPublicIntegrations: async (nextToken?: string, name?: string, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/hub/integrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (version !== undefined) {\n                localVarQueryParameter['version'] = version;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of all tables associated with your bot.\n         * @param {{ [key: string]: string; }} [tags] Optional filters to narrow down the list by tags associated with tables.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTables: async (tags?: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/tables`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [Task](#schema_task) you\\'ve previously created. The tasks are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {string} [conversationId] Conversation id\n         * @param {string} [userId] User id\n         * @param {string} [parentTaskId] Parent task id\n         * @param {Array<ListTasksStatusEnum>} [status] Status\n         * @param {string} [type] Type\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTasks: async (nextToken?: string, tags?: { [key: string]: string; }, conversationId?: string, userId?: string, parentTaskId?: string, status?: Array<ListTasksStatusEnum>, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/tasks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n            if (conversationId !== undefined) {\n                localVarQueryParameter['conversationId'] = conversationId;\n            }\n\n            if (userId !== undefined) {\n                localVarQueryParameter['userId'] = userId;\n            }\n\n            if (parentTaskId !== undefined) {\n                localVarQueryParameter['parentTaskId'] = parentTaskId;\n            }\n\n            if (status) {\n                localVarQueryParameter['status'] = status;\n            }\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get usage history\n         * @param {ListUsageHistoryTypeEnum} type Type of usage\n         * @param {string} id ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsageHistory: async (type: ListUsageHistoryTypeEnum, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('listUsageHistory', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listUsageHistory', 'id', id)\n            const localVarPath = `/v1/admin/usages/{id}/history`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Filter by conversation id. This will return all users that have participated in the conversation.\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsers: async (nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/users`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (conversationId !== undefined) {\n                localVarQueryParameter['conversationId'] = conversationId;\n            }\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List invoices billed to workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceInvoices: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listWorkspaceInvoices', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/billing/invoices`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Lists all the members in a workspace\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceMembers: async (nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspace-members`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List workspace quotas\n         * @param {string} id Workspace ID\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceQuotas: async (id: string, period?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listWorkspaceQuotas', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/quotas`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List workspace usages\n         * @param {string} id Workspace ID\n         * @param {ListWorkspaceUsagesTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceUsages: async (id: string, type: ListWorkspaceUsagesTypeEnum, period?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listWorkspaceUsages', 'id', id)\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('listWorkspaceUsages', 'type', type)\n            const localVarPath = `/v1/admin/workspaces/{id}/usages`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List workspaces the user has access to\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaces: async (nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspaces`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {PatchStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {PatchStateBody} [patchStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchState: async (type: PatchStateTypeEnum, id: string, name: string, patchStateBody?: PatchStateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('patchState', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('patchState', 'id', id)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('patchState', 'name', name)\n            const localVarPath = `/v1/chat/states/{type}/{id}/{name}`\n                .replace(`{${\"type\"}}`, encodeURIComponent(String(type)))\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(patchStateBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeParticipant: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('removeParticipant', 'id', id)\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('removeParticipant', 'userId', userId)\n            const localVarPath = `/v1/chat/conversations/{id}/participants/{userId}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Renames an existing column within a table to better reflect its content or usage. The operation targets a specific table and requires the current and new column names.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {RenameTableColumnBody} [renameTableColumnBody] Details of the column to be renamed, including its current name and the desired new name.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        renameTableColumn: async (table: string, renameTableColumnBody?: RenameTableColumnBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'table' is not null or undefined\n            assertParamExists('renameTableColumn', 'table', table)\n            const localVarPath = `/v1/tables/{table}/column`\n                .replace(`{${\"table\"}}`, encodeURIComponent(String(table)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(renameTableColumnBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Run a VRL script\n         * @param {RunVrlBody} [runVrlBody] VRL script\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        runVrl: async (runVrlBody?: RunVrlBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/helper/vrl`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(runVrlBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Search files\n         * @param {string} botId Bot ID\n         * @param {string} query Query expressed in natural language to retrieve matching text passages within all indexed files in the bot using semantical search.\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {number} [contextDepth] The number of neighbor passages to prepend and append as surrounding context to the content of each returned passage. Default: 0, Maximum: 10\n         * @param {number} [limit] The maximum number of passages to return.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchFiles: async (botId: string, query: string, tags?: { [key: string]: string; }, contextDepth?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'botId' is not null or undefined\n            assertParamExists('searchFiles', 'botId', botId)\n            // verify required parameter 'query' is not null or undefined\n            assertParamExists('searchFiles', 'query', query)\n            const localVarPath = `/v1/files/bot/{botId}/search`\n                .replace(`{${\"botId\"}}`, encodeURIComponent(String(botId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n            if (query !== undefined) {\n                localVarQueryParameter['query'] = query;\n            }\n\n            if (contextDepth !== undefined) {\n                localVarQueryParameter['contextDepth'] = contextDepth;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Set a preference for the account\n         * @param {string} key Preference key\n         * @param {SetAccountPreferenceBody} [setAccountPreferenceBody] Preference value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setAccountPreference: async (key: string, setAccountPreferenceBody?: SetAccountPreferenceBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('setAccountPreference', 'key', key)\n            const localVarPath = `/v1/admin/account/preferences/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(setAccountPreferenceBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {SetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {SetStateBody} [setStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setState: async (type: SetStateTypeEnum, id: string, name: string, setStateBody?: SetStateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('setState', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('setState', 'id', id)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('setState', 'name', name)\n            const localVarPath = `/v1/chat/states/{type}/{id}/{name}`\n                .replace(`{${\"type\"}}`, encodeURIComponent(String(type)))\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(setStateBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.\n         * @param {string} id Workspace ID\n         * @param {SetWorkspacePaymentMethodBody} [setWorkspacePaymentMethodBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setWorkspacePaymentMethod: async (id: string, setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('setWorkspacePaymentMethod', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/billing/payment-method`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(setWorkspacePaymentMethodBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n         * @param {string} id Bot ID\n         * @param {TransferBotBody} [transferBotBody] Bot transfer request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferBot: async (id: string, transferBotBody?: TransferBotBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('transferBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}/transfer`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferBotBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update details of the account associated with authenticated user\n         * @param {UpdateAccountBody} [updateAccountBody] Account Data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateAccount: async (updateAccountBody?: UpdateAccountBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/account/me`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateAccountBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update bot\n         * @param {string} id Bot ID\n         * @param {UpdateBotBody} [updateBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBot: async (id: string, updateBotBody?: UpdateBotBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateBotBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id Conversation id\n         * @param {UpdateConversationBody} [updateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateConversation: async (id: string, updateConversationBody?: UpdateConversationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateConversation', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update file metadata\n         * @param {string} id File ID\n         * @param {UpdateFileMetadataBody} [updateFileMetadataBody] File metadata to update.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateFileMetadata: async (id: string, updateFileMetadataBody?: UpdateFileMetadataBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateFileMetadata', 'id', id)\n            const localVarPath = `/v1/files/{id}/metadata`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateFileMetadataBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update integration\n         * @param {string} id Integration ID\n         * @param {UpdateIntegrationBody} [updateIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIntegration: async (id: string, updateIntegrationBody?: UpdateIntegrationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateIntegration', 'id', id)\n            const localVarPath = `/v1/admin/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateIntegrationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a message\n         * @param {string} id Message id\n         * @param {UpdateMessageBody} [updateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMessage: async (id: string, updateMessageBody?: UpdateMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateMessage', 'id', id)\n            const localVarPath = `/v1/chat/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Updates the schema or the name of an existing table.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {UpdateTableBody} [updateTableBody] The updated schema/name of the table.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateTable: async (table: string, updateTableBody?: UpdateTableBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'table' is not null or undefined\n            assertParamExists('updateTable', 'table', table)\n            const localVarPath = `/v1/tables/{table}`\n                .replace(`{${\"table\"}}`, encodeURIComponent(String(table)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateTableBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Updates specified rows in a table, allowing partial success with detailed feedback on errors.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {UpdateTableRowsBody} [updateTableRowsBody] Data for rows to update, including IDs. Errors affect only specific rows, not the entire batch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateTableRows: async (table: string, updateTableRowsBody?: UpdateTableRowsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'table' is not null or undefined\n            assertParamExists('updateTableRows', 'table', table)\n            const localVarPath = `/v1/tables/{table}/rows`\n                .replace(`{${\"table\"}}`, encodeURIComponent(String(table)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateTableRowsBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a [Task](#schema_task) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id Task id\n         * @param {UpdateTaskBody} [updateTaskBody] Task data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateTask: async (id: string, updateTaskBody?: UpdateTaskBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateTask', 'id', id)\n            const localVarPath = `/v1/chat/tasks/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateTaskBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id User ID\n         * @param {UpdateUserBody} [updateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser: async (id: string, updateUserBody?: UpdateUserBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateUser', 'id', id)\n            const localVarPath = `/v1/chat/users/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateUserBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update workspace\n         * @param {string} id Workspace ID\n         * @param {UpdateWorkspaceBody} [updateWorkspaceBody] Workspace metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspace: async (id: string, updateWorkspaceBody?: UpdateWorkspaceBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateWorkspace', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkspaceBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {UpdateWorkspaceMemberBody} [updateWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspaceMember: async (id: string, updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateWorkspaceMember', 'id', id)\n            const localVarPath = `/v1/admin/workspace-members/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkspaceMemberBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Inserts or updates rows based on a key. If a row exists, it is updated; otherwise, a new row is created.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {UpsertTableRowsBody} [upsertTableRowsBody] Rows for insertion or update, with a key column to determine action. Supports partial successes.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        upsertTableRows: async (table: string, upsertTableRowsBody?: UpsertTableRowsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'table' is not null or undefined\n            assertParamExists('upsertTableRows', 'table', table)\n            const localVarPath = `/v1/tables/{table}/rows/upsert`\n                .replace(`{${\"table\"}}`, encodeURIComponent(String(table)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(upsertTableRowsBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {AddParticipantBody} [addParticipantBody] Participant data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addParticipant(id: string, addParticipantBody?: AddParticipantBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddParticipantResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addParticipant(id, addParticipantBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Break down workspace usage by bot\n         * @param {string} id Workspace ID\n         * @param {BreakDownWorkspaceUsageByBotTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async breakDownWorkspaceUsageByBot(id: string, type: BreakDownWorkspaceUsageByBotTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BreakDownWorkspaceUsageByBotResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.breakDownWorkspaceUsageByBot(id, type, period, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Call an action\n         * @param {CallActionBody} [callActionBody] Action payload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async callAction(callActionBody?: CallActionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallActionResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.callAction(callActionBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Change AI Spend quota\n         * @param {ChangeAISpendQuotaBody} [changeAISpendQuotaBody] New AI Spend quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changeAISpendQuota(changeAISpendQuotaBody?: ChangeAISpendQuotaBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAISpendQuota(changeAISpendQuotaBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Change workspace billing plan\n         * @param {string} id Workspace ID\n         * @param {ChangeWorkspacePlanBody} [changeWorkspacePlanBody] Billing plan to change the workspace to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changeWorkspacePlan(id: string, changeWorkspacePlanBody?: ChangeWorkspacePlanBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeWorkspacePlanResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.changeWorkspacePlan(id, changeWorkspacePlanBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Charge unpaid invoices of a workspace.\n         * @param {string} id Workspace ID\n         * @param {ChargeWorkspaceUnpaidInvoicesBody} [chargeWorkspaceUnpaidInvoicesBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async chargeWorkspaceUnpaidInvoices(id: string, chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeWorkspaceUnpaidInvoicesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.chargeWorkspaceUnpaidInvoices(id, chargeWorkspaceUnpaidInvoicesBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if a workspace handle is available\n         * @param {CheckHandleAvailabilityBody} [checkHandleAvailabilityBody] Workspace handle availability\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async checkHandleAvailability(checkHandleAvailabilityBody?: CheckHandleAvailabilityBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckHandleAvailabilityResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.checkHandleAvailability(checkHandleAvailabilityBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * An integration can call this endpoint to configure itself\n         * @param {ConfigureIntegrationBody} [configureIntegrationBody] Configuration of the integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async configureIntegration(configureIntegrationBody?: ConfigureIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.configureIntegration(configureIntegrationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create bot\n         * @param {CreateBotBody} [createBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createBot(createBotBody?: CreateBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBotResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createBot(createBotBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateConversationBody} [createConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createConversation(createConversationBody?: CreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createConversation(createConversationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateEventBody} [createEventBody] Event data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createEvent(createEventBody?: CreateEventBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(createEventBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a file.\n         * @param {string} [xName] File name\n         * @param {string} [xTags] File tags as URL-encoded JSON string representing an object of key-value pairs.\n         * @param {string} [xAccessPolicies] File access policies, comma-separated. Add \\&quot;public_content\\&quot; to allow public access to the file content. Add \\&quot;integrations\\&quot; to allo read, search and list operations for any integration installed in the bot.\n         * @param {boolean} [xIndex] Set to a value of \\&quot;true\\&quot; to index the file in vector storage (default: false). Only PDFs, Office documents, and text-based files are currently supported. Note that if a file is indexed, it will count towards the Vector Storage quota of the workspace rather than the File Storage quota.\n         * @param {string} [contentType] File content type. If omitted, the content type will be inferred from the file extension. If a type cannot be inferred, the default is \\&quot;application/octet-stream\\&quot;.\n         * @param {string} [contentLength] File content length\n         * @param {CreateFileBody} [createFileBody] The file to upload.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createFile(xName?: string, xTags?: string, xAccessPolicies?: string, xIndex?: boolean, contentType?: string, contentLength?: string, createFileBody?: CreateFileBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFileResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createFile(xName, xTags, xAccessPolicies, xIndex, contentType, contentLength, createFileBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create integration\n         * @param {CreateIntegrationBody} [createIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createIntegration(createIntegrationBody?: CreateIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createIntegration(createIntegrationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create an IAK\n         * @param {CreateIntegrationApiKeyBody} [createIntegrationApiKeyBody] IAK metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createIntegrationApiKey(createIntegrationApiKeyBody?: CreateIntegrationApiKeyBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIntegrationApiKeyResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createIntegrationApiKey(createIntegrationApiKeyBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateMessageBody} [createMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createMessage(createMessageBody?: CreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessage(createMessageBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a PAT\n         * @param {CreatePersonalAccessTokenBody} [createPersonalAccessTokenBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createPersonalAccessToken(createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePersonalAccessTokenResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createPersonalAccessToken(createPersonalAccessTokenBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Initiates the creation of a new table based on the provided schema, excluding system-managed fields like IDs and timestamps.\n         * @param {CreateTableBody} [createTableBody] Schema defining the structure of the new table\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTable(createTableBody?: CreateTableBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTableResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTable(createTableBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Inserts one or multiple new rows into the specified table.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {CreateTableRowsBody} [createTableRowsBody] A batch of new rows to insert into the table. Each row must adhere to the table\u2019s schema. A maximum of 1000 rows can be inserted in a single request.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTableRows(table: string, createTableRowsBody?: CreateTableRowsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTableRowsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTableRows(table, createTableRowsBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Task](#schema_task). When creating a new [Task](#schema_task), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateTaskBody} [createTaskBody] Task data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createTask(createTaskBody?: CreateTaskBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTaskResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(createTaskBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateUserBody} [createUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createUser(createUserBody?: CreateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create workspace\n         * @param {CreateWorkspaceBody} [createWorkspaceBody] Workspace metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWorkspace(createWorkspaceBody?: CreateWorkspaceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkspaceResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkspace(createWorkspaceBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Add a member to the workspace\n         * @param {CreateWorkspaceMemberBody} [createWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWorkspaceMember(createWorkspaceMemberBody?: CreateWorkspaceMemberBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkspaceMemberResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkspaceMember(createWorkspaceMemberBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete bot\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteBot(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBot(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete Bot Issue\n         * @param {string} id Bot ID\n         * @param {string} issueId Issue ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteBotIssue(id: string, issueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBotIssue(id, issueId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteConversation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConversation(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Deletes a file.\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete integration\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteIntegration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIntegration(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete an IAK\n         * @param {string} id ID of Integration Api Key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteIntegrationApiKey(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIntegrationApiKey(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {string} id Message id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteMessage(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a PAT\n         * @param {string} id ID of Personal Access Token\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deletePersonalAccessToken(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePersonalAccessToken(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Permanently deletes a table and all its associated data from the system. Use with caution, as this action cannot be undone.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteTable(table: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTable(table, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Allows selective deletion of rows or complete clearance of a table.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {DeleteTableRowsBody} [deleteTableRowsBody] Identifiers of the rows to be deleted.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteTableRows(table: string, deleteTableRowsBody?: DeleteTableRowsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteTableRowsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTableRows(table, deleteTableRowsBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Permanently deletes a [Task](#schema_task). It cannot be undone.\n         * @param {string} id Task id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteTask(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTask(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWorkspace(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkspace(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Remove a member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWorkspaceMember(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkspaceMember(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Duplicates the table schema & content\n         * @param {string} sourceTableId The table\\&#39;s unique identifier\n         * @param {DuplicateTableBody} [duplicateTableBody] Parameters for the duplication operation.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async duplicateTable(sourceTableId: string, duplicateTableBody?: DuplicateTableBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DuplicateTableResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.duplicateTable(sourceTableId, duplicateTableBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Enables the search and filtering of rows within a table based on specific criteria. This operation supports complex queries for advanced data manipulation and retrieval.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {FindTableRowsBody} [findTableRowsBody] The search criteria and filters to apply when searching for rows. This includes conditions, search terms, and pagination options.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findTableRows(table: string, findTableRowsBody?: FindTableRowsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTableRowsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findTableRows(table, findTableRowsBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get details of the account authenticating with this endpoint.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAccount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a preference of the account\n         * @param {string} key Preference key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAccountPreference(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountPreferenceResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountPreference(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * For a user, gets a map of workspace IDs to their highest quota completion rate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAllWorkspaceQuotaCompletion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: GetAllWorkspaceQuotaCompletionResponse; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllWorkspaceQuotaCompletion(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the audit records of a workspace, sorted from most recent to oldest.\n         * @param {string} id Workspace ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAuditRecords(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAuditRecordsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuditRecords(id, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get bot details\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBot(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBot(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get bot analytics\n         * @param {string} id Bot ID\n         * @param {string} startDate Start date/time (inclusive)\n         * @param {string} endDate End date/time (exclusive)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBotAnalytics(id: string, startDate: string, endDate: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotAnalyticsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBotAnalytics(id, startDate, endDate, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get bot logs\n         * @param {string} id Bot ID\n         * @param {string} timeStart Beginning of the time range to get logs from\n         * @param {string} timeEnd End of the time range to get logs from\n         * @param {string} [nextToken] Token to get the next page of logs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBotLogs(id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotLogsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBotLogs(id, timeStart, timeEnd, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the webchat code/URL for a bot\n         * @param {string} id Bot ID\n         * @param {GetBotWebchatTypeEnum} type type of script to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBotWebchat(id: string, type: GetBotWebchatTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotWebchatResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBotWebchat(id, type, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getConversation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversation(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Event](#schema_event) object for a valid identifiers.\n         * @param {string} id Event id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEvent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a presigned URL to download the file content.\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFileContent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileContentResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileContent(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get file metadata\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFileMetadata(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileMetadataResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileMetadata(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get integration\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getIntegration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegration(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get integration\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getIntegrationByName(name: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationByNameResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationByName(name, version, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get integration logs\n         * @param {string} id Integration ID\n         * @param {string} timeStart Beginning of the time range to get logs from\n         * @param {string} timeEnd End of the time range to get logs from\n         * @param {string} [nextToken] Token to get the next page of logs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getIntegrationLogs(id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationLogsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationLogs(id, timeStart, timeEnd, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {string} id Id of the Message\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMessage(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n         * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateConversation(getOrCreateConversationBody?: GetOrCreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateConversation(getOrCreateConversationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n         * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateMessage(getOrCreateMessageBody?: GetOrCreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateMessage(getOrCreateMessageBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves information about a specific table if it exists; otherwise, creates a new table based on the provided schema.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {GetOrCreateTableBody} [getOrCreateTableBody] Schema defining the structure of the table\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateTable(table: string, getOrCreateTableBody?: GetOrCreateTableBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateTableResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateTable(table, getOrCreateTableBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n         * @param {GetOrCreateUserBody} [getOrCreateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateUser(getOrCreateUserBody?: GetOrCreateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateUser(getOrCreateUserBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers. If the state does not exist, it creates a new state.\n         * @param {GetOrSetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {GetOrSetStateBody} [getOrSetStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrSetState(type: GetOrSetStateTypeEnum, id: string, name: string, getOrSetStateBody?: GetOrSetStateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrSetStateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrSetState(type, id, name, getOrSetStateBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getParticipant(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetParticipantResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipant(id, userId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get public integration by name and version\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPublicIntegration(name: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicIntegration(name, version, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get public integration by Id\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPublicIntegrationById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicIntegrationByIdResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicIntegrationById(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get workspace public details\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPublicWorkspace(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicWorkspaceResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicWorkspace(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers.\n         * @param {GetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getState(type: GetStateTypeEnum, id: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getState(type, id, name, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves detailed information about a specific table, identified by its name or unique identifier.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTable(table: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTableResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTable(table, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Fetches a specific row from a table using the row\\'s unique identifier.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {number} id Identifier of the row within the table.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTableRow(table: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTableRowResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTableRow(table, id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Task](#schema_task) object for a valid identifier.\n         * @param {string} id Task id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTask(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTaskResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTask(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upcoming invoice for workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUpcomingInvoice(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUpcomingInvoiceResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUpcomingInvoice(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get usage\n         * @param {GetUsageTypeEnum} type Type of usage\n         * @param {string} id ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUsage(type: GetUsageTypeEnum, id: string, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsage(type, id, period, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get workspace details\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkspace(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkspaceResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspace(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get workspace quota\n         * @param {string} id Workspace ID\n         * @param {GetWorkspaceQuotaTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkspaceQuota(id: string, type: GetWorkspaceQuotaTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkspaceQuotaResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspaceQuota(id, type, period, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Introspect the API\n         * @param {IntrospectBody} [introspectBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async introspect(introspectBody?: IntrospectBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntrospectResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.introspect(introspectBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List activities of a task\n         * @param {string} taskId ID of the task to list activities for\n         * @param {string} botId ID of the bot to list activities for\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listActivities(taskId: string, botId: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListActivitiesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listActivities(taskId, botId, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List Events for a Bot Issue\n         * @param {string} id Bot ID\n         * @param {string} issueId Issue ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listBotIssueEvents(id: string, issueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotIssueEventsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listBotIssueEvents(id, issueId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List Bot Issues\n         * @param {string} id Bot ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listBotIssues(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotIssuesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listBotIssues(id, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List bots\n         * @param {boolean} [dev] If true, only dev bots are returned. Otherwise, only production bots are returned.\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listBots(dev?: boolean, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listBots(dev, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {Array<string>} [participantIds] Filter by participant ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listConversations(nextToken?: string, tags?: { [key: string]: string; }, participantIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListConversationsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listConversations(nextToken, tags, participantIds, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [type] Filter by event type\n         * @param {string} [conversationId] Filter by conversation id\n         * @param {string} [userId] Filter by user id\n         * @param {string} [messageId] Filter by message id\n         * @param {string} [status] Filter by status. Allowed values: pending, ignored, processed, failed.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listEvents(nextToken?: string, type?: string, conversationId?: string, userId?: string, messageId?: string, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEventsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvents(nextToken, type, conversationId, userId, messageId, status, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List files for bot\n         * @param {string} botId Bot ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listFiles(botId: string, nextToken?: string, tags?: { [key: string]: string; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFilesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listFiles(botId, nextToken, tags, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List IAKs (Integration Api Keys) of an integration\n         * @param {string} integrationVersionId ID of the integration version\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listIntegrationApiKeys(integrationVersionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIntegrationApiKeysResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listIntegrationApiKeys(integrationVersionId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List integrations\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {boolean} [dev] If true, only dev integrations are returned. Otherwise, only production integrations are returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listIntegrations(nextToken?: string, name?: string, version?: string, dev?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIntegrationsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listIntegrations(nextToken, name, version, dev, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Conversation id\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listMessages(nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMessagesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listMessages(nextToken, conversationId, tags, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listParticipants(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListParticipantsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listParticipants(id, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List PATs (Personal Access Tokens) of account.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listPersonalAccessTokens(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPersonalAccessTokensResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listPersonalAccessTokens(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List public integration\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listPublicIntegrations(nextToken?: string, name?: string, version?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPublicIntegrationsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listPublicIntegrations(nextToken, name, version, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of all tables associated with your bot.\n         * @param {{ [key: string]: string; }} [tags] Optional filters to narrow down the list by tags associated with tables.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listTables(tags?: { [key: string]: string; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTablesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listTables(tags, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of [Task](#schema_task) you\\'ve previously created. The tasks are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {string} [conversationId] Conversation id\n         * @param {string} [userId] User id\n         * @param {string} [parentTaskId] Parent task id\n         * @param {Array<ListTasksStatusEnum>} [status] Status\n         * @param {string} [type] Type\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listTasks(nextToken?: string, tags?: { [key: string]: string; }, conversationId?: string, userId?: string, parentTaskId?: string, status?: Array<ListTasksStatusEnum>, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTasksResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listTasks(nextToken, tags, conversationId, userId, parentTaskId, status, type, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get usage history\n         * @param {ListUsageHistoryTypeEnum} type Type of usage\n         * @param {string} id ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listUsageHistory(type: ListUsageHistoryTypeEnum, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsageHistoryResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsageHistory(type, id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Filter by conversation id. This will return all users that have participated in the conversation.\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listUsers(nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsersResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(nextToken, conversationId, tags, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List invoices billed to workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaceInvoices(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceInvoicesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceInvoices(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Lists all the members in a workspace\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaceMembers(nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceMembersResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceMembers(nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List workspace quotas\n         * @param {string} id Workspace ID\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaceQuotas(id: string, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceQuotasResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceQuotas(id, period, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List workspace usages\n         * @param {string} id Workspace ID\n         * @param {ListWorkspaceUsagesTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaceUsages(id: string, type: ListWorkspaceUsagesTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceUsagesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceUsages(id, type, period, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List workspaces the user has access to\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaces(nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspacesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaces(nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {PatchStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {PatchStateBody} [patchStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async patchState(type: PatchStateTypeEnum, id: string, name: string, patchStateBody?: PatchStateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchStateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.patchState(type, id, name, patchStateBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async removeParticipant(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.removeParticipant(id, userId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Renames an existing column within a table to better reflect its content or usage. The operation targets a specific table and requires the current and new column names.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {RenameTableColumnBody} [renameTableColumnBody] Details of the column to be renamed, including its current name and the desired new name.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async renameTableColumn(table: string, renameTableColumnBody?: RenameTableColumnBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RenameTableColumnResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.renameTableColumn(table, renameTableColumnBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Run a VRL script\n         * @param {RunVrlBody} [runVrlBody] VRL script\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async runVrl(runVrlBody?: RunVrlBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunVrlResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.runVrl(runVrlBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Search files\n         * @param {string} botId Bot ID\n         * @param {string} query Query expressed in natural language to retrieve matching text passages within all indexed files in the bot using semantical search.\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {number} [contextDepth] The number of neighbor passages to prepend and append as surrounding context to the content of each returned passage. Default: 0, Maximum: 10\n         * @param {number} [limit] The maximum number of passages to return.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async searchFiles(botId: string, query: string, tags?: { [key: string]: string; }, contextDepth?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFilesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFiles(botId, query, tags, contextDepth, limit, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Set a preference for the account\n         * @param {string} key Preference key\n         * @param {SetAccountPreferenceBody} [setAccountPreferenceBody] Preference value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async setAccountPreference(key: string, setAccountPreferenceBody?: SetAccountPreferenceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.setAccountPreference(key, setAccountPreferenceBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {SetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {SetStateBody} [setStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async setState(type: SetStateTypeEnum, id: string, name: string, setStateBody?: SetStateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetStateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.setState(type, id, name, setStateBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.\n         * @param {string} id Workspace ID\n         * @param {SetWorkspacePaymentMethodBody} [setWorkspacePaymentMethodBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async setWorkspacePaymentMethod(id: string, setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWorkspacePaymentMethodResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.setWorkspacePaymentMethod(id, setWorkspacePaymentMethodBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n         * @param {string} id Bot ID\n         * @param {TransferBotBody} [transferBotBody] Bot transfer request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferBot(id: string, transferBotBody?: TransferBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferBot(id, transferBotBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update details of the account associated with authenticated user\n         * @param {UpdateAccountBody} [updateAccountBody] Account Data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateAccount(updateAccountBody?: UpdateAccountBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccountResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(updateAccountBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update bot\n         * @param {string} id Bot ID\n         * @param {UpdateBotBody} [updateBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateBot(id: string, updateBotBody?: UpdateBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBotResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBot(id, updateBotBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id Conversation id\n         * @param {UpdateConversationBody} [updateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateConversation(id: string, updateConversationBody?: UpdateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConversation(id, updateConversationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update file metadata\n         * @param {string} id File ID\n         * @param {UpdateFileMetadataBody} [updateFileMetadataBody] File metadata to update.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateFileMetadata(id: string, updateFileMetadataBody?: UpdateFileMetadataBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateFileMetadataResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFileMetadata(id, updateFileMetadataBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update integration\n         * @param {string} id Integration ID\n         * @param {UpdateIntegrationBody} [updateIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateIntegration(id: string, updateIntegrationBody?: UpdateIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIntegration(id, updateIntegrationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a message\n         * @param {string} id Message id\n         * @param {UpdateMessageBody} [updateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateMessage(id: string, updateMessageBody?: UpdateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessage(id, updateMessageBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Updates the schema or the name of an existing table.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {UpdateTableBody} [updateTableBody] The updated schema/name of the table.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateTable(table: string, updateTableBody?: UpdateTableBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateTableResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTable(table, updateTableBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Updates specified rows in a table, allowing partial success with detailed feedback on errors.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {UpdateTableRowsBody} [updateTableRowsBody] Data for rows to update, including IDs. Errors affect only specific rows, not the entire batch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateTableRows(table: string, updateTableRowsBody?: UpdateTableRowsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateTableRowsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTableRows(table, updateTableRowsBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a [Task](#schema_task) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id Task id\n         * @param {UpdateTaskBody} [updateTaskBody] Task data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateTask(id: string, updateTaskBody?: UpdateTaskBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateTaskResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(id, updateTaskBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id User ID\n         * @param {UpdateUserBody} [updateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUser(id: string, updateUserBody?: UpdateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, updateUserBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update workspace\n         * @param {string} id Workspace ID\n         * @param {UpdateWorkspaceBody} [updateWorkspaceBody] Workspace metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWorkspace(id: string, updateWorkspaceBody?: UpdateWorkspaceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkspaceResponse1>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkspace(id, updateWorkspaceBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {UpdateWorkspaceMemberBody} [updateWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWorkspaceMember(id: string, updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkspaceMemberResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkspaceMember(id, updateWorkspaceMemberBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Inserts or updates rows based on a key. If a row exists, it is updated; otherwise, a new row is created.\n         * @param {string} table The table\\&#39;s name or unique identifier for targeting specific table operations.\n         * @param {UpsertTableRowsBody} [upsertTableRowsBody] Rows for insertion or update, with a key column to determine action. Supports partial successes.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async upsertTableRows(table: string, upsertTableRowsBody?: UpsertTableRowsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpsertTableRowsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertTableRows(table, upsertTableRowsBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).\n         * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<AddParticipantResponse> {\n            return localVarFp.addParticipant(requestParameters.id, requestParameters.addParticipantBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Break down workspace usage by bot\n         * @param {DefaultApiBreakDownWorkspaceUsageByBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        breakDownWorkspaceUsageByBot(requestParameters: DefaultApiBreakDownWorkspaceUsageByBotRequest, options?: AxiosRequestConfig): AxiosPromise<BreakDownWorkspaceUsageByBotResponse> {\n            return localVarFp.breakDownWorkspaceUsageByBot(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Call an action\n         * @param {DefaultApiCallActionRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        callAction(requestParameters: DefaultApiCallActionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CallActionResponse> {\n            return localVarFp.callAction(requestParameters.callActionBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Change AI Spend quota\n         * @param {DefaultApiChangeAISpendQuotaRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changeAISpendQuota(requestParameters: DefaultApiChangeAISpendQuotaRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.changeAISpendQuota(requestParameters.changeAISpendQuotaBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Change workspace billing plan\n         * @param {DefaultApiChangeWorkspacePlanRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changeWorkspacePlan(requestParameters: DefaultApiChangeWorkspacePlanRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeWorkspacePlanResponse> {\n            return localVarFp.changeWorkspacePlan(requestParameters.id, requestParameters.changeWorkspacePlanBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Charge unpaid invoices of a workspace.\n         * @param {DefaultApiChargeWorkspaceUnpaidInvoicesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        chargeWorkspaceUnpaidInvoices(requestParameters: DefaultApiChargeWorkspaceUnpaidInvoicesRequest, options?: AxiosRequestConfig): AxiosPromise<ChargeWorkspaceUnpaidInvoicesResponse> {\n            return localVarFp.chargeWorkspaceUnpaidInvoices(requestParameters.id, requestParameters.chargeWorkspaceUnpaidInvoicesBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if a workspace handle is available\n         * @param {DefaultApiCheckHandleAvailabilityRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        checkHandleAvailability(requestParameters: DefaultApiCheckHandleAvailabilityRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CheckHandleAvailabilityResponse> {\n            return localVarFp.checkHandleAvailability(requestParameters.checkHandleAvailabilityBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * An integration can call this endpoint to configure itself\n         * @param {DefaultApiConfigureIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        configureIntegration(requestParameters: DefaultApiConfigureIntegrationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.configureIntegration(requestParameters.configureIntegrationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create bot\n         * @param {DefaultApiCreateBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createBot(requestParameters: DefaultApiCreateBotRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateBotResponse> {\n            return localVarFp.createBot(requestParameters.createBotBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConversation(requestParameters: DefaultApiCreateConversationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateConversationResponse> {\n            return localVarFp.createConversation(requestParameters.createConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateEventRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEvent(requestParameters: DefaultApiCreateEventRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateEventResponse> {\n            return localVarFp.createEvent(requestParameters.createEventBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a file.\n         * @param {DefaultApiCreateFileRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile(requestParameters: DefaultApiCreateFileRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateFileResponse> {\n            return localVarFp.createFile(requestParameters.xName, requestParameters.xTags, requestParameters.xAccessPolicies, requestParameters.xIndex, requestParameters.contentType, requestParameters.contentLength, requestParameters.createFileBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create integration\n         * @param {DefaultApiCreateIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIntegration(requestParameters: DefaultApiCreateIntegrationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateIntegrationResponse> {\n            return localVarFp.createIntegration(requestParameters.createIntegrationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create an IAK\n         * @param {DefaultApiCreateIntegrationApiKeyRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIntegrationApiKey(requestParameters: DefaultApiCreateIntegrationApiKeyRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateIntegrationApiKeyResponse> {\n            return localVarFp.createIntegrationApiKey(requestParameters.createIntegrationApiKeyBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createMessage(requestParameters: DefaultApiCreateMessageRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateMessageResponse> {\n            return localVarFp.createMessage(requestParameters.createMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a PAT\n         * @param {DefaultApiCreatePersonalAccessTokenRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPersonalAccessToken(requestParameters: DefaultApiCreatePersonalAccessTokenRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreatePersonalAccessTokenResponse> {\n            return localVarFp.createPersonalAccessToken(requestParameters.createPersonalAccessTokenBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Initiates the creation of a new table based on the provided schema, excluding system-managed fields like IDs and timestamps.\n         * @param {DefaultApiCreateTableRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTable(requestParameters: DefaultApiCreateTableRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateTableResponse> {\n            return localVarFp.createTable(requestParameters.createTableBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Inserts one or multiple new rows into the specified table.\n         * @param {DefaultApiCreateTableRowsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTableRows(requestParameters: DefaultApiCreateTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<CreateTableRowsResponse> {\n            return localVarFp.createTableRows(requestParameters.table, requestParameters.createTableRowsBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Task](#schema_task). When creating a new [Task](#schema_task), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateTaskRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTask(requestParameters: DefaultApiCreateTaskRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateTaskResponse> {\n            return localVarFp.createTask(requestParameters.createTaskBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser(requestParameters: DefaultApiCreateUserRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateUserResponse> {\n            return localVarFp.createUser(requestParameters.createUserBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create workspace\n         * @param {DefaultApiCreateWorkspaceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkspace(requestParameters: DefaultApiCreateWorkspaceRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateWorkspaceResponse> {\n            return localVarFp.createWorkspace(requestParameters.createWorkspaceBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Add a member to the workspace\n         * @param {DefaultApiCreateWorkspaceMemberRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkspaceMember(requestParameters: DefaultApiCreateWorkspaceMemberRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateWorkspaceMemberResponse> {\n            return localVarFp.createWorkspaceMember(requestParameters.createWorkspaceMemberBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete bot\n         * @param {DefaultApiDeleteBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBot(requestParameters: DefaultApiDeleteBotRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteBot(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete Bot Issue\n         * @param {DefaultApiDeleteBotIssueRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBotIssue(requestParameters: DefaultApiDeleteBotIssueRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteBotIssue(requestParameters.id, requestParameters.issueId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteConversation(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Deletes a file.\n         * @param {DefaultApiDeleteFileRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile(requestParameters: DefaultApiDeleteFileRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteFile(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete integration\n         * @param {DefaultApiDeleteIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteIntegration(requestParameters: DefaultApiDeleteIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteIntegration(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete an IAK\n         * @param {DefaultApiDeleteIntegrationApiKeyRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteIntegrationApiKey(requestParameters: DefaultApiDeleteIntegrationApiKeyRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteIntegrationApiKey(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteMessage(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a PAT\n         * @param {DefaultApiDeletePersonalAccessTokenRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePersonalAccessToken(requestParameters: DefaultApiDeletePersonalAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deletePersonalAccessToken(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a table and all its associated data from the system. Use with caution, as this action cannot be undone.\n         * @param {DefaultApiDeleteTableRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteTable(requestParameters: DefaultApiDeleteTableRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteTable(requestParameters.table, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Allows selective deletion of rows or complete clearance of a table.\n         * @param {DefaultApiDeleteTableRowsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteTableRows(requestParameters: DefaultApiDeleteTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteTableRowsResponse> {\n            return localVarFp.deleteTableRows(requestParameters.table, requestParameters.deleteTableRowsBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [Task](#schema_task). It cannot be undone.\n         * @param {DefaultApiDeleteTaskRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteTask(requestParameters: DefaultApiDeleteTaskRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteTask(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteUser(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete workspace\n         * @param {DefaultApiDeleteWorkspaceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkspace(requestParameters: DefaultApiDeleteWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteWorkspace(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Remove a member of a workspace\n         * @param {DefaultApiDeleteWorkspaceMemberRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkspaceMember(requestParameters: DefaultApiDeleteWorkspaceMemberRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteWorkspaceMember(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Duplicates the table schema & content\n         * @param {DefaultApiDuplicateTableRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        duplicateTable(requestParameters: DefaultApiDuplicateTableRequest, options?: AxiosRequestConfig): AxiosPromise<DuplicateTableResponse> {\n            return localVarFp.duplicateTable(requestParameters.sourceTableId, requestParameters.duplicateTableBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Enables the search and filtering of rows within a table based on specific criteria. This operation supports complex queries for advanced data manipulation and retrieval.\n         * @param {DefaultApiFindTableRowsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findTableRows(requestParameters: DefaultApiFindTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<FindTableRowsResponse> {\n            return localVarFp.findTableRows(requestParameters.table, requestParameters.findTableRowsBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get details of the account authenticating with this endpoint.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAccount(options?: AxiosRequestConfig): AxiosPromise<GetAccountResponse> {\n            return localVarFp.getAccount(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a preference of the account\n         * @param {DefaultApiGetAccountPreferenceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAccountPreference(requestParameters: DefaultApiGetAccountPreferenceRequest, options?: AxiosRequestConfig): AxiosPromise<GetAccountPreferenceResponse> {\n            return localVarFp.getAccountPreference(requestParameters.key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * For a user, gets a map of workspace IDs to their highest quota completion rate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAllWorkspaceQuotaCompletion(options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: GetAllWorkspaceQuotaCompletionResponse; }> {\n            return localVarFp.getAllWorkspaceQuotaCompletion(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the audit records of a workspace, sorted from most recent to oldest.\n         * @param {DefaultApiGetAuditRecordsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAuditRecords(requestParameters: DefaultApiGetAuditRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<GetAuditRecordsResponse> {\n            return localVarFp.getAuditRecords(requestParameters.id, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get bot details\n         * @param {DefaultApiGetBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBot(requestParameters: DefaultApiGetBotRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotResponse> {\n            return localVarFp.getBot(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get bot analytics\n         * @param {DefaultApiGetBotAnalyticsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotAnalytics(requestParameters: DefaultApiGetBotAnalyticsRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotAnalyticsResponse> {\n            return localVarFp.getBotAnalytics(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get bot logs\n         * @param {DefaultApiGetBotLogsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotLogs(requestParameters: DefaultApiGetBotLogsRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotLogsResponse> {\n            return localVarFp.getBotLogs(requestParameters.id, requestParameters.timeStart, requestParameters.timeEnd, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the webchat code/URL for a bot\n         * @param {DefaultApiGetBotWebchatRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotWebchat(requestParameters: DefaultApiGetBotWebchatRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotWebchatResponse> {\n            return localVarFp.getBotWebchat(requestParameters.id, requestParameters.type, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig): AxiosPromise<GetConversationResponse> {\n            return localVarFp.getConversation(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Event](#schema_event) object for a valid identifiers.\n         * @param {DefaultApiGetEventRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEvent(requestParameters: DefaultApiGetEventRequest, options?: AxiosRequestConfig): AxiosPromise<GetEventResponse> {\n            return localVarFp.getEvent(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a presigned URL to download the file content.\n         * @param {DefaultApiGetFileContentRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFileContent(requestParameters: DefaultApiGetFileContentRequest, options?: AxiosRequestConfig): AxiosPromise<GetFileContentResponse> {\n            return localVarFp.getFileContent(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get file metadata\n         * @param {DefaultApiGetFileMetadataRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFileMetadata(requestParameters: DefaultApiGetFileMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<GetFileMetadataResponse> {\n            return localVarFp.getFileMetadata(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get integration\n         * @param {DefaultApiGetIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegration(requestParameters: DefaultApiGetIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationResponse> {\n            return localVarFp.getIntegration(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get integration\n         * @param {DefaultApiGetIntegrationByNameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationByName(requestParameters: DefaultApiGetIntegrationByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationByNameResponse> {\n            return localVarFp.getIntegrationByName(requestParameters.name, requestParameters.version, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get integration logs\n         * @param {DefaultApiGetIntegrationLogsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationLogs(requestParameters: DefaultApiGetIntegrationLogsRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationLogsResponse> {\n            return localVarFp.getIntegrationLogs(requestParameters.id, requestParameters.timeStart, requestParameters.timeEnd, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig): AxiosPromise<GetMessageResponse> {\n            return localVarFp.getMessage(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n         * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateConversation(requestParameters: DefaultApiGetOrCreateConversationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateConversationResponse> {\n            return localVarFp.getOrCreateConversation(requestParameters.getOrCreateConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n         * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateMessage(requestParameters: DefaultApiGetOrCreateMessageRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateMessageResponse> {\n            return localVarFp.getOrCreateMessage(requestParameters.getOrCreateMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves information about a specific table if it exists; otherwise, creates a new table based on the provided schema.\n         * @param {DefaultApiGetOrCreateTableRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateTable(requestParameters: DefaultApiGetOrCreateTableRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateTableResponse> {\n            return localVarFp.getOrCreateTable(requestParameters.table, requestParameters.getOrCreateTableBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n         * @param {DefaultApiGetOrCreateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateUser(requestParameters: DefaultApiGetOrCreateUserRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateUserResponse> {\n            return localVarFp.getOrCreateUser(requestParameters.getOrCreateUserBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers. If the state does not exist, it creates a new state.\n         * @param {DefaultApiGetOrSetStateRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrSetState(requestParameters: DefaultApiGetOrSetStateRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrSetStateResponse> {\n            return localVarFp.getOrSetState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.getOrSetStateBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<GetParticipantResponse> {\n            return localVarFp.getParticipant(requestParameters.id, requestParameters.userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get public integration by name and version\n         * @param {DefaultApiGetPublicIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegration(requestParameters: DefaultApiGetPublicIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<GetPublicIntegrationResponse> {\n            return localVarFp.getPublicIntegration(requestParameters.name, requestParameters.version, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get public integration by Id\n         * @param {DefaultApiGetPublicIntegrationByIdRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegrationById(requestParameters: DefaultApiGetPublicIntegrationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<GetPublicIntegrationByIdResponse> {\n            return localVarFp.getPublicIntegrationById(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get workspace public details\n         * @param {DefaultApiGetPublicWorkspaceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicWorkspace(requestParameters: DefaultApiGetPublicWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<GetPublicWorkspaceResponse> {\n            return localVarFp.getPublicWorkspace(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers.\n         * @param {DefaultApiGetStateRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getState(requestParameters: DefaultApiGetStateRequest, options?: AxiosRequestConfig): AxiosPromise<GetStateResponse> {\n            return localVarFp.getState(requestParameters.type, requestParameters.id, requestParameters.name, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves detailed information about a specific table, identified by its name or unique identifier.\n         * @param {DefaultApiGetTableRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTable(requestParameters: DefaultApiGetTableRequest, options?: AxiosRequestConfig): AxiosPromise<GetTableResponse> {\n            return localVarFp.getTable(requestParameters.table, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetches a specific row from a table using the row\\'s unique identifier.\n         * @param {DefaultApiGetTableRowRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTableRow(requestParameters: DefaultApiGetTableRowRequest, options?: AxiosRequestConfig): AxiosPromise<GetTableRowResponse> {\n            return localVarFp.getTableRow(requestParameters.table, requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Task](#schema_task) object for a valid identifier.\n         * @param {DefaultApiGetTaskRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTask(requestParameters: DefaultApiGetTaskRequest, options?: AxiosRequestConfig): AxiosPromise<GetTaskResponse> {\n            return localVarFp.getTask(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upcoming invoice for workspace\n         * @param {DefaultApiGetUpcomingInvoiceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUpcomingInvoice(requestParameters: DefaultApiGetUpcomingInvoiceRequest, options?: AxiosRequestConfig): AxiosPromise<GetUpcomingInvoiceResponse> {\n            return localVarFp.getUpcomingInvoice(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get usage\n         * @param {DefaultApiGetUsageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUsage(requestParameters: DefaultApiGetUsageRequest, options?: AxiosRequestConfig): AxiosPromise<GetUsageResponse> {\n            return localVarFp.getUsage(requestParameters.type, requestParameters.id, requestParameters.period, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {DefaultApiGetUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<GetUserResponse> {\n            return localVarFp.getUser(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get workspace details\n         * @param {DefaultApiGetWorkspaceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspace(requestParameters: DefaultApiGetWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<GetWorkspaceResponse> {\n            return localVarFp.getWorkspace(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get workspace quota\n         * @param {DefaultApiGetWorkspaceQuotaRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspaceQuota(requestParameters: DefaultApiGetWorkspaceQuotaRequest, options?: AxiosRequestConfig): AxiosPromise<GetWorkspaceQuotaResponse> {\n            return localVarFp.getWorkspaceQuota(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Introspect the API\n         * @param {DefaultApiIntrospectRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        introspect(requestParameters: DefaultApiIntrospectRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IntrospectResponse> {\n            return localVarFp.introspect(requestParameters.introspectBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List activities of a task\n         * @param {DefaultApiListActivitiesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listActivities(requestParameters: DefaultApiListActivitiesRequest, options?: AxiosRequestConfig): AxiosPromise<ListActivitiesResponse> {\n            return localVarFp.listActivities(requestParameters.taskId, requestParameters.botId, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List Events for a Bot Issue\n         * @param {DefaultApiListBotIssueEventsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBotIssueEvents(requestParameters: DefaultApiListBotIssueEventsRequest, options?: AxiosRequestConfig): AxiosPromise<ListBotIssueEventsResponse> {\n            return localVarFp.listBotIssueEvents(requestParameters.id, requestParameters.issueId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List Bot Issues\n         * @param {DefaultApiListBotIssuesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBotIssues(requestParameters: DefaultApiListBotIssuesRequest, options?: AxiosRequestConfig): AxiosPromise<ListBotIssuesResponse> {\n            return localVarFp.listBotIssues(requestParameters.id, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List bots\n         * @param {DefaultApiListBotsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBots(requestParameters: DefaultApiListBotsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListBotsResponse> {\n            return localVarFp.listBots(requestParameters.dev, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConversations(requestParameters: DefaultApiListConversationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListConversationsResponse> {\n            return localVarFp.listConversations(requestParameters.nextToken, requestParameters.tags, requestParameters.participantIds, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n         * @param {DefaultApiListEventsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listEvents(requestParameters: DefaultApiListEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListEventsResponse> {\n            return localVarFp.listEvents(requestParameters.nextToken, requestParameters.type, requestParameters.conversationId, requestParameters.userId, requestParameters.messageId, requestParameters.status, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List files for bot\n         * @param {DefaultApiListFilesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles(requestParameters: DefaultApiListFilesRequest, options?: AxiosRequestConfig): AxiosPromise<ListFilesResponse> {\n            return localVarFp.listFiles(requestParameters.botId, requestParameters.nextToken, requestParameters.tags, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List IAKs (Integration Api Keys) of an integration\n         * @param {DefaultApiListIntegrationApiKeysRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listIntegrationApiKeys(requestParameters: DefaultApiListIntegrationApiKeysRequest, options?: AxiosRequestConfig): AxiosPromise<ListIntegrationApiKeysResponse> {\n            return localVarFp.listIntegrationApiKeys(requestParameters.integrationVersionId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List integrations\n         * @param {DefaultApiListIntegrationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listIntegrations(requestParameters: DefaultApiListIntegrationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListIntegrationsResponse> {\n            return localVarFp.listIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, requestParameters.dev, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {DefaultApiListMessagesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listMessages(requestParameters: DefaultApiListMessagesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListMessagesResponse> {\n            return localVarFp.listMessages(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).\n         * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig): AxiosPromise<ListParticipantsResponse> {\n            return localVarFp.listParticipants(requestParameters.id, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List PATs (Personal Access Tokens) of account.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPersonalAccessTokens(options?: AxiosRequestConfig): AxiosPromise<ListPersonalAccessTokensResponse> {\n            return localVarFp.listPersonalAccessTokens(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List public integration\n         * @param {DefaultApiListPublicIntegrationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPublicIntegrations(requestParameters: DefaultApiListPublicIntegrationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListPublicIntegrationsResponse> {\n            return localVarFp.listPublicIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of all tables associated with your bot.\n         * @param {DefaultApiListTablesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTables(requestParameters: DefaultApiListTablesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListTablesResponse> {\n            return localVarFp.listTables(requestParameters.tags, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [Task](#schema_task) you\\'ve previously created. The tasks are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {DefaultApiListTasksRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listTasks(requestParameters: DefaultApiListTasksRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListTasksResponse> {\n            return localVarFp.listTasks(requestParameters.nextToken, requestParameters.tags, requestParameters.conversationId, requestParameters.userId, requestParameters.parentTaskId, requestParameters.status, requestParameters.type, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get usage history\n         * @param {DefaultApiListUsageHistoryRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsageHistory(requestParameters: DefaultApiListUsageHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<ListUsageHistoryResponse> {\n            return localVarFp.listUsageHistory(requestParameters.type, requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {DefaultApiListUsersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsers(requestParameters: DefaultApiListUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListUsersResponse> {\n            return localVarFp.listUsers(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List invoices billed to workspace\n         * @param {DefaultApiListWorkspaceInvoicesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceInvoices(requestParameters: DefaultApiListWorkspaceInvoicesRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceInvoicesResponse> {\n            return localVarFp.listWorkspaceInvoices(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Lists all the members in a workspace\n         * @param {DefaultApiListWorkspaceMembersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceMembers(requestParameters: DefaultApiListWorkspaceMembersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceMembersResponse> {\n            return localVarFp.listWorkspaceMembers(requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List workspace quotas\n         * @param {DefaultApiListWorkspaceQuotasRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceQuotas(requestParameters: DefaultApiListWorkspaceQuotasRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceQuotasResponse> {\n            return localVarFp.listWorkspaceQuotas(requestParameters.id, requestParameters.period, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List workspace usages\n         * @param {DefaultApiListWorkspaceUsagesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceUsages(requestParameters: DefaultApiListWorkspaceUsagesRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceUsagesResponse> {\n            return localVarFp.listWorkspaceUsages(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List workspaces the user has access to\n         * @param {DefaultApiListWorkspacesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaces(requestParameters: DefaultApiListWorkspacesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListWorkspacesResponse> {\n            return localVarFp.listWorkspaces(requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {DefaultApiPatchStateRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchState(requestParameters: DefaultApiPatchStateRequest, options?: AxiosRequestConfig): AxiosPromise<PatchStateResponse> {\n            return localVarFp.patchState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.patchStateBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.removeParticipant(requestParameters.id, requestParameters.userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Renames an existing column within a table to better reflect its content or usage. The operation targets a specific table and requires the current and new column names.\n         * @param {DefaultApiRenameTableColumnRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        renameTableColumn(requestParameters: DefaultApiRenameTableColumnRequest, options?: AxiosRequestConfig): AxiosPromise<RenameTableColumnResponse> {\n            return localVarFp.renameTableColumn(requestParameters.table, requestParameters.renameTableColumnBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Run a VRL script\n         * @param {DefaultApiRunVrlRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        runVrl(requestParameters: DefaultApiRunVrlRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RunVrlResponse> {\n            return localVarFp.runVrl(requestParameters.runVrlBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Search files\n         * @param {DefaultApiSearchFilesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchFiles(requestParameters: DefaultApiSearchFilesRequest, options?: AxiosRequestConfig): AxiosPromise<SearchFilesResponse> {\n            return localVarFp.searchFiles(requestParameters.botId, requestParameters.query, requestParameters.tags, requestParameters.contextDepth, requestParameters.limit, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Set a preference for the account\n         * @param {DefaultApiSetAccountPreferenceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setAccountPreference(requestParameters: DefaultApiSetAccountPreferenceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.setAccountPreference(requestParameters.key, requestParameters.setAccountPreferenceBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {DefaultApiSetStateRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setState(requestParameters: DefaultApiSetStateRequest, options?: AxiosRequestConfig): AxiosPromise<SetStateResponse> {\n            return localVarFp.setState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.setStateBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.\n         * @param {DefaultApiSetWorkspacePaymentMethodRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setWorkspacePaymentMethod(requestParameters: DefaultApiSetWorkspacePaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<SetWorkspacePaymentMethodResponse> {\n            return localVarFp.setWorkspacePaymentMethod(requestParameters.id, requestParameters.setWorkspacePaymentMethodBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n         * @param {DefaultApiTransferBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferBot(requestParameters: DefaultApiTransferBotRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.transferBot(requestParameters.id, requestParameters.transferBotBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update details of the account associated with authenticated user\n         * @param {DefaultApiUpdateAccountRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateAccount(requestParameters: DefaultApiUpdateAccountRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UpdateAccountResponse> {\n            return localVarFp.updateAccount(requestParameters.updateAccountBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update bot\n         * @param {DefaultApiUpdateBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBot(requestParameters: DefaultApiUpdateBotRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateBotResponse> {\n            return localVarFp.updateBot(requestParameters.id, requestParameters.updateBotBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateConversationResponse> {\n            return localVarFp.updateConversation(requestParameters.id, requestParameters.updateConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update file metadata\n         * @param {DefaultApiUpdateFileMetadataRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateFileMetadata(requestParameters: DefaultApiUpdateFileMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateFileMetadataResponse> {\n            return localVarFp.updateFileMetadata(requestParameters.id, requestParameters.updateFileMetadataBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update integration\n         * @param {DefaultApiUpdateIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIntegration(requestParameters: DefaultApiUpdateIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateIntegrationResponse> {\n            return localVarFp.updateIntegration(requestParameters.id, requestParameters.updateIntegrationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a message\n         * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateMessageResponse> {\n            return localVarFp.updateMessage(requestParameters.id, requestParameters.updateMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Updates the schema or the name of an existing table.\n         * @param {DefaultApiUpdateTableRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateTable(requestParameters: DefaultApiUpdateTableRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateTableResponse> {\n            return localVarFp.updateTable(requestParameters.table, requestParameters.updateTableBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Updates specified rows in a table, allowing partial success with detailed feedback on errors.\n         * @param {DefaultApiUpdateTableRowsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateTableRows(requestParameters: DefaultApiUpdateTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateTableRowsResponse> {\n            return localVarFp.updateTableRows(requestParameters.table, requestParameters.updateTableRowsBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a [Task](#schema_task) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {DefaultApiUpdateTaskRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateTask(requestParameters: DefaultApiUpdateTaskRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateTaskResponse> {\n            return localVarFp.updateTask(requestParameters.id, requestParameters.updateTaskBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateUserResponse> {\n            return localVarFp.updateUser(requestParameters.id, requestParameters.updateUserBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update workspace\n         * @param {DefaultApiUpdateWorkspaceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspace(requestParameters: DefaultApiUpdateWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateWorkspaceResponse1> {\n            return localVarFp.updateWorkspace(requestParameters.id, requestParameters.updateWorkspaceBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the member of a workspace\n         * @param {DefaultApiUpdateWorkspaceMemberRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspaceMember(requestParameters: DefaultApiUpdateWorkspaceMemberRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateWorkspaceMemberResponse> {\n            return localVarFp.updateWorkspaceMember(requestParameters.id, requestParameters.updateWorkspaceMemberBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Inserts or updates rows based on a key. If a row exists, it is updated; otherwise, a new row is created.\n         * @param {DefaultApiUpsertTableRowsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        upsertTableRows(requestParameters: DefaultApiUpsertTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<UpsertTableRowsResponse> {\n            return localVarFp.upsertTableRows(requestParameters.table, requestParameters.upsertTableRowsBody, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * Request parameters for addParticipant operation in DefaultApi.\n * @export\n * @interface DefaultApiAddParticipantRequest\n */\nexport interface DefaultApiAddParticipantRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiAddParticipant\n     */\n    readonly id: string\n\n    /**\n     * Participant data\n     * @type {AddParticipantBody}\n     * @memberof DefaultApiAddParticipant\n     */\n    readonly addParticipantBody?: AddParticipantBody\n}\n\n/**\n * Request parameters for breakDownWorkspaceUsageByBot operation in DefaultApi.\n * @export\n * @interface DefaultApiBreakDownWorkspaceUsageByBotRequest\n */\nexport interface DefaultApiBreakDownWorkspaceUsageByBotRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiBreakDownWorkspaceUsageByBot\n     */\n    readonly id: string\n\n    /**\n     * Type of usage\n     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}\n     * @memberof DefaultApiBreakDownWorkspaceUsageByBot\n     */\n    readonly type: BreakDownWorkspaceUsageByBotTypeEnum\n\n    /**\n     * Period to get\n     * @type {string}\n     * @memberof DefaultApiBreakDownWorkspaceUsageByBot\n     */\n    readonly period?: string\n}\n\n/**\n * Request parameters for callAction operation in DefaultApi.\n * @export\n * @interface DefaultApiCallActionRequest\n */\nexport interface DefaultApiCallActionRequest {\n    /**\n     * Action payload\n     * @type {CallActionBody}\n     * @memberof DefaultApiCallAction\n     */\n    readonly callActionBody?: CallActionBody\n}\n\n/**\n * Request parameters for changeAISpendQuota operation in DefaultApi.\n * @export\n * @interface DefaultApiChangeAISpendQuotaRequest\n */\nexport interface DefaultApiChangeAISpendQuotaRequest {\n    /**\n     * New AI Spend quota\n     * @type {ChangeAISpendQuotaBody}\n     * @memberof DefaultApiChangeAISpendQuota\n     */\n    readonly changeAISpendQuotaBody?: ChangeAISpendQuotaBody\n}\n\n/**\n * Request parameters for changeWorkspacePlan operation in DefaultApi.\n * @export\n * @interface DefaultApiChangeWorkspacePlanRequest\n */\nexport interface DefaultApiChangeWorkspacePlanRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiChangeWorkspacePlan\n     */\n    readonly id: string\n\n    /**\n     * Billing plan to change the workspace to\n     * @type {ChangeWorkspacePlanBody}\n     * @memberof DefaultApiChangeWorkspacePlan\n     */\n    readonly changeWorkspacePlanBody?: ChangeWorkspacePlanBody\n}\n\n/**\n * Request parameters for chargeWorkspaceUnpaidInvoices operation in DefaultApi.\n * @export\n * @interface DefaultApiChargeWorkspaceUnpaidInvoicesRequest\n */\nexport interface DefaultApiChargeWorkspaceUnpaidInvoicesRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiChargeWorkspaceUnpaidInvoices\n     */\n    readonly id: string\n\n    /**\n     * \n     * @type {ChargeWorkspaceUnpaidInvoicesBody}\n     * @memberof DefaultApiChargeWorkspaceUnpaidInvoices\n     */\n    readonly chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody\n}\n\n/**\n * Request parameters for checkHandleAvailability operation in DefaultApi.\n * @export\n * @interface DefaultApiCheckHandleAvailabilityRequest\n */\nexport interface DefaultApiCheckHandleAvailabilityRequest {\n    /**\n     * Workspace handle availability\n     * @type {CheckHandleAvailabilityBody}\n     * @memberof DefaultApiCheckHandleAvailability\n     */\n    readonly checkHandleAvailabilityBody?: CheckHandleAvailabilityBody\n}\n\n/**\n * Request parameters for configureIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiConfigureIntegrationRequest\n */\nexport interface DefaultApiConfigureIntegrationRequest {\n    /**\n     * Configuration of the integration\n     * @type {ConfigureIntegrationBody}\n     * @memberof DefaultApiConfigureIntegration\n     */\n    readonly configureIntegrationBody?: ConfigureIntegrationBody\n}\n\n/**\n * Request parameters for createBot operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateBotRequest\n */\nexport interface DefaultApiCreateBotRequest {\n    /**\n     * Bot metadata\n     * @type {CreateBotBody}\n     * @memberof DefaultApiCreateBot\n     */\n    readonly createBotBody?: CreateBotBody\n}\n\n/**\n * Request parameters for createConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateConversationRequest\n */\nexport interface DefaultApiCreateConversationRequest {\n    /**\n     * Conversation data\n     * @type {CreateConversationBody}\n     * @memberof DefaultApiCreateConversation\n     */\n    readonly createConversationBody?: CreateConversationBody\n}\n\n/**\n * Request parameters for createEvent operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateEventRequest\n */\nexport interface DefaultApiCreateEventRequest {\n    /**\n     * Event data\n     * @type {CreateEventBody}\n     * @memberof DefaultApiCreateEvent\n     */\n    readonly createEventBody?: CreateEventBody\n}\n\n/**\n * Request parameters for createFile operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateFileRequest\n */\nexport interface DefaultApiCreateFileRequest {\n    /**\n     * File name\n     * @type {string}\n     * @memberof DefaultApiCreateFile\n     */\n    readonly xName?: string\n\n    /**\n     * File tags as URL-encoded JSON string representing an object of key-value pairs.\n     * @type {string}\n     * @memberof DefaultApiCreateFile\n     */\n    readonly xTags?: string\n\n    /**\n     * File access policies, comma-separated. Add \\&quot;public_content\\&quot; to allow public access to the file content. Add \\&quot;integrations\\&quot; to allo read, search and list operations for any integration installed in the bot.\n     * @type {string}\n     * @memberof DefaultApiCreateFile\n     */\n    readonly xAccessPolicies?: string\n\n    /**\n     * Set to a value of \\&quot;true\\&quot; to index the file in vector storage (default: false). Only PDFs, Office documents, and text-based files are currently supported. Note that if a file is indexed, it will count towards the Vector Storage quota of the workspace rather than the File Storage quota.\n     * @type {boolean}\n     * @memberof DefaultApiCreateFile\n     */\n    readonly xIndex?: boolean\n\n    /**\n     * File content type. If omitted, the content type will be inferred from the file extension. If a type cannot be inferred, the default is \\&quot;application/octet-stream\\&quot;.\n     * @type {string}\n     * @memberof DefaultApiCreateFile\n     */\n    readonly contentType?: string\n\n    /**\n     * File content length\n     * @type {string}\n     * @memberof DefaultApiCreateFile\n     */\n    readonly contentLength?: string\n\n    /**\n     * The file to upload.\n     * @type {CreateFileBody}\n     * @memberof DefaultApiCreateFile\n     */\n    readonly createFileBody?: CreateFileBody\n}\n\n/**\n * Request parameters for createIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateIntegrationRequest\n */\nexport interface DefaultApiCreateIntegrationRequest {\n    /**\n     * Integration\n     * @type {CreateIntegrationBody}\n     * @memberof DefaultApiCreateIntegration\n     */\n    readonly createIntegrationBody?: CreateIntegrationBody\n}\n\n/**\n * Request parameters for createIntegrationApiKey operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateIntegrationApiKeyRequest\n */\nexport interface DefaultApiCreateIntegrationApiKeyRequest {\n    /**\n     * IAK metadata\n     * @type {CreateIntegrationApiKeyBody}\n     * @memberof DefaultApiCreateIntegrationApiKey\n     */\n    readonly createIntegrationApiKeyBody?: CreateIntegrationApiKeyBody\n}\n\n/**\n * Request parameters for createMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateMessageRequest\n */\nexport interface DefaultApiCreateMessageRequest {\n    /**\n     * Message data\n     * @type {CreateMessageBody}\n     * @memberof DefaultApiCreateMessage\n     */\n    readonly createMessageBody?: CreateMessageBody\n}\n\n/**\n * Request parameters for createPersonalAccessToken operation in DefaultApi.\n * @export\n * @interface DefaultApiCreatePersonalAccessTokenRequest\n */\nexport interface DefaultApiCreatePersonalAccessTokenRequest {\n    /**\n     * \n     * @type {CreatePersonalAccessTokenBody}\n     * @memberof DefaultApiCreatePersonalAccessToken\n     */\n    readonly createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody\n}\n\n/**\n * Request parameters for createTable operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateTableRequest\n */\nexport interface DefaultApiCreateTableRequest {\n    /**\n     * Schema defining the structure of the new table\n     * @type {CreateTableBody}\n     * @memberof DefaultApiCreateTable\n     */\n    readonly createTableBody?: CreateTableBody\n}\n\n/**\n * Request parameters for createTableRows operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateTableRowsRequest\n */\nexport interface DefaultApiCreateTableRowsRequest {\n    /**\n     * The table\\&#39;s name or unique identifier for targeting specific table operations.\n     * @type {string}\n     * @memberof DefaultApiCreateTableRows\n     */\n    readonly table: string\n\n    /**\n     * A batch of new rows to insert into the table. Each row must adhere to the table\u2019s schema. A maximum of 1000 rows can be inserted in a single request.\n     * @type {CreateTableRowsBody}\n     * @memberof DefaultApiCreateTableRows\n     */\n    readonly createTableRowsBody?: CreateTableRowsBody\n}\n\n/**\n * Request parameters for createTask operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateTaskRequest\n */\nexport interface DefaultApiCreateTaskRequest {\n    /**\n     * Task data\n     * @type {CreateTaskBody}\n     * @memberof DefaultApiCreateTask\n     */\n    readonly createTaskBody?: CreateTaskBody\n}\n\n/**\n * Request parameters for createUser operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateUserRequest\n */\nexport interface DefaultApiCreateUserRequest {\n    /**\n     * User data\n     * @type {CreateUserBody}\n     * @memberof DefaultApiCreateUser\n     */\n    readonly createUserBody?: CreateUserBody\n}\n\n/**\n * Request parameters for createWorkspace operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateWorkspaceRequest\n */\nexport interface DefaultApiCreateWorkspaceRequest {\n    /**\n     * Workspace metadata\n     * @type {CreateWorkspaceBody}\n     * @memberof DefaultApiCreateWorkspace\n     */\n    readonly createWorkspaceBody?: CreateWorkspaceBody\n}\n\n/**\n * Request parameters for createWorkspaceMember operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateWorkspaceMemberRequest\n */\nexport interface DefaultApiCreateWorkspaceMemberRequest {\n    /**\n     * Workspace member metadata\n     * @type {CreateWorkspaceMemberBody}\n     * @memberof DefaultApiCreateWorkspaceMember\n     */\n    readonly createWorkspaceMemberBody?: CreateWorkspaceMemberBody\n}\n\n/**\n * Request parameters for deleteBot operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteBotRequest\n */\nexport interface DefaultApiDeleteBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiDeleteBot\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteBotIssue operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteBotIssueRequest\n */\nexport interface DefaultApiDeleteBotIssueRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiDeleteBotIssue\n     */\n    readonly id: string\n\n    /**\n     * Issue ID\n     * @type {string}\n     * @memberof DefaultApiDeleteBotIssue\n     */\n    readonly issueId: string\n}\n\n/**\n * Request parameters for deleteConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteConversationRequest\n */\nexport interface DefaultApiDeleteConversationRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiDeleteConversation\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteFile operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteFileRequest\n */\nexport interface DefaultApiDeleteFileRequest {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof DefaultApiDeleteFile\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteIntegrationRequest\n */\nexport interface DefaultApiDeleteIntegrationRequest {\n    /**\n     * Integration ID\n     * @type {string}\n     * @memberof DefaultApiDeleteIntegration\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteIntegrationApiKey operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteIntegrationApiKeyRequest\n */\nexport interface DefaultApiDeleteIntegrationApiKeyRequest {\n    /**\n     * ID of Integration Api Key\n     * @type {string}\n     * @memberof DefaultApiDeleteIntegrationApiKey\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteMessageRequest\n */\nexport interface DefaultApiDeleteMessageRequest {\n    /**\n     * Message id\n     * @type {string}\n     * @memberof DefaultApiDeleteMessage\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deletePersonalAccessToken operation in DefaultApi.\n * @export\n * @interface DefaultApiDeletePersonalAccessTokenRequest\n */\nexport interface DefaultApiDeletePersonalAccessTokenRequest {\n    /**\n     * ID of Personal Access Token\n     * @type {string}\n     * @memberof DefaultApiDeletePersonalAccessToken\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteTable operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteTableRequest\n */\nexport interface DefaultApiDeleteTableRequest {\n    /**\n     * The table\\&#39;s name or unique identifier for targeting specific table operations.\n     * @type {string}\n     * @memberof DefaultApiDeleteTable\n     */\n    readonly table: string\n}\n\n/**\n * Request parameters for deleteTableRows operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteTableRowsRequest\n */\nexport interface DefaultApiDeleteTableRowsRequest {\n    /**\n     * The table\\&#39;s name or unique identifier for targeting specific table operations.\n     * @type {string}\n     * @memberof DefaultApiDeleteTableRows\n     */\n    readonly table: string\n\n    /**\n     * Identifiers of the rows to be deleted.\n     * @type {DeleteTableRowsBody}\n     * @memberof DefaultApiDeleteTableRows\n     */\n    readonly deleteTableRowsBody?: DeleteTableRowsBody\n}\n\n/**\n * Request parameters for deleteTask operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteTaskRequest\n */\nexport interface DefaultApiDeleteTaskRequest {\n    /**\n     * Task id\n     * @type {string}\n     * @memberof DefaultApiDeleteTask\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteUser operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteUserRequest\n */\nexport interface DefaultApiDeleteUserRequest {\n    /**\n     * User ID\n     * @type {string}\n     * @memberof DefaultApiDeleteUser\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteWorkspace operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteWorkspaceRequest\n */\nexport interface DefaultApiDeleteWorkspaceRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiDeleteWorkspace\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteWorkspaceMember operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteWorkspaceMemberRequest\n */\nexport interface DefaultApiDeleteWorkspaceMemberRequest {\n    /**\n     * Workspace member ID\n     * @type {string}\n     * @memberof DefaultApiDeleteWorkspaceMember\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for duplicateTable operation in DefaultApi.\n * @export\n * @interface DefaultApiDuplicateTableRequest\n */\nexport interface DefaultApiDuplicateTableRequest {\n    /**\n     * The table\\&#39;s unique identifier\n     * @type {string}\n     * @memberof DefaultApiDuplicateTable\n     */\n    readonly sourceTableId: string\n\n    /**\n     * Parameters for the duplication operation.\n     * @type {DuplicateTableBody}\n     * @memberof DefaultApiDuplicateTable\n     */\n    readonly duplicateTableBody?: DuplicateTableBody\n}\n\n/**\n * Request parameters for findTableRows operation in DefaultApi.\n * @export\n * @interface DefaultApiFindTableRowsRequest\n */\nexport interface DefaultApiFindTableRowsRequest {\n    /**\n     * The table\\&#39;s name or unique identifier for targeting specific table operations.\n     * @type {string}\n     * @memberof DefaultApiFindTableRows\n     */\n    readonly table: string\n\n    /**\n     * The search criteria and filters to apply when searching for rows. This includes conditions, search terms, and pagination options.\n     * @type {FindTableRowsBody}\n     * @memberof DefaultApiFindTableRows\n     */\n    readonly findTableRowsBody?: FindTableRowsBody\n}\n\n/**\n * Request parameters for getAccountPreference operation in DefaultApi.\n * @export\n * @interface DefaultApiGetAccountPreferenceRequest\n */\nexport interface DefaultApiGetAccountPreferenceRequest {\n    /**\n     * Preference key\n     * @type {string}\n     * @memberof DefaultApiGetAccountPreference\n     */\n    readonly key: string\n}\n\n/**\n * Request parameters for getAuditRecords operation in DefaultApi.\n * @export\n * @interface DefaultApiGetAuditRecordsRequest\n */\nexport interface DefaultApiGetAuditRecordsRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiGetAuditRecords\n     */\n    readonly id: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiGetAuditRecords\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for getBot operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotRequest\n */\nexport interface DefaultApiGetBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBot\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getBotAnalytics operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotAnalyticsRequest\n */\nexport interface DefaultApiGetBotAnalyticsRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBotAnalytics\n     */\n    readonly id: string\n\n    /**\n     * Start date/time (inclusive)\n     * @type {string}\n     * @memberof DefaultApiGetBotAnalytics\n     */\n    readonly startDate: string\n\n    /**\n     * End date/time (exclusive)\n     * @type {string}\n     * @memberof DefaultApiGetBotAnalytics\n     */\n    readonly endDate: string\n}\n\n/**\n * Request parameters for getBotLogs operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotLogsRequest\n */\nexport interface DefaultApiGetBotLogsRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBotLogs\n     */\n    readonly id: string\n\n    /**\n     * Beginning of the time range to get logs from\n     * @type {string}\n     * @memberof DefaultApiGetBotLogs\n     */\n    readonly timeStart: string\n\n    /**\n     * End of the time range to get logs from\n     * @type {string}\n     * @memberof DefaultApiGetBotLogs\n     */\n    readonly timeEnd: string\n\n    /**\n     * Token to get the next page of logs\n     * @type {string}\n     * @memberof DefaultApiGetBotLogs\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for getBotWebchat operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotWebchatRequest\n */\nexport interface DefaultApiGetBotWebchatRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBotWebchat\n     */\n    readonly id: string\n\n    /**\n     * type of script to get\n     * @type {'preconfigured' | 'configurable' | 'fullscreen' | 'sharableUrl'}\n     * @memberof DefaultApiGetBotWebchat\n     */\n    readonly type: GetBotWebchatTypeEnum\n}\n\n/**\n * Request parameters for getConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiGetConversationRequest\n */\nexport interface DefaultApiGetConversationRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiGetConversation\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getEvent operation in DefaultApi.\n * @export\n * @interface DefaultApiGetEventRequest\n */\nexport interface DefaultApiGetEventRequest {\n    /**\n     * Event id\n     * @type {string}\n     * @memberof DefaultApiGetEvent\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getFileContent operation in DefaultApi.\n * @export\n * @interface DefaultApiGetFileContentRequest\n */\nexport interface DefaultApiGetFileContentRequest {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof DefaultApiGetFileContent\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getFileMetadata operation in DefaultApi.\n * @export\n * @interface DefaultApiGetFileMetadataRequest\n */\nexport interface DefaultApiGetFileMetadataRequest {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof DefaultApiGetFileMetadata\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiGetIntegrationRequest\n */\nexport interface DefaultApiGetIntegrationRequest {\n    /**\n     * Integration ID\n     * @type {string}\n     * @memberof DefaultApiGetIntegration\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getIntegrationByName operation in DefaultApi.\n * @export\n * @interface DefaultApiGetIntegrationByNameRequest\n */\nexport interface DefaultApiGetIntegrationByNameRequest {\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationByName\n     */\n    readonly name: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationByName\n     */\n    readonly version: string\n}\n\n/**\n * Request parameters for getIntegrationLogs operation in DefaultApi.\n * @export\n * @interface DefaultApiGetIntegrationLogsRequest\n */\nexport interface DefaultApiGetIntegrationLogsRequest {\n    /**\n     * Integration ID\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationLogs\n     */\n    readonly id: string\n\n    /**\n     * Beginning of the time range to get logs from\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationLogs\n     */\n    readonly timeStart: string\n\n    /**\n     * End of the time range to get logs from\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationLogs\n     */\n    readonly timeEnd: string\n\n    /**\n     * Token to get the next page of logs\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationLogs\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for getMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiGetMessageRequest\n */\nexport interface DefaultApiGetMessageRequest {\n    /**\n     * Id of the Message\n     * @type {string}\n     * @memberof DefaultApiGetMessage\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getOrCreateConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateConversationRequest\n */\nexport interface DefaultApiGetOrCreateConversationRequest {\n    /**\n     * Conversation data\n     * @type {GetOrCreateConversationBody}\n     * @memberof DefaultApiGetOrCreateConversation\n     */\n    readonly getOrCreateConversationBody?: GetOrCreateConversationBody\n}\n\n/**\n * Request parameters for getOrCreateMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateMessageRequest\n */\nexport interface DefaultApiGetOrCreateMessageRequest {\n    /**\n     * Message data\n     * @type {GetOrCreateMessageBody}\n     * @memberof DefaultApiGetOrCreateMessage\n     */\n    readonly getOrCreateMessageBody?: GetOrCreateMessageBody\n}\n\n/**\n * Request parameters for getOrCreateTable operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateTableRequest\n */\nexport interface DefaultApiGetOrCreateTableRequest {\n    /**\n     * The table\\&#39;s name or unique identifier for targeting specific table operations.\n     * @type {string}\n     * @memberof DefaultApiGetOrCreateTable\n     */\n    readonly table: string\n\n    /**\n     * Schema defining the structure of the table\n     * @type {GetOrCreateTableBody}\n     * @memberof DefaultApiGetOrCreateTable\n     */\n    readonly getOrCreateTableBody?: GetOrCreateTableBody\n}\n\n/**\n * Request parameters for getOrCreateUser operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateUserRequest\n */\nexport interface DefaultApiGetOrCreateUserRequest {\n    /**\n     * User data\n     * @type {GetOrCreateUserBody}\n     * @memberof DefaultApiGetOrCreateUser\n     */\n    readonly getOrCreateUserBody?: GetOrCreateUserBody\n}\n\n/**\n * Request parameters for getOrSetState operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrSetStateRequest\n */\nexport interface DefaultApiGetOrSetStateRequest {\n    /**\n     * State type\n     * @type {'conversation' | 'user' | 'bot' | 'integration' | 'task'}\n     * @memberof DefaultApiGetOrSetState\n     */\n    readonly type: GetOrSetStateTypeEnum\n\n    /**\n     * State id\n     * @type {string}\n     * @memberof DefaultApiGetOrSetState\n     */\n    readonly id: string\n\n    /**\n     * State name\n     * @type {string}\n     * @memberof DefaultApiGetOrSetState\n     */\n    readonly name: string\n\n    /**\n     * State content\n     * @type {GetOrSetStateBody}\n     * @memberof DefaultApiGetOrSetState\n     */\n    readonly getOrSetStateBody?: GetOrSetStateBody\n}\n\n/**\n * Request parameters for getParticipant operation in DefaultApi.\n * @export\n * @interface DefaultApiGetParticipantRequest\n */\nexport interface DefaultApiGetParticipantRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiGetParticipant\n     */\n    readonly id: string\n\n    /**\n     * User id\n     * @type {string}\n     * @memberof DefaultApiGetParticipant\n     */\n    readonly userId: string\n}\n\n/**\n * Request parameters for getPublicIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiGetPublicIntegrationRequest\n */\nexport interface DefaultApiGetPublicIntegrationRequest {\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiGetPublicIntegration\n     */\n    readonly name: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiGetPublicIntegration\n     */\n    readonly version: string\n}\n\n/**\n * Request parameters for getPublicIntegrationById operation in DefaultApi.\n * @export\n * @interface DefaultApiGetPublicIntegrationByIdRequest\n */\nexport interface DefaultApiGetPublicIntegrationByIdRequest {\n    /**\n     * Integration ID\n     * @type {string}\n     * @memberof DefaultApiGetPublicIntegrationById\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getPublicWorkspace operation in DefaultApi.\n * @export\n * @interface DefaultApiGetPublicWorkspaceRequest\n */\nexport interface DefaultApiGetPublicWorkspaceRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiGetPublicWorkspace\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getState operation in DefaultApi.\n * @export\n * @interface DefaultApiGetStateRequest\n */\nexport interface DefaultApiGetStateRequest {\n    /**\n     * State type\n     * @type {'conversation' | 'user' | 'bot' | 'integration' | 'task'}\n     * @memberof DefaultApiGetState\n     */\n    readonly type: GetStateTypeEnum\n\n    /**\n     * State id\n     * @type {string}\n     * @memberof DefaultApiGetState\n     */\n    readonly id: string\n\n    /**\n     * State name\n     * @type {string}\n     * @memberof DefaultApiGetState\n     */\n    readonly name: string\n}\n\n/**\n * Request parameters for getTable operation in DefaultApi.\n * @export\n * @interface DefaultApiGetTableRequest\n */\nexport interface DefaultApiGetTableRequest {\n    /**\n     * The table\\&#39;s name or unique identifier for targeting specific table operations.\n     * @type {string}\n     * @memberof DefaultApiGetTable\n     */\n    readonly table: string\n}\n\n/**\n * Request parameters for getTableRow operation in DefaultApi.\n * @export\n * @interface DefaultApiGetTableRowRequest\n */\nexport interface DefaultApiGetTableRowRequest {\n    /**\n     * The table\\&#39;s name or unique identifier for targeting specific table operations.\n     * @type {string}\n     * @memberof DefaultApiGetTableRow\n     */\n    readonly table: string\n\n    /**\n     * Identifier of the row within the table.\n     * @type {number}\n     * @memberof DefaultApiGetTableRow\n     */\n    readonly id: number\n}\n\n/**\n * Request parameters for getTask operation in DefaultApi.\n * @export\n * @interface DefaultApiGetTaskRequest\n */\nexport interface DefaultApiGetTaskRequest {\n    /**\n     * Task id\n     * @type {string}\n     * @memberof DefaultApiGetTask\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getUpcomingInvoice operation in DefaultApi.\n * @export\n * @interface DefaultApiGetUpcomingInvoiceRequest\n */\nexport interface DefaultApiGetUpcomingInvoiceRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiGetUpcomingInvoice\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getUsage operation in DefaultApi.\n * @export\n * @interface DefaultApiGetUsageRequest\n */\nexport interface DefaultApiGetUsageRequest {\n    /**\n     * Type of usage\n     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}\n     * @memberof DefaultApiGetUsage\n     */\n    readonly type: GetUsageTypeEnum\n\n    /**\n     * ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n     * @type {string}\n     * @memberof DefaultApiGetUsage\n     */\n    readonly id: string\n\n    /**\n     * Period to get\n     * @type {string}\n     * @memberof DefaultApiGetUsage\n     */\n    readonly period?: string\n}\n\n/**\n * Request parameters for getUser operation in DefaultApi.\n * @export\n * @interface DefaultApiGetUserRequest\n */\nexport interface DefaultApiGetUserRequest {\n    /**\n     * User ID\n     * @type {string}\n     * @memberof DefaultApiGetUser\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getWorkspace operation in DefaultApi.\n * @export\n * @interface DefaultApiGetWorkspaceRequest\n */\nexport interface DefaultApiGetWorkspaceRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiGetWorkspace\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getWorkspaceQuota operation in DefaultApi.\n * @export\n * @interface DefaultApiGetWorkspaceQuotaRequest\n */\nexport interface DefaultApiGetWorkspaceQuotaRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiGetWorkspaceQuota\n     */\n    readonly id: string\n\n    /**\n     * Type of usage\n     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}\n     * @memberof DefaultApiGetWorkspaceQuota\n     */\n    readonly type: GetWorkspaceQuotaTypeEnum\n\n    /**\n     * Period to get\n     * @type {string}\n     * @memberof DefaultApiGetWorkspaceQuota\n     */\n    readonly period?: string\n}\n\n/**\n * Request parameters for introspect operation in DefaultApi.\n * @export\n * @interface DefaultApiIntrospectRequest\n */\nexport interface DefaultApiIntrospectRequest {\n    /**\n     * \n     * @type {IntrospectBody}\n     * @memberof DefaultApiIntrospect\n     */\n    readonly introspectBody?: IntrospectBody\n}\n\n/**\n * Request parameters for listActivities operation in DefaultApi.\n * @export\n * @interface DefaultApiListActivitiesRequest\n */\nexport interface DefaultApiListActivitiesRequest {\n    /**\n     * ID of the task to list activities for\n     * @type {string}\n     * @memberof DefaultApiListActivities\n     */\n    readonly taskId: string\n\n    /**\n     * ID of the bot to list activities for\n     * @type {string}\n     * @memberof DefaultApiListActivities\n     */\n    readonly botId: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListActivities\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listBotIssueEvents operation in DefaultApi.\n * @export\n * @interface DefaultApiListBotIssueEventsRequest\n */\nexport interface DefaultApiListBotIssueEventsRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiListBotIssueEvents\n     */\n    readonly id: string\n\n    /**\n     * Issue ID\n     * @type {string}\n     * @memberof DefaultApiListBotIssueEvents\n     */\n    readonly issueId: string\n}\n\n/**\n * Request parameters for listBotIssues operation in DefaultApi.\n * @export\n * @interface DefaultApiListBotIssuesRequest\n */\nexport interface DefaultApiListBotIssuesRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiListBotIssues\n     */\n    readonly id: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListBotIssues\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listBots operation in DefaultApi.\n * @export\n * @interface DefaultApiListBotsRequest\n */\nexport interface DefaultApiListBotsRequest {\n    /**\n     * If true, only dev bots are returned. Otherwise, only production bots are returned.\n     * @type {boolean}\n     * @memberof DefaultApiListBots\n     */\n    readonly dev?: boolean\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListBots\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listConversations operation in DefaultApi.\n * @export\n * @interface DefaultApiListConversationsRequest\n */\nexport interface DefaultApiListConversationsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListConversations\n     */\n    readonly nextToken?: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListConversations\n     */\n    readonly tags?: { [key: string]: string; }\n\n    /**\n     * Filter by participant ids\n     * @type {Array<string>}\n     * @memberof DefaultApiListConversations\n     */\n    readonly participantIds?: Array<string>\n}\n\n/**\n * Request parameters for listEvents operation in DefaultApi.\n * @export\n * @interface DefaultApiListEventsRequest\n */\nexport interface DefaultApiListEventsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly nextToken?: string\n\n    /**\n     * Filter by event type\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly type?: string\n\n    /**\n     * Filter by conversation id\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly conversationId?: string\n\n    /**\n     * Filter by user id\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly userId?: string\n\n    /**\n     * Filter by message id\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly messageId?: string\n\n    /**\n     * Filter by status. Allowed values: pending, ignored, processed, failed.\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly status?: string\n}\n\n/**\n * Request parameters for listFiles operation in DefaultApi.\n * @export\n * @interface DefaultApiListFilesRequest\n */\nexport interface DefaultApiListFilesRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiListFiles\n     */\n    readonly botId: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListFiles\n     */\n    readonly nextToken?: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListFiles\n     */\n    readonly tags?: { [key: string]: string; }\n}\n\n/**\n * Request parameters for listIntegrationApiKeys operation in DefaultApi.\n * @export\n * @interface DefaultApiListIntegrationApiKeysRequest\n */\nexport interface DefaultApiListIntegrationApiKeysRequest {\n    /**\n     * ID of the integration version\n     * @type {string}\n     * @memberof DefaultApiListIntegrationApiKeys\n     */\n    readonly integrationVersionId: string\n}\n\n/**\n * Request parameters for listIntegrations operation in DefaultApi.\n * @export\n * @interface DefaultApiListIntegrationsRequest\n */\nexport interface DefaultApiListIntegrationsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListIntegrations\n     */\n    readonly nextToken?: string\n\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiListIntegrations\n     */\n    readonly name?: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiListIntegrations\n     */\n    readonly version?: string\n\n    /**\n     * If true, only dev integrations are returned. Otherwise, only production integrations are returned.\n     * @type {boolean}\n     * @memberof DefaultApiListIntegrations\n     */\n    readonly dev?: boolean\n}\n\n/**\n * Request parameters for listMessages operation in DefaultApi.\n * @export\n * @interface DefaultApiListMessagesRequest\n */\nexport interface DefaultApiListMessagesRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListMessages\n     */\n    readonly nextToken?: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiListMessages\n     */\n    readonly conversationId?: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListMessages\n     */\n    readonly tags?: { [key: string]: string; }\n}\n\n/**\n * Request parameters for listParticipants operation in DefaultApi.\n * @export\n * @interface DefaultApiListParticipantsRequest\n */\nexport interface DefaultApiListParticipantsRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiListParticipants\n     */\n    readonly id: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListParticipants\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listPublicIntegrations operation in DefaultApi.\n * @export\n * @interface DefaultApiListPublicIntegrationsRequest\n */\nexport interface DefaultApiListPublicIntegrationsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListPublicIntegrations\n     */\n    readonly nextToken?: string\n\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiListPublicIntegrations\n     */\n    readonly name?: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiListPublicIntegrations\n     */\n    readonly version?: string\n}\n\n/**\n * Request parameters for listTables operation in DefaultApi.\n * @export\n * @interface DefaultApiListTablesRequest\n */\nexport interface DefaultApiListTablesRequest {\n    /**\n     * Optional filters to narrow down the list by tags associated with tables.\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListTables\n     */\n    readonly tags?: { [key: string]: string; }\n}\n\n/**\n * Request parameters for listTasks operation in DefaultApi.\n * @export\n * @interface DefaultApiListTasksRequest\n */\nexport interface DefaultApiListTasksRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListTasks\n     */\n    readonly nextToken?: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListTasks\n     */\n    readonly tags?: { [key: string]: string; }\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiListTasks\n     */\n    readonly conversationId?: string\n\n    /**\n     * User id\n     * @type {string}\n     * @memberof DefaultApiListTasks\n     */\n    readonly userId?: string\n\n    /**\n     * Parent task id\n     * @type {string}\n     * @memberof DefaultApiListTasks\n     */\n    readonly parentTaskId?: string\n\n    /**\n     * Status\n     * @type {Array<'pending' | 'in_progress' | 'failed' | 'completed' | 'blocked' | 'paused' | 'timeout' | 'cancelled'>}\n     * @memberof DefaultApiListTasks\n     */\n    readonly status?: Array<ListTasksStatusEnum>\n\n    /**\n     * Type\n     * @type {string}\n     * @memberof DefaultApiListTasks\n     */\n    readonly type?: string\n}\n\n/**\n * Request parameters for listUsageHistory operation in DefaultApi.\n * @export\n * @interface DefaultApiListUsageHistoryRequest\n */\nexport interface DefaultApiListUsageHistoryRequest {\n    /**\n     * Type of usage\n     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}\n     * @memberof DefaultApiListUsageHistory\n     */\n    readonly type: ListUsageHistoryTypeEnum\n\n    /**\n     * ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n     * @type {string}\n     * @memberof DefaultApiListUsageHistory\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for listUsers operation in DefaultApi.\n * @export\n * @interface DefaultApiListUsersRequest\n */\nexport interface DefaultApiListUsersRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListUsers\n     */\n    readonly nextToken?: string\n\n    /**\n     * Filter by conversation id. This will return all users that have participated in the conversation.\n     * @type {string}\n     * @memberof DefaultApiListUsers\n     */\n    readonly conversationId?: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListUsers\n     */\n    readonly tags?: { [key: string]: string; }\n}\n\n/**\n * Request parameters for listWorkspaceInvoices operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspaceInvoicesRequest\n */\nexport interface DefaultApiListWorkspaceInvoicesRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceInvoices\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for listWorkspaceMembers operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspaceMembersRequest\n */\nexport interface DefaultApiListWorkspaceMembersRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceMembers\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listWorkspaceQuotas operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspaceQuotasRequest\n */\nexport interface DefaultApiListWorkspaceQuotasRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceQuotas\n     */\n    readonly id: string\n\n    /**\n     * Period to get\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceQuotas\n     */\n    readonly period?: string\n}\n\n/**\n * Request parameters for listWorkspaceUsages operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspaceUsagesRequest\n */\nexport interface DefaultApiListWorkspaceUsagesRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceUsages\n     */\n    readonly id: string\n\n    /**\n     * Type of usage\n     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}\n     * @memberof DefaultApiListWorkspaceUsages\n     */\n    readonly type: ListWorkspaceUsagesTypeEnum\n\n    /**\n     * Period to get\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceUsages\n     */\n    readonly period?: string\n}\n\n/**\n * Request parameters for listWorkspaces operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspacesRequest\n */\nexport interface DefaultApiListWorkspacesRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListWorkspaces\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for patchState operation in DefaultApi.\n * @export\n * @interface DefaultApiPatchStateRequest\n */\nexport interface DefaultApiPatchStateRequest {\n    /**\n     * State type\n     * @type {'conversation' | 'user' | 'bot' | 'integration' | 'task'}\n     * @memberof DefaultApiPatchState\n     */\n    readonly type: PatchStateTypeEnum\n\n    /**\n     * State id\n     * @type {string}\n     * @memberof DefaultApiPatchState\n     */\n    readonly id: string\n\n    /**\n     * State name\n     * @type {string}\n     * @memberof DefaultApiPatchState\n     */\n    readonly name: string\n\n    /**\n     * State content\n     * @type {PatchStateBody}\n     * @memberof DefaultApiPatchState\n     */\n    readonly patchStateBody?: PatchStateBody\n}\n\n/**\n * Request parameters for removeParticipant operation in DefaultApi.\n * @export\n * @interface DefaultApiRemoveParticipantRequest\n */\nexport interface DefaultApiRemoveParticipantRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiRemoveParticipant\n     */\n    readonly id: string\n\n    /**\n     * User id\n     * @type {string}\n     * @memberof DefaultApiRemoveParticipant\n     */\n    readonly userId: string\n}\n\n/**\n * Request parameters for renameTableColumn operation in DefaultApi.\n * @export\n * @interface DefaultApiRenameTableColumnRequest\n */\nexport interface DefaultApiRenameTableColumnRequest {\n    /**\n     * The table\\&#39;s name or unique identifier for targeting specific table operations.\n     * @type {string}\n     * @memberof DefaultApiRenameTableColumn\n     */\n    readonly table: string\n\n    /**\n     * Details of the column to be renamed, including its current name and the desired new name.\n     * @type {RenameTableColumnBody}\n     * @memberof DefaultApiRenameTableColumn\n     */\n    readonly renameTableColumnBody?: RenameTableColumnBody\n}\n\n/**\n * Request parameters for runVrl operation in DefaultApi.\n * @export\n * @interface DefaultApiRunVrlRequest\n */\nexport interface DefaultApiRunVrlRequest {\n    /**\n     * VRL script\n     * @type {RunVrlBody}\n     * @memberof DefaultApiRunVrl\n     */\n    readonly runVrlBody?: RunVrlBody\n}\n\n/**\n * Request parameters for searchFiles operation in DefaultApi.\n * @export\n * @interface DefaultApiSearchFilesRequest\n */\nexport interface DefaultApiSearchFilesRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiSearchFiles\n     */\n    readonly botId: string\n\n    /**\n     * Query expressed in natural language to retrieve matching text passages within all indexed files in the bot using semantical search.\n     * @type {string}\n     * @memberof DefaultApiSearchFiles\n     */\n    readonly query: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiSearchFiles\n     */\n    readonly tags?: { [key: string]: string; }\n\n    /**\n     * The number of neighbor passages to prepend and append as surrounding context to the content of each returned passage. Default: 0, Maximum: 10\n     * @type {number}\n     * @memberof DefaultApiSearchFiles\n     */\n    readonly contextDepth?: number\n\n    /**\n     * The maximum number of passages to return.\n     * @type {number}\n     * @memberof DefaultApiSearchFiles\n     */\n    readonly limit?: number\n}\n\n/**\n * Request parameters for setAccountPreference operation in DefaultApi.\n * @export\n * @interface DefaultApiSetAccountPreferenceRequest\n */\nexport interface DefaultApiSetAccountPreferenceRequest {\n    /**\n     * Preference key\n     * @type {string}\n     * @memberof DefaultApiSetAccountPreference\n     */\n    readonly key: string\n\n    /**\n     * Preference value\n     * @type {SetAccountPreferenceBody}\n     * @memberof DefaultApiSetAccountPreference\n     */\n    readonly setAccountPreferenceBody?: SetAccountPreferenceBody\n}\n\n/**\n * Request parameters for setState operation in DefaultApi.\n * @export\n * @interface DefaultApiSetStateRequest\n */\nexport interface DefaultApiSetStateRequest {\n    /**\n     * State type\n     * @type {'conversation' | 'user' | 'bot' | 'integration' | 'task'}\n     * @memberof DefaultApiSetState\n     */\n    readonly type: SetStateTypeEnum\n\n    /**\n     * State id\n     * @type {string}\n     * @memberof DefaultApiSetState\n     */\n    readonly id: string\n\n    /**\n     * State name\n     * @type {string}\n     * @memberof DefaultApiSetState\n     */\n    readonly name: string\n\n    /**\n     * State content\n     * @type {SetStateBody}\n     * @memberof DefaultApiSetState\n     */\n    readonly setStateBody?: SetStateBody\n}\n\n/**\n * Request parameters for setWorkspacePaymentMethod operation in DefaultApi.\n * @export\n * @interface DefaultApiSetWorkspacePaymentMethodRequest\n */\nexport interface DefaultApiSetWorkspacePaymentMethodRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiSetWorkspacePaymentMethod\n     */\n    readonly id: string\n\n    /**\n     * \n     * @type {SetWorkspacePaymentMethodBody}\n     * @memberof DefaultApiSetWorkspacePaymentMethod\n     */\n    readonly setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody\n}\n\n/**\n * Request parameters for transferBot operation in DefaultApi.\n * @export\n * @interface DefaultApiTransferBotRequest\n */\nexport interface DefaultApiTransferBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiTransferBot\n     */\n    readonly id: string\n\n    /**\n     * Bot transfer request\n     * @type {TransferBotBody}\n     * @memberof DefaultApiTransferBot\n     */\n    readonly transferBotBody?: TransferBotBody\n}\n\n/**\n * Request parameters for updateAccount operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateAccountRequest\n */\nexport interface DefaultApiUpdateAccountRequest {\n    /**\n     * Account Data\n     * @type {UpdateAccountBody}\n     * @memberof DefaultApiUpdateAccount\n     */\n    readonly updateAccountBody?: UpdateAccountBody\n}\n\n/**\n * Request parameters for updateBot operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateBotRequest\n */\nexport interface DefaultApiUpdateBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiUpdateBot\n     */\n    readonly id: string\n\n    /**\n     * Bot metadata\n     * @type {UpdateBotBody}\n     * @memberof DefaultApiUpdateBot\n     */\n    readonly updateBotBody?: UpdateBotBody\n}\n\n/**\n * Request parameters for updateConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateConversationRequest\n */\nexport interface DefaultApiUpdateConversationRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiUpdateConversation\n     */\n    readonly id: string\n\n    /**\n     * Conversation data\n     * @type {UpdateConversationBody}\n     * @memberof DefaultApiUpdateConversation\n     */\n    readonly updateConversationBody?: UpdateConversationBody\n}\n\n/**\n * Request parameters for updateFileMetadata operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateFileMetadataRequest\n */\nexport interface DefaultApiUpdateFileMetadataRequest {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof DefaultApiUpdateFileMetadata\n     */\n    readonly id: string\n\n    /**\n     * File metadata to update.\n     * @type {UpdateFileMetadataBody}\n     * @memberof DefaultApiUpdateFileMetadata\n     */\n    readonly updateFileMetadataBody?: UpdateFileMetadataBody\n}\n\n/**\n * Request parameters for updateIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateIntegrationRequest\n */\nexport interface DefaultApiUpdateIntegrationRequest {\n    /**\n     * Integration ID\n     * @type {string}\n     * @memberof DefaultApiUpdateIntegration\n     */\n    readonly id: string\n\n    /**\n     * Integration\n     * @type {UpdateIntegrationBody}\n     * @memberof DefaultApiUpdateIntegration\n     */\n    readonly updateIntegrationBody?: UpdateIntegrationBody\n}\n\n/**\n * Request parameters for updateMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateMessageRequest\n */\nexport interface DefaultApiUpdateMessageRequest {\n    /**\n     * Message id\n     * @type {string}\n     * @memberof DefaultApiUpdateMessage\n     */\n    readonly id: string\n\n    /**\n     * Message data\n     * @type {UpdateMessageBody}\n     * @memberof DefaultApiUpdateMessage\n     */\n    readonly updateMessageBody?: UpdateMessageBody\n}\n\n/**\n * Request parameters for updateTable operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateTableRequest\n */\nexport interface DefaultApiUpdateTableRequest {\n    /**\n     * The table\\&#39;s name or unique identifier for targeting specific table operations.\n     * @type {string}\n     * @memberof DefaultApiUpdateTable\n     */\n    readonly table: string\n\n    /**\n     * The updated schema/name of the table.\n     * @type {UpdateTableBody}\n     * @memberof DefaultApiUpdateTable\n     */\n    readonly updateTableBody?: UpdateTableBody\n}\n\n/**\n * Request parameters for updateTableRows operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateTableRowsRequest\n */\nexport interface DefaultApiUpdateTableRowsRequest {\n    /**\n     * The table\\&#39;s name or unique identifier for targeting specific table operations.\n     * @type {string}\n     * @memberof DefaultApiUpdateTableRows\n     */\n    readonly table: string\n\n    /**\n     * Data for rows to update, including IDs. Errors affect only specific rows, not the entire batch.\n     * @type {UpdateTableRowsBody}\n     * @memberof DefaultApiUpdateTableRows\n     */\n    readonly updateTableRowsBody?: UpdateTableRowsBody\n}\n\n/**\n * Request parameters for updateTask operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateTaskRequest\n */\nexport interface DefaultApiUpdateTaskRequest {\n    /**\n     * Task id\n     * @type {string}\n     * @memberof DefaultApiUpdateTask\n     */\n    readonly id: string\n\n    /**\n     * Task data\n     * @type {UpdateTaskBody}\n     * @memberof DefaultApiUpdateTask\n     */\n    readonly updateTaskBody?: UpdateTaskBody\n}\n\n/**\n * Request parameters for updateUser operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateUserRequest\n */\nexport interface DefaultApiUpdateUserRequest {\n    /**\n     * User ID\n     * @type {string}\n     * @memberof DefaultApiUpdateUser\n     */\n    readonly id: string\n\n    /**\n     * User data\n     * @type {UpdateUserBody}\n     * @memberof DefaultApiUpdateUser\n     */\n    readonly updateUserBody?: UpdateUserBody\n}\n\n/**\n * Request parameters for updateWorkspace operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateWorkspaceRequest\n */\nexport interface DefaultApiUpdateWorkspaceRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiUpdateWorkspace\n     */\n    readonly id: string\n\n    /**\n     * Workspace metadata\n     * @type {UpdateWorkspaceBody}\n     * @memberof DefaultApiUpdateWorkspace\n     */\n    readonly updateWorkspaceBody?: UpdateWorkspaceBody\n}\n\n/**\n * Request parameters for updateWorkspaceMember operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateWorkspaceMemberRequest\n */\nexport interface DefaultApiUpdateWorkspaceMemberRequest {\n    /**\n     * Workspace member ID\n     * @type {string}\n     * @memberof DefaultApiUpdateWorkspaceMember\n     */\n    readonly id: string\n\n    /**\n     * Workspace member metadata\n     * @type {UpdateWorkspaceMemberBody}\n     * @memberof DefaultApiUpdateWorkspaceMember\n     */\n    readonly updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody\n}\n\n/**\n * Request parameters for upsertTableRows operation in DefaultApi.\n * @export\n * @interface DefaultApiUpsertTableRowsRequest\n */\nexport interface DefaultApiUpsertTableRowsRequest {\n    /**\n     * The table\\&#39;s name or unique identifier for targeting specific table operations.\n     * @type {string}\n     * @memberof DefaultApiUpsertTableRows\n     */\n    readonly table: string\n\n    /**\n     * Rows for insertion or update, with a key column to determine action. Supports partial successes.\n     * @type {UpsertTableRowsBody}\n     * @memberof DefaultApiUpsertTableRows\n     */\n    readonly upsertTableRowsBody?: UpsertTableRowsBody\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).\n     * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).addParticipant(requestParameters.id, requestParameters.addParticipantBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Break down workspace usage by bot\n     * @param {DefaultApiBreakDownWorkspaceUsageByBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public breakDownWorkspaceUsageByBot(requestParameters: DefaultApiBreakDownWorkspaceUsageByBotRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).breakDownWorkspaceUsageByBot(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Call an action\n     * @param {DefaultApiCallActionRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public callAction(requestParameters: DefaultApiCallActionRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).callAction(requestParameters.callActionBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Change AI Spend quota\n     * @param {DefaultApiChangeAISpendQuotaRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public changeAISpendQuota(requestParameters: DefaultApiChangeAISpendQuotaRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).changeAISpendQuota(requestParameters.changeAISpendQuotaBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Change workspace billing plan\n     * @param {DefaultApiChangeWorkspacePlanRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public changeWorkspacePlan(requestParameters: DefaultApiChangeWorkspacePlanRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).changeWorkspacePlan(requestParameters.id, requestParameters.changeWorkspacePlanBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Charge unpaid invoices of a workspace.\n     * @param {DefaultApiChargeWorkspaceUnpaidInvoicesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public chargeWorkspaceUnpaidInvoices(requestParameters: DefaultApiChargeWorkspaceUnpaidInvoicesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).chargeWorkspaceUnpaidInvoices(requestParameters.id, requestParameters.chargeWorkspaceUnpaidInvoicesBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if a workspace handle is available\n     * @param {DefaultApiCheckHandleAvailabilityRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public checkHandleAvailability(requestParameters: DefaultApiCheckHandleAvailabilityRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).checkHandleAvailability(requestParameters.checkHandleAvailabilityBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * An integration can call this endpoint to configure itself\n     * @param {DefaultApiConfigureIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public configureIntegration(requestParameters: DefaultApiConfigureIntegrationRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).configureIntegration(requestParameters.configureIntegrationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create bot\n     * @param {DefaultApiCreateBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createBot(requestParameters: DefaultApiCreateBotRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createBot(requestParameters.createBotBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createConversation(requestParameters: DefaultApiCreateConversationRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createConversation(requestParameters.createConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateEventRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createEvent(requestParameters: DefaultApiCreateEventRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createEvent(requestParameters.createEventBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a file.\n     * @param {DefaultApiCreateFileRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createFile(requestParameters: DefaultApiCreateFileRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createFile(requestParameters.xName, requestParameters.xTags, requestParameters.xAccessPolicies, requestParameters.xIndex, requestParameters.contentType, requestParameters.contentLength, requestParameters.createFileBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create integration\n     * @param {DefaultApiCreateIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createIntegration(requestParameters: DefaultApiCreateIntegrationRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createIntegration(requestParameters.createIntegrationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create an IAK\n     * @param {DefaultApiCreateIntegrationApiKeyRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createIntegrationApiKey(requestParameters: DefaultApiCreateIntegrationApiKeyRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createIntegrationApiKey(requestParameters.createIntegrationApiKeyBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createMessage(requestParameters: DefaultApiCreateMessageRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createMessage(requestParameters.createMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a PAT\n     * @param {DefaultApiCreatePersonalAccessTokenRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createPersonalAccessToken(requestParameters: DefaultApiCreatePersonalAccessTokenRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createPersonalAccessToken(requestParameters.createPersonalAccessTokenBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Initiates the creation of a new table based on the provided schema, excluding system-managed fields like IDs and timestamps.\n     * @param {DefaultApiCreateTableRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createTable(requestParameters: DefaultApiCreateTableRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createTable(requestParameters.createTableBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Inserts one or multiple new rows into the specified table.\n     * @param {DefaultApiCreateTableRowsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createTableRows(requestParameters: DefaultApiCreateTableRowsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createTableRows(requestParameters.table, requestParameters.createTableRowsBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Task](#schema_task). When creating a new [Task](#schema_task), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateTaskRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createTask(requestParameters: DefaultApiCreateTaskRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createTask(requestParameters.createTaskBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createUser(requestParameters: DefaultApiCreateUserRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createUser(requestParameters.createUserBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create workspace\n     * @param {DefaultApiCreateWorkspaceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createWorkspace(requestParameters: DefaultApiCreateWorkspaceRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createWorkspace(requestParameters.createWorkspaceBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Add a member to the workspace\n     * @param {DefaultApiCreateWorkspaceMemberRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createWorkspaceMember(requestParameters: DefaultApiCreateWorkspaceMemberRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createWorkspaceMember(requestParameters.createWorkspaceMemberBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete bot\n     * @param {DefaultApiDeleteBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteBot(requestParameters: DefaultApiDeleteBotRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteBot(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete Bot Issue\n     * @param {DefaultApiDeleteBotIssueRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteBotIssue(requestParameters: DefaultApiDeleteBotIssueRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteBotIssue(requestParameters.id, requestParameters.issueId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n     * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteConversation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Deletes a file.\n     * @param {DefaultApiDeleteFileRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteFile(requestParameters: DefaultApiDeleteFileRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteFile(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete integration\n     * @param {DefaultApiDeleteIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteIntegration(requestParameters: DefaultApiDeleteIntegrationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteIntegration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete an IAK\n     * @param {DefaultApiDeleteIntegrationApiKeyRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteIntegrationApiKey(requestParameters: DefaultApiDeleteIntegrationApiKeyRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteIntegrationApiKey(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [Message](#schema_message). It cannot be undone.\n     * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteMessage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a PAT\n     * @param {DefaultApiDeletePersonalAccessTokenRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deletePersonalAccessToken(requestParameters: DefaultApiDeletePersonalAccessTokenRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deletePersonalAccessToken(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a table and all its associated data from the system. Use with caution, as this action cannot be undone.\n     * @param {DefaultApiDeleteTableRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteTable(requestParameters: DefaultApiDeleteTableRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteTable(requestParameters.table, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Allows selective deletion of rows or complete clearance of a table.\n     * @param {DefaultApiDeleteTableRowsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteTableRows(requestParameters: DefaultApiDeleteTableRowsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteTableRows(requestParameters.table, requestParameters.deleteTableRowsBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [Task](#schema_task). It cannot be undone.\n     * @param {DefaultApiDeleteTaskRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteTask(requestParameters: DefaultApiDeleteTaskRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteTask(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [User](#schema_user). It cannot be undone.\n     * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete workspace\n     * @param {DefaultApiDeleteWorkspaceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteWorkspace(requestParameters: DefaultApiDeleteWorkspaceRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteWorkspace(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Remove a member of a workspace\n     * @param {DefaultApiDeleteWorkspaceMemberRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteWorkspaceMember(requestParameters: DefaultApiDeleteWorkspaceMemberRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteWorkspaceMember(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Duplicates the table schema & content\n     * @param {DefaultApiDuplicateTableRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public duplicateTable(requestParameters: DefaultApiDuplicateTableRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).duplicateTable(requestParameters.sourceTableId, requestParameters.duplicateTableBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Enables the search and filtering of rows within a table based on specific criteria. This operation supports complex queries for advanced data manipulation and retrieval.\n     * @param {DefaultApiFindTableRowsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public findTableRows(requestParameters: DefaultApiFindTableRowsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).findTableRows(requestParameters.table, requestParameters.findTableRowsBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get details of the account authenticating with this endpoint.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getAccount(options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getAccount(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a preference of the account\n     * @param {DefaultApiGetAccountPreferenceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getAccountPreference(requestParameters: DefaultApiGetAccountPreferenceRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getAccountPreference(requestParameters.key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * For a user, gets a map of workspace IDs to their highest quota completion rate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getAllWorkspaceQuotaCompletion(options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getAllWorkspaceQuotaCompletion(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the audit records of a workspace, sorted from most recent to oldest.\n     * @param {DefaultApiGetAuditRecordsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getAuditRecords(requestParameters: DefaultApiGetAuditRecordsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getAuditRecords(requestParameters.id, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get bot details\n     * @param {DefaultApiGetBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBot(requestParameters: DefaultApiGetBotRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBot(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get bot analytics\n     * @param {DefaultApiGetBotAnalyticsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBotAnalytics(requestParameters: DefaultApiGetBotAnalyticsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBotAnalytics(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get bot logs\n     * @param {DefaultApiGetBotLogsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBotLogs(requestParameters: DefaultApiGetBotLogsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBotLogs(requestParameters.id, requestParameters.timeStart, requestParameters.timeEnd, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the webchat code/URL for a bot\n     * @param {DefaultApiGetBotWebchatRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBotWebchat(requestParameters: DefaultApiGetBotWebchatRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBotWebchat(requestParameters.id, requestParameters.type, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n     * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getConversation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Event](#schema_event) object for a valid identifiers.\n     * @param {DefaultApiGetEventRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getEvent(requestParameters: DefaultApiGetEventRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getEvent(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a presigned URL to download the file content.\n     * @param {DefaultApiGetFileContentRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getFileContent(requestParameters: DefaultApiGetFileContentRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getFileContent(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get file metadata\n     * @param {DefaultApiGetFileMetadataRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getFileMetadata(requestParameters: DefaultApiGetFileMetadataRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getFileMetadata(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get integration\n     * @param {DefaultApiGetIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getIntegration(requestParameters: DefaultApiGetIntegrationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getIntegration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get integration\n     * @param {DefaultApiGetIntegrationByNameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getIntegrationByName(requestParameters: DefaultApiGetIntegrationByNameRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getIntegrationByName(requestParameters.name, requestParameters.version, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get integration logs\n     * @param {DefaultApiGetIntegrationLogsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getIntegrationLogs(requestParameters: DefaultApiGetIntegrationLogsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getIntegrationLogs(requestParameters.id, requestParameters.timeStart, requestParameters.timeEnd, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Message](#schema_message) object for a valid identifier.\n     * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getMessage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n     * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateConversation(requestParameters: DefaultApiGetOrCreateConversationRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateConversation(requestParameters.getOrCreateConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n     * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateMessage(requestParameters: DefaultApiGetOrCreateMessageRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateMessage(requestParameters.getOrCreateMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves information about a specific table if it exists; otherwise, creates a new table based on the provided schema.\n     * @param {DefaultApiGetOrCreateTableRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateTable(requestParameters: DefaultApiGetOrCreateTableRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateTable(requestParameters.table, requestParameters.getOrCreateTableBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n     * @param {DefaultApiGetOrCreateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateUser(requestParameters: DefaultApiGetOrCreateUserRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateUser(requestParameters.getOrCreateUserBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [State](#schema_state) object for a valid identifiers. If the state does not exist, it creates a new state.\n     * @param {DefaultApiGetOrSetStateRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrSetState(requestParameters: DefaultApiGetOrSetStateRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrSetState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.getOrSetStateBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n     * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getParticipant(requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get public integration by name and version\n     * @param {DefaultApiGetPublicIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPublicIntegration(requestParameters: DefaultApiGetPublicIntegrationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getPublicIntegration(requestParameters.name, requestParameters.version, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get public integration by Id\n     * @param {DefaultApiGetPublicIntegrationByIdRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPublicIntegrationById(requestParameters: DefaultApiGetPublicIntegrationByIdRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getPublicIntegrationById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get workspace public details\n     * @param {DefaultApiGetPublicWorkspaceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPublicWorkspace(requestParameters: DefaultApiGetPublicWorkspaceRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getPublicWorkspace(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [State](#schema_state) object for a valid identifiers.\n     * @param {DefaultApiGetStateRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getState(requestParameters: DefaultApiGetStateRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getState(requestParameters.type, requestParameters.id, requestParameters.name, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves detailed information about a specific table, identified by its name or unique identifier.\n     * @param {DefaultApiGetTableRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getTable(requestParameters: DefaultApiGetTableRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getTable(requestParameters.table, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Fetches a specific row from a table using the row\\'s unique identifier.\n     * @param {DefaultApiGetTableRowRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getTableRow(requestParameters: DefaultApiGetTableRowRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getTableRow(requestParameters.table, requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Task](#schema_task) object for a valid identifier.\n     * @param {DefaultApiGetTaskRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getTask(requestParameters: DefaultApiGetTaskRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getTask(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upcoming invoice for workspace\n     * @param {DefaultApiGetUpcomingInvoiceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getUpcomingInvoice(requestParameters: DefaultApiGetUpcomingInvoiceRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getUpcomingInvoice(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get usage\n     * @param {DefaultApiGetUsageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getUsage(requestParameters: DefaultApiGetUsageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getUsage(requestParameters.type, requestParameters.id, requestParameters.period, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [User](#schema_user) object for a valid identifier.\n     * @param {DefaultApiGetUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get workspace details\n     * @param {DefaultApiGetWorkspaceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkspace(requestParameters: DefaultApiGetWorkspaceRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkspace(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get workspace quota\n     * @param {DefaultApiGetWorkspaceQuotaRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkspaceQuota(requestParameters: DefaultApiGetWorkspaceQuotaRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkspaceQuota(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Introspect the API\n     * @param {DefaultApiIntrospectRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public introspect(requestParameters: DefaultApiIntrospectRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).introspect(requestParameters.introspectBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List activities of a task\n     * @param {DefaultApiListActivitiesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listActivities(requestParameters: DefaultApiListActivitiesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listActivities(requestParameters.taskId, requestParameters.botId, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List Events for a Bot Issue\n     * @param {DefaultApiListBotIssueEventsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listBotIssueEvents(requestParameters: DefaultApiListBotIssueEventsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listBotIssueEvents(requestParameters.id, requestParameters.issueId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List Bot Issues\n     * @param {DefaultApiListBotIssuesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listBotIssues(requestParameters: DefaultApiListBotIssuesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listBotIssues(requestParameters.id, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List bots\n     * @param {DefaultApiListBotsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listBots(requestParameters: DefaultApiListBotsRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listBots(requestParameters.dev, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n     * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listConversations(requestParameters: DefaultApiListConversationsRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listConversations(requestParameters.nextToken, requestParameters.tags, requestParameters.participantIds, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n     * @param {DefaultApiListEventsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listEvents(requestParameters: DefaultApiListEventsRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listEvents(requestParameters.nextToken, requestParameters.type, requestParameters.conversationId, requestParameters.userId, requestParameters.messageId, requestParameters.status, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List files for bot\n     * @param {DefaultApiListFilesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listFiles(requestParameters: DefaultApiListFilesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listFiles(requestParameters.botId, requestParameters.nextToken, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List IAKs (Integration Api Keys) of an integration\n     * @param {DefaultApiListIntegrationApiKeysRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listIntegrationApiKeys(requestParameters: DefaultApiListIntegrationApiKeysRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listIntegrationApiKeys(requestParameters.integrationVersionId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List integrations\n     * @param {DefaultApiListIntegrationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listIntegrations(requestParameters: DefaultApiListIntegrationsRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, requestParameters.dev, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n     * @param {DefaultApiListMessagesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listMessages(requestParameters: DefaultApiListMessagesRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listMessages(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).\n     * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listParticipants(requestParameters.id, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List PATs (Personal Access Tokens) of account.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listPersonalAccessTokens(options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listPersonalAccessTokens(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List public integration\n     * @param {DefaultApiListPublicIntegrationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listPublicIntegrations(requestParameters: DefaultApiListPublicIntegrationsRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listPublicIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of all tables associated with your bot.\n     * @param {DefaultApiListTablesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listTables(requestParameters: DefaultApiListTablesRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listTables(requestParameters.tags, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [Task](#schema_task) you\\'ve previously created. The tasks are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n     * @param {DefaultApiListTasksRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listTasks(requestParameters: DefaultApiListTasksRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listTasks(requestParameters.nextToken, requestParameters.tags, requestParameters.conversationId, requestParameters.userId, requestParameters.parentTaskId, requestParameters.status, requestParameters.type, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get usage history\n     * @param {DefaultApiListUsageHistoryRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listUsageHistory(requestParameters: DefaultApiListUsageHistoryRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listUsageHistory(requestParameters.type, requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n     * @param {DefaultApiListUsersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listUsers(requestParameters: DefaultApiListUsersRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listUsers(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List invoices billed to workspace\n     * @param {DefaultApiListWorkspaceInvoicesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaceInvoices(requestParameters: DefaultApiListWorkspaceInvoicesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaceInvoices(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Lists all the members in a workspace\n     * @param {DefaultApiListWorkspaceMembersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaceMembers(requestParameters: DefaultApiListWorkspaceMembersRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaceMembers(requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List workspace quotas\n     * @param {DefaultApiListWorkspaceQuotasRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaceQuotas(requestParameters: DefaultApiListWorkspaceQuotasRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaceQuotas(requestParameters.id, requestParameters.period, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List workspace usages\n     * @param {DefaultApiListWorkspaceUsagesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaceUsages(requestParameters: DefaultApiListWorkspaceUsagesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaceUsages(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List workspaces the user has access to\n     * @param {DefaultApiListWorkspacesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaces(requestParameters: DefaultApiListWorkspacesRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaces(requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n     * @param {DefaultApiPatchStateRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public patchState(requestParameters: DefaultApiPatchStateRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).patchState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.patchStateBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n     * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).removeParticipant(requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Renames an existing column within a table to better reflect its content or usage. The operation targets a specific table and requires the current and new column names.\n     * @param {DefaultApiRenameTableColumnRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public renameTableColumn(requestParameters: DefaultApiRenameTableColumnRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).renameTableColumn(requestParameters.table, requestParameters.renameTableColumnBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Run a VRL script\n     * @param {DefaultApiRunVrlRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public runVrl(requestParameters: DefaultApiRunVrlRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).runVrl(requestParameters.runVrlBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Search files\n     * @param {DefaultApiSearchFilesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public searchFiles(requestParameters: DefaultApiSearchFilesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).searchFiles(requestParameters.botId, requestParameters.query, requestParameters.tags, requestParameters.contextDepth, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Set a preference for the account\n     * @param {DefaultApiSetAccountPreferenceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public setAccountPreference(requestParameters: DefaultApiSetAccountPreferenceRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).setAccountPreference(requestParameters.key, requestParameters.setAccountPreferenceBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n     * @param {DefaultApiSetStateRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public setState(requestParameters: DefaultApiSetStateRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).setState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.setStateBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.\n     * @param {DefaultApiSetWorkspacePaymentMethodRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public setWorkspacePaymentMethod(requestParameters: DefaultApiSetWorkspacePaymentMethodRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).setWorkspacePaymentMethod(requestParameters.id, requestParameters.setWorkspacePaymentMethodBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n     * @param {DefaultApiTransferBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public transferBot(requestParameters: DefaultApiTransferBotRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).transferBot(requestParameters.id, requestParameters.transferBotBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update details of the account associated with authenticated user\n     * @param {DefaultApiUpdateAccountRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateAccount(requestParameters: DefaultApiUpdateAccountRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateAccount(requestParameters.updateAccountBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update bot\n     * @param {DefaultApiUpdateBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateBot(requestParameters: DefaultApiUpdateBotRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateBot(requestParameters.id, requestParameters.updateBotBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n     * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateConversation(requestParameters.id, requestParameters.updateConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update file metadata\n     * @param {DefaultApiUpdateFileMetadataRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateFileMetadata(requestParameters: DefaultApiUpdateFileMetadataRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateFileMetadata(requestParameters.id, requestParameters.updateFileMetadataBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update integration\n     * @param {DefaultApiUpdateIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateIntegration(requestParameters: DefaultApiUpdateIntegrationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateIntegration(requestParameters.id, requestParameters.updateIntegrationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a message\n     * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateMessage(requestParameters.id, requestParameters.updateMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Updates the schema or the name of an existing table.\n     * @param {DefaultApiUpdateTableRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateTable(requestParameters: DefaultApiUpdateTableRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateTable(requestParameters.table, requestParameters.updateTableBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Updates specified rows in a table, allowing partial success with detailed feedback on errors.\n     * @param {DefaultApiUpdateTableRowsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateTableRows(requestParameters: DefaultApiUpdateTableRowsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateTableRows(requestParameters.table, requestParameters.updateTableRowsBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a [Task](#schema_task) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n     * @param {DefaultApiUpdateTaskRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateTask(requestParameters: DefaultApiUpdateTaskRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateTask(requestParameters.id, requestParameters.updateTaskBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n     * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateUser(requestParameters.id, requestParameters.updateUserBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update workspace\n     * @param {DefaultApiUpdateWorkspaceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateWorkspace(requestParameters: DefaultApiUpdateWorkspaceRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateWorkspace(requestParameters.id, requestParameters.updateWorkspaceBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the member of a workspace\n     * @param {DefaultApiUpdateWorkspaceMemberRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateWorkspaceMember(requestParameters: DefaultApiUpdateWorkspaceMemberRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateWorkspaceMember(requestParameters.id, requestParameters.updateWorkspaceMemberBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Inserts or updates rows based on a key. If a row exists, it is updated; otherwise, a new row is created.\n     * @param {DefaultApiUpsertTableRowsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public upsertTableRows(requestParameters: DefaultApiUpsertTableRowsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).upsertTableRows(requestParameters.table, requestParameters.upsertTableRowsBody, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n/**\n * @export\n */\nexport const BreakDownWorkspaceUsageByBotTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\nexport type BreakDownWorkspaceUsageByBotTypeEnum = typeof BreakDownWorkspaceUsageByBotTypeEnum[keyof typeof BreakDownWorkspaceUsageByBotTypeEnum];\n/**\n * @export\n */\nexport const GetBotWebchatTypeEnum = {\n    Preconfigured: 'preconfigured',\n    Configurable: 'configurable',\n    Fullscreen: 'fullscreen',\n    SharableUrl: 'sharableUrl'\n} as const;\nexport type GetBotWebchatTypeEnum = typeof GetBotWebchatTypeEnum[keyof typeof GetBotWebchatTypeEnum];\n/**\n * @export\n */\nexport const GetOrSetStateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration',\n    Task: 'task'\n} as const;\nexport type GetOrSetStateTypeEnum = typeof GetOrSetStateTypeEnum[keyof typeof GetOrSetStateTypeEnum];\n/**\n * @export\n */\nexport const GetStateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration',\n    Task: 'task'\n} as const;\nexport type GetStateTypeEnum = typeof GetStateTypeEnum[keyof typeof GetStateTypeEnum];\n/**\n * @export\n */\nexport const GetUsageTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\nexport type GetUsageTypeEnum = typeof GetUsageTypeEnum[keyof typeof GetUsageTypeEnum];\n/**\n * @export\n */\nexport const GetWorkspaceQuotaTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\nexport type GetWorkspaceQuotaTypeEnum = typeof GetWorkspaceQuotaTypeEnum[keyof typeof GetWorkspaceQuotaTypeEnum];\n/**\n * @export\n */\nexport const ListTasksStatusEnum = {\n    Pending: 'pending',\n    InProgress: 'in_progress',\n    Failed: 'failed',\n    Completed: 'completed',\n    Blocked: 'blocked',\n    Paused: 'paused',\n    Timeout: 'timeout',\n    Cancelled: 'cancelled'\n} as const;\nexport type ListTasksStatusEnum = typeof ListTasksStatusEnum[keyof typeof ListTasksStatusEnum];\n/**\n * @export\n */\nexport const ListUsageHistoryTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\nexport type ListUsageHistoryTypeEnum = typeof ListUsageHistoryTypeEnum[keyof typeof ListUsageHistoryTypeEnum];\n/**\n * @export\n */\nexport const ListWorkspaceUsagesTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\nexport type ListWorkspaceUsagesTypeEnum = typeof ListWorkspaceUsagesTypeEnum[keyof typeof ListWorkspaceUsagesTypeEnum];\n/**\n * @export\n */\nexport const PatchStateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration',\n    Task: 'task'\n} as const;\nexport type PatchStateTypeEnum = typeof PatchStateTypeEnum[keyof typeof PatchStateTypeEnum];\n/**\n * @export\n */\nexport const SetStateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration',\n    Task: 'task'\n} as const;\nexport type SetStateTypeEnum = typeof SetStateTypeEnum[keyof typeof SetStateTypeEnum];\n\n\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Botpress API\n * API for Botpress Cloud\n *\n * The version of the OpenAPI document: 0.24.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"https://api.botpress.cloud\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Botpress API\n * API for Botpress Cloud\n *\n * The version of the OpenAPI document: 0.24.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n\nimport crypto from 'crypto'\n\nconst codes = {\n  HTTP_STATUS_BAD_REQUEST: 400,\n  HTTP_STATUS_UNAUTHORIZED: 401,\n  HTTP_STATUS_PAYMENT_REQUIRED: 402,\n  HTTP_STATUS_FORBIDDEN: 403,\n  HTTP_STATUS_NOT_FOUND: 404,\n  HTTP_STATUS_METHOD_NOT_ALLOWED: 405,\n  HTTP_STATUS_REQUEST_TIMEOUT: 408,\n  HTTP_STATUS_CONFLICT: 409,\n  HTTP_STATUS_PAYLOAD_TOO_LARGE: 413,\n  HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE: 415,\n  HTTP_STATUS_TOO_MANY_REQUESTS: 429,\n  HTTP_STATUS_INTERNAL_SERVER_ERROR: 500,\n  HTTP_STATUS_NOT_IMPLEMENTED: 501,\n  HTTP_STATUS_BAD_GATEWAY: 502,\n  HTTP_STATUS_SERVICE_UNAVAILABLE: 503,\n  HTTP_STATUS_GATEWAY_TIMEOUT: 504,\n} as const\n\ntype ErrorCode = typeof codes[keyof typeof codes]\n\ndeclare const window: any\ntype CryptoLib = { getRandomValues(array: Uint8Array): Uint8Array }\n\nconst cryptoLibPolyfill: CryptoLib = {\n  // Fallback in case crypto isn't available.\n  getRandomValues: (array: Uint8Array) => new Uint8Array(array.map(() => Math.floor(Math.random() * 256))),\n}\n\nlet cryptoLib: CryptoLib =\n  typeof window !== 'undefined' && typeof window.document !== 'undefined'\n    ? window.crypto // Note: On browsers we need to use window.crypto instead of the imported crypto module as the latter is externalized and doesn't have getRandomValues().\n    : crypto\n\nif (!cryptoLib.getRandomValues) {\n  // Use a polyfill in older environments that have a crypto implementaton missing getRandomValues()\n  cryptoLib = cryptoLibPolyfill\n}\n\nabstract class BaseApiError<Code extends ErrorCode, Type extends string, Description extends string> extends Error {\n  public readonly isApiError = true\n\n  constructor(\n    public readonly code: Code,\n    public readonly description: Description,\n    public readonly type: Type,\n    public override readonly message: string,\n    public readonly error?: Error,\n    public readonly id?: string\n  ) {\n    super(message)\n\n    if (!this.id) {\n      this.id = BaseApiError.generateId()\n    }\n  }\n\n  format() {\n    return `[${this.type}] ${this.message} (Error ID: ${this.id})`\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      code: this.code,\n      type: this.type,\n      message: this.message,\n    }\n  }\n\n  static generateId() {\n    const prefix = this.getPrefix();\n    const timestamp = new Date().toISOString().replace(/[\\-:TZ]/g, \"\").split(\".\")[0] // UTC time in YYMMDDHHMMSS format\n\n    const randomSuffixByteLength = 4\n    const randomHexSuffix = Array.from(cryptoLib.getRandomValues(new Uint8Array(randomSuffixByteLength)))\n      .map(x => x.toString(16).padStart(2, '0'))\n      .join('')\n      .toUpperCase()\n    \n    return `${prefix}_${timestamp}x${randomHexSuffix}`\n  }\n\n  private static getPrefix() {\n    if (typeof window !== 'undefined' && typeof window.document !== 'undefined') {\n      // Browser environment\n      return 'err_bwsr'\n    }\n    return 'err'\n  }\n}\n\nconst isObject = (obj: unknown): obj is object => typeof obj === 'object' && !Array.isArray(obj) && obj !== null\n\nexport const isApiError = (thrown: unknown): thrown is ApiError => {\n  return thrown instanceof BaseApiError || isObject(thrown) && (thrown as ApiError).isApiError === true\n}\n\ntype UnknownType = 'Unknown'\n\n/**\n *  An unknown error occurred\n */\nexport class UnknownError extends BaseApiError<500, UnknownType, 'An unknown error occurred'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(500, 'An unknown error occurred', 'Unknown', message, error, id)\n  }\n}\n\ntype InternalType = 'Internal'\n\n/**\n *  An internal error occurred\n */\nexport class InternalError extends BaseApiError<500, InternalType, 'An internal error occurred'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(500, 'An internal error occurred', 'Internal', message, error, id)\n  }\n}\n\ntype UnauthorizedType = 'Unauthorized'\n\n/**\n *  The request requires to be authenticated.\n */\nexport class UnauthorizedError extends BaseApiError<401, UnauthorizedType, 'The request requires to be authenticated.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(401, 'The request requires to be authenticated.', 'Unauthorized', message, error, id)\n  }\n}\n\ntype ForbiddenType = 'Forbidden'\n\n/**\n *  The requested action can\\'t be peform by this resource.\n */\nexport class ForbiddenError extends BaseApiError<403, ForbiddenType, 'The requested action can\\'t be peform by this resource.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(403, 'The requested action can\\'t be peform by this resource.', 'Forbidden', message, error, id)\n  }\n}\n\ntype PayloadTooLargeType = 'PayloadTooLarge'\n\n/**\n *  The request payload is too large.\n */\nexport class PayloadTooLargeError extends BaseApiError<413, PayloadTooLargeType, 'The request payload is too large.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(413, 'The request payload is too large.', 'PayloadTooLarge', message, error, id)\n  }\n}\n\ntype InvalidPayloadType = 'InvalidPayload'\n\n/**\n *  The request payload is invalid.\n */\nexport class InvalidPayloadError extends BaseApiError<400, InvalidPayloadType, 'The request payload is invalid.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The request payload is invalid.', 'InvalidPayload', message, error, id)\n  }\n}\n\ntype UnsupportedMediaTypeType = 'UnsupportedMediaType'\n\n/**\n *  The request is invalid because the content-type is not supported.\n */\nexport class UnsupportedMediaTypeError extends BaseApiError<415, UnsupportedMediaTypeType, 'The request is invalid because the content-type is not supported.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(415, 'The request is invalid because the content-type is not supported.', 'UnsupportedMediaType', message, error, id)\n  }\n}\n\ntype MethodNotFoundType = 'MethodNotFound'\n\n/**\n *  The requested method does not exist.\n */\nexport class MethodNotFoundError extends BaseApiError<405, MethodNotFoundType, 'The requested method does not exist.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(405, 'The requested method does not exist.', 'MethodNotFound', message, error, id)\n  }\n}\n\ntype ResourceNotFoundType = 'ResourceNotFound'\n\n/**\n *  The requested resource does not exist.\n */\nexport class ResourceNotFoundError extends BaseApiError<404, ResourceNotFoundType, 'The requested resource does not exist.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(404, 'The requested resource does not exist.', 'ResourceNotFound', message, error, id)\n  }\n}\n\ntype InvalidJsonSchemaType = 'InvalidJsonSchema'\n\n/**\n *  The provided JSON schema is invalid.\n */\nexport class InvalidJsonSchemaError extends BaseApiError<400, InvalidJsonSchemaType, 'The provided JSON schema is invalid.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided JSON schema is invalid.', 'InvalidJsonSchema', message, error, id)\n  }\n}\n\ntype InvalidDataFormatType = 'InvalidDataFormat'\n\n/**\n *  The provided data doesn\\'t respect the provided JSON schema.\n */\nexport class InvalidDataFormatError extends BaseApiError<400, InvalidDataFormatType, 'The provided data doesn\\'t respect the provided JSON schema.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided data doesn\\'t respect the provided JSON schema.', 'InvalidDataFormat', message, error, id)\n  }\n}\n\ntype InvalidIdentifierType = 'InvalidIdentifier'\n\n/**\n *  The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.\n */\nexport class InvalidIdentifierError extends BaseApiError<400, InvalidIdentifierType, 'The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.', 'InvalidIdentifier', message, error, id)\n  }\n}\n\ntype RelationConflictType = 'RelationConflict'\n\n/**\n *  The resource is related with a different resource that the one referenced in the request. This is usually caused when providing two resource identifiers that aren\\'t linked together.\n */\nexport class RelationConflictError extends BaseApiError<409, RelationConflictType, 'The resource is related with a different resource that the one referenced in the request. This is usually caused when providing two resource identifiers that aren\\'t linked together.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(409, 'The resource is related with a different resource that the one referenced in the request. This is usually caused when providing two resource identifiers that aren\\'t linked together.', 'RelationConflict', message, error, id)\n  }\n}\n\ntype ReferenceConstraintType = 'ReferenceConstraint'\n\n/**\n *  The resource cannot be deleted because it\\'s referenced by another resource\n */\nexport class ReferenceConstraintError extends BaseApiError<409, ReferenceConstraintType, 'The resource cannot be deleted because it\\'s referenced by another resource'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(409, 'The resource cannot be deleted because it\\'s referenced by another resource', 'ReferenceConstraint', message, error, id)\n  }\n}\n\ntype ReferenceNotFoundType = 'ReferenceNotFound'\n\n/**\n *  The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.\n */\nexport class ReferenceNotFoundError extends BaseApiError<400, ReferenceNotFoundType, 'The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.', 'ReferenceNotFound', message, error, id)\n  }\n}\n\ntype InvalidQueryType = 'InvalidQuery'\n\n/**\n *  The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.\n */\nexport class InvalidQueryError extends BaseApiError<400, InvalidQueryType, 'The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.', 'InvalidQuery', message, error, id)\n  }\n}\n\ntype RuntimeType = 'Runtime'\n\n/**\n *  An error happened during the execution of a runtime (bot or integration).\n */\nexport class RuntimeError extends BaseApiError<400, RuntimeType, 'An error happened during the execution of a runtime (bot or integration).'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'An error happened during the execution of a runtime (bot or integration).', 'Runtime', message, error, id)\n  }\n}\n\ntype AlreadyExistsType = 'AlreadyExists'\n\n/**\n *  The record attempted to be created already exists.\n */\nexport class AlreadyExistsError extends BaseApiError<409, AlreadyExistsType, 'The record attempted to be created already exists.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(409, 'The record attempted to be created already exists.', 'AlreadyExists', message, error, id)\n  }\n}\n\ntype RateLimitedType = 'RateLimited'\n\n/**\n *  The request has been rate limited.\n */\nexport class RateLimitedError extends BaseApiError<429, RateLimitedType, 'The request has been rate limited.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(429, 'The request has been rate limited.', 'RateLimited', message, error, id)\n  }\n}\n\ntype PaymentRequiredType = 'PaymentRequired'\n\n/**\n *  A payment is required to perform this request.\n */\nexport class PaymentRequiredError extends BaseApiError<402, PaymentRequiredType, 'A payment is required to perform this request.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(402, 'A payment is required to perform this request.', 'PaymentRequired', message, error, id)\n  }\n}\n\ntype QuotaExceededType = 'QuotaExceeded'\n\n/**\n *  The request exceeds the allowed quota. Quotas are a soft limit that can be increased.\n */\nexport class QuotaExceededError extends BaseApiError<403, QuotaExceededType, 'The request exceeds the allowed quota. Quotas are a soft limit that can be increased.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(403, 'The request exceeds the allowed quota. Quotas are a soft limit that can be increased.', 'QuotaExceeded', message, error, id)\n  }\n}\n\ntype LimitExceededType = 'LimitExceeded'\n\n/**\n *  The request exceeds the allowed limit. Limits are a hard limit that cannot be increased.\n */\nexport class LimitExceededError extends BaseApiError<413, LimitExceededType, 'The request exceeds the allowed limit. Limits are a hard limit that cannot be increased.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(413, 'The request exceeds the allowed limit. Limits are a hard limit that cannot be increased.', 'LimitExceeded', message, error, id)\n  }\n}\n\ntype BreakingChangesType = 'BreakingChanges'\n\n/**\n *  Request payload contains breaking changes which is not allowed for this resource without a version increment.\n */\nexport class BreakingChangesError extends BaseApiError<400, BreakingChangesType, 'Request payload contains breaking changes which is not allowed for this resource without a version increment.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'Request payload contains breaking changes which is not allowed for this resource without a version increment.', 'BreakingChanges', message, error, id)\n  }\n}\n\nexport type ErrorType =\n  | 'Unknown'\n  | 'Internal'\n  | 'Unauthorized'\n  | 'Forbidden'\n  | 'PayloadTooLarge'\n  | 'InvalidPayload'\n  | 'UnsupportedMediaType'\n  | 'MethodNotFound'\n  | 'ResourceNotFound'\n  | 'InvalidJsonSchema'\n  | 'InvalidDataFormat'\n  | 'InvalidIdentifier'\n  | 'RelationConflict'\n  | 'ReferenceConstraint'\n  | 'ReferenceNotFound'\n  | 'InvalidQuery'\n  | 'Runtime'\n  | 'AlreadyExists'\n  | 'RateLimited'\n  | 'PaymentRequired'\n  | 'QuotaExceeded'\n  | 'LimitExceeded'\n  | 'BreakingChanges'\n\nexport type ApiError =\n  | UnknownError\n  | InternalError\n  | UnauthorizedError\n  | ForbiddenError\n  | PayloadTooLargeError\n  | InvalidPayloadError\n  | UnsupportedMediaTypeError\n  | MethodNotFoundError\n  | ResourceNotFoundError\n  | InvalidJsonSchemaError\n  | InvalidDataFormatError\n  | InvalidIdentifierError\n  | RelationConflictError\n  | ReferenceConstraintError\n  | ReferenceNotFoundError\n  | InvalidQueryError\n  | RuntimeError\n  | AlreadyExistsError\n  | RateLimitedError\n  | PaymentRequiredError\n  | QuotaExceededError\n  | LimitExceededError\n  | BreakingChangesError\n\nconst errorTypes: { [type: string]: new (message: string, error?: Error, id?: string) => ApiError } = {\n  Unknown: UnknownError,\n  Internal: InternalError,\n  Unauthorized: UnauthorizedError,\n  Forbidden: ForbiddenError,\n  PayloadTooLarge: PayloadTooLargeError,\n  InvalidPayload: InvalidPayloadError,\n  UnsupportedMediaType: UnsupportedMediaTypeError,\n  MethodNotFound: MethodNotFoundError,\n  ResourceNotFound: ResourceNotFoundError,\n  InvalidJsonSchema: InvalidJsonSchemaError,\n  InvalidDataFormat: InvalidDataFormatError,\n  InvalidIdentifier: InvalidIdentifierError,\n  RelationConflict: RelationConflictError,\n  ReferenceConstraint: ReferenceConstraintError,\n  ReferenceNotFound: ReferenceNotFoundError,\n  InvalidQuery: InvalidQueryError,\n  Runtime: RuntimeError,\n  AlreadyExists: AlreadyExistsError,\n  RateLimited: RateLimitedError,\n  PaymentRequired: PaymentRequiredError,\n  QuotaExceeded: QuotaExceededError,\n  LimitExceeded: LimitExceededError,\n  BreakingChanges: BreakingChangesError,\n}\n\nexport const errorFrom = (err: unknown): ApiError => {\n  if (isApiError(err)) {\n    return err\n  }\n  else if (err instanceof Error) {\n    return new UnknownError(err.message, err)\n  }\n  else if (typeof err === 'string') {\n    return new UnknownError(err)\n  }\n  else {\n    return getApiErrorFromObject(err)\n  }\n}\n\nfunction getApiErrorFromObject(err: any) {\n  // Check if it's an deserialized API error object\n  if (typeof err === 'object' && 'code' in err && 'type' in err && 'id' in err && 'message' in err && typeof err.type === 'string' && typeof err.message === 'string') {\n    const ErrorClass = errorTypes[err.type]\n    if (!ErrorClass) {\n      return new UnknownError(`An unclassified API error occurred: ${err.message} (Type: ${err.type}, Code: ${err.code})`)\n    }\n\n    return new ErrorClass(err.message, undefined, <string>err.id || 'UNKNOWN') // If error ID was not received do not pass undefined to generate a new one, flag it as UNKNOWN so we can fix the issue.\n  }\n\n  return new UnknownError('An invalid error occurred: ' + JSON.stringify(err))\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "AlreadyExistsError", "BreakingChangesError", "Client", "ForbiddenError", "InternalError", "InvalidDataFormatError", "InvalidIdentifierError", "InvalidJsonSchemaError", "InvalidPayloadError", "InvalidQueryError", "LimitExceededError", "MethodNotFoundError", "PayloadTooLargeError", "PaymentRequiredError", "QuotaExceededError", "RateLimitedError", "ReferenceConstraintError", "ReferenceNotFoundError", "RelationConflictError", "ResourceNotFoundError", "RuntimeError", "UnauthorizedError", "UnknownError", "UnsupportedMediaTypeError", "axios", "errorFrom", "isApiError", "__toCommonJS", "import_axios", "import_browser_or_node", "import_http", "import_https", "import_browser_or_node", "defaultApiUrl", "defaultTimeout", "apiUrlEnvName", "botIdEnvName", "integrationIdEnvName", "workspaceIdEnvName", "tokenEnvName", "getClientConfig", "clientProps", "props", "readEnvConfig", "headers", "apiUrl", "timeout", "getNodeConfig", "config", "token", "import_axios", "import_axios", "import_axios", "BASE_PATH", "BaseAPI", "configuration", "basePath", "BASE_PATH", "axios", "globalAxios", "RequiredError", "field", "msg", "DUMMY_BASE_URL", "assertParamExists", "functionName", "paramName", "paramValue", "RequiredError", "setFlattenedQueryParams", "urlSearchParams", "parameter", "key", "item", "currentKey", "setSearchParams", "url", "objects", "searchParams", "serializeDataIfNeeded", "value", "requestOptions", "configuration", "nonString", "toPathString", "createRequestFunction", "axiosArgs", "globalAxios", "BASE_PATH", "axios", "basePath", "axiosRequestArgs", "DefaultApiAxiosParamCreator", "configuration", "id", "addParticipantBody", "options", "assertParamExists", "localVarPath", "localVarUrlObj", "DUMMY_BASE_URL", "baseOptions", "localVarRequestOptions", "localVarHeaderParameter", "localVarQueryParameter", "setSearchParams", "headersFromBaseOptions", "serializeDataIfNeeded", "toPathString", "type", "period", "callActionBody", "changeAISpendQuotaBody", "changeWorkspacePlanBody", "chargeWorkspaceUnpaidInvoicesBody", "checkHandleAvailabilityBody", "configureIntegrationBody", "createBotBody", "createConversationBody", "createEventBody", "xName", "xTags", "xAccessPolicies", "xIndex", "contentType", "contentLength", "createFileBody", "createIntegrationBody", "createIntegrationApiKeyBody", "createMessageBody", "createPersonalAccessTokenBody", "createTableBody", "table", "createTableRowsBody", "createTaskBody", "createUserBody", "createWorkspaceBody", "createWorkspaceMemberBody", "issueId", "deleteTableRowsBody", "sourceTableId", "duplicateTableBody", "findTableRowsBody", "key", "nextToken", "startDate", "endDate", "timeStart", "timeEnd", "name", "version", "getOrCreateConversationBody", "getOrCreateMessageBody", "getOrCreateTableBody", "getOrCreateUserBody", "getOrSetStateBody", "userId", "introspectBody", "taskId", "botId", "dev", "tags", "participantIds", "conversationId", "messageId", "status", "integrationVersionId", "parentTaskId", "patchStateBody", "renameTableColumnBody", "runVrlBody", "query", "contextDepth", "limit", "setAccountPreferenceBody", "setStateBody", "setWorkspacePaymentMethodBody", "transferBotBody", "updateAccountBody", "updateBotBody", "updateConversationBody", "updateFileMetadataBody", "updateIntegrationBody", "updateMessageBody", "updateTableBody", "updateTableRowsBody", "updateTaskBody", "updateUserBody", "updateWorkspaceBody", "updateWorkspaceMemberBody", "upsertTableRowsBody", "DefaultApiFp", "localVarAxiosParamCreator", "localVarAxiosArgs", "createRequestFunction", "globalAxios", "BASE_PATH", "DefaultApi", "BaseAPI", "requestParameters", "options", "DefaultApiFp", "request", "import_crypto", "cryptoLibPolyfill", "array", "cryptoLib", "crypto", "BaseApiError", "code", "description", "type", "message", "error", "id", "prefix", "timestamp", "randomSuffixByteLength", "randomHexSuffix", "x", "isObject", "obj", "isApiError", "thrown", "UnknownError", "InternalError", "UnauthorizedError", "ForbiddenError", "PayloadTooLargeError", "InvalidPayloadError", "UnsupportedMediaTypeError", "MethodNotFoundError", "ResourceNotFoundError", "InvalidJsonSchemaError", "InvalidDataFormatError", "InvalidIdentifierError", "RelationConflictError", "ReferenceConstraintError", "ReferenceNotFoundError", "InvalidQueryError", "RuntimeError", "AlreadyExistsError", "RateLimitedError", "PaymentRequiredError", "QuotaExceededError", "LimitExceededError", "BreakingChangesError", "errorTypes", "errorFrom", "err", "getApiErrorFromObject", "ErrorClass", "ApiClient", "configuration", "basePath", "axiosInstance", "DefaultApi", "createConversationBody", "res", "getError", "props", "getOrCreateConversationBody", "id", "updateConversationBody", "e", "addParticipantBody", "createEventBody", "createMessageBody", "getOrCreateMessageBody", "updateMessageBody", "createUserBody", "getOrCreateUserBody", "updateUserBody", "type", "name", "setStateBody", "getOrSetStateBody", "patchStateBody", "callActionBody", "configureIntegrationBody", "createTaskBody", "updateTaskBody", "runVrlBody", "updateAccountBody", "createPersonalAccessTokenBody", "key", "setAccountPreferenceBody", "createBotBody", "updateBotBody", "transferBotBody", "setWorkspacePaymentMethodBody", "chargeWorkspaceUnpaidInvoicesBody", "createWorkspaceBody", "updateWorkspaceBody", "checkHandleAvailabilityBody", "changeWorkspacePlanBody", "createWorkspaceMemberBody", "updateWorkspaceMemberBody", "createIntegrationApiKeyBody", "createIntegrationBody", "updateIntegrationBody", "changeAISpendQuotaBody", "introspectBody", "xName", "xTags", "xAccessPolicies", "xIndex", "contentType", "contentLength", "createFileBody", "updateFileMetadataBody", "table", "getOrCreateTableBody", "createTableBody", "sourceTableId", "duplicateTableBody", "updateTableBody", "renameTableColumnBody", "findTableRowsBody", "createTableRowsBody", "deleteTableRowsBody", "updateTableRowsBody", "upsertTableRowsBody", "err", "axios", "errorFrom", "axios", "_100mb", "maxBodyLength", "maxContentLength", "Client", "ApiClient", "clientProps", "clientConfig", "getClientConfig", "axiosClient", "createAxiosClient", "name", "data", "index", "tags", "contentType", "contentLength", "accessPolicies", "headers", "e", "getError", "config", "withCredentials", "timeout", "http", "https", "err", "errorFrom"]
}
