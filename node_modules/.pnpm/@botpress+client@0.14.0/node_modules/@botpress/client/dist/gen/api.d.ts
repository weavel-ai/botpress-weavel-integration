/**
 * Botpress API
 * API for Botpress Cloud
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface Account
 */
export interface Account {
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'displayName'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'profilePicture'?: string;
    /**
     * Creation date of the [Account](#schema_account) in ISO 8601 format
     * @type {string}
     * @memberof Account
     */
    'createdAt': string;
}
/**
 *
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'taskId': string;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'category': ActivityCategoryEnum;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof Activity
     */
    'data': {
        [key: string]: any;
    };
    /**
     * Creation date of the activity in ISO 8601 format
     * @type {string}
     * @memberof Activity
     */
    'createdAt': string;
}
export declare const ActivityCategoryEnum: {
    readonly Unknown: "unknown";
    readonly Capture: "capture";
    readonly BotMessage: "bot_message";
    readonly UserMessage: "user_message";
    readonly AgentMessage: "agent_message";
    readonly Event: "event";
    readonly Action: "action";
    readonly TaskStatus: "task_status";
    readonly SubtaskStatus: "subtask_status";
    readonly Exception: "exception";
};
export type ActivityCategoryEnum = typeof ActivityCategoryEnum[keyof typeof ActivityCategoryEnum];
/**
 *
 * @export
 * @interface AddParticipantBody
 */
export interface AddParticipantBody {
    /**
     * User id
     * @type {string}
     * @memberof AddParticipantBody
     */
    'userId': string;
}
/**
 *
 * @export
 * @interface AddParticipantResponse
 */
export interface AddParticipantResponse {
    /**
     *
     * @type {User}
     * @memberof AddParticipantResponse
     */
    'participant': User;
}
/**
 *
 * @export
 * @interface Bot
 */
export interface Bot {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Bot
     */
    'id': string;
    /**
     * Creation date of the [Bot](#schema_bot) in ISO 8601 format
     * @type {string}
     * @memberof Bot
     */
    'createdAt': string;
    /**
     * Updating date of the [Bot](#schema_bot) in ISO 8601 format
     * @type {string}
     * @memberof Bot
     */
    'updatedAt': string;
    /**
     * Title describing the task
     * @type {string}
     * @memberof Bot
     */
    'signingSecret': string;
    /**
     * A mapping of integrations to their configuration
     * @type {{ [key: string]: BotIntegrationsValue; }}
     * @memberof Bot
     */
    'integrations': {
        [key: string]: BotIntegrationsValue;
    };
    /**
     *
     * @type {BotUser}
     * @memberof Bot
     */
    'user': BotUser;
    /**
     *
     * @type {BotConversation}
     * @memberof Bot
     */
    'conversation': BotConversation;
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage}
     * @memberof Bot
     */
    'message': GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage;
    /**
     * A mapping of states to their definition
     * @type {{ [key: string]: CreateBotBodyStatesValue; }}
     * @memberof Bot
     */
    'states': {
        [key: string]: CreateBotBodyStatesValue;
    };
    /**
     *
     * @type {BotConfiguration}
     * @memberof Bot
     */
    'configuration': BotConfiguration;
    /**
     * Events definition
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; }}
     * @memberof Bot
     */
    'events': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue;
    };
    /**
     * Recurring events
     * @type {{ [key: string]: BotRecurringEventsValue; }}
     * @memberof Bot
     */
    'recurringEvents': {
        [key: string]: BotRecurringEventsValue;
    };
    /**
     *
     * @type {CreateBotBodySubscriptions}
     * @memberof Bot
     */
    'subscriptions': CreateBotBodySubscriptions;
    /**
     * Actions definition
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; }}
     * @memberof Bot
     */
    'actions': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue;
    };
    /**
     * Name of the [Bot](#schema_bot)
     * @type {string}
     * @memberof Bot
     */
    'name': string;
    /**
     * Last deployment date of the [Bot](#schema_bot) in the ISO 8601 format
     * @type {string}
     * @memberof Bot
     */
    'deployedAt'?: string;
    /**
     * Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations
     * @type {boolean}
     * @memberof Bot
     */
    'dev': boolean;
    /**
     * Id of the user that created the bot
     * @type {string}
     * @memberof Bot
     */
    'createdBy'?: string;
    /**
     * Indicates if the [Bot](#schema_bot) should be in always alive mode
     * @type {boolean}
     * @memberof Bot
     */
    'alwaysAlive': boolean;
    /**
     * Status of the bot
     * @type {string}
     * @memberof Bot
     */
    'status': BotStatusEnum;
    /**
     * Media files associated with the [Bot](#schema_bot)
     * @type {Array<BotMediasInner>}
     * @memberof Bot
     */
    'medias': Array<BotMediasInner>;
}
export declare const BotStatusEnum: {
    readonly Active: "active";
    readonly Deploying: "deploying";
};
export type BotStatusEnum = typeof BotStatusEnum[keyof typeof BotStatusEnum];
/**
 * Configuration of the bot
 * @export
 * @interface BotConfiguration
 */
export interface BotConfiguration {
    /**
     * Configuration data
     * @type {{ [key: string]: any; }}
     * @memberof BotConfiguration
     */
    'data': {
        [key: string]: any;
    };
    /**
     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.
     * @type {{ [key: string]: any; }}
     * @memberof BotConfiguration
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 * Conversation object configuration
 * @export
 * @interface BotConversation
 */
export interface BotConversation {
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}
     * @memberof BotConversation
     */
    'tags': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue;
    };
}
/**
 *
 * @export
 * @interface BotIntegrationsValue
 */
export interface BotIntegrationsValue {
    /**
     *
     * @type {boolean}
     * @memberof BotIntegrationsValue
     */
    'enabled': boolean;
    /**
     * Type of the task
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'name': string;
    /**
     * Type of the task
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'version': string;
    /**
     * Title describing the task
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'webhookUrl': string;
    /**
     * Type of the task
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'webhookId': string;
    /**
     * Title describing the task
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'identifier'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof BotIntegrationsValue
     */
    'configuration': {
        [key: string]: any;
    };
    /**
     *
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'status': BotIntegrationsValueStatusEnum;
    /**
     * Title describing the task
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'statusReason': string | null;
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'id': string;
    /**
     * Creation date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'createdAt': string;
    /**
     * Updating date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'updatedAt': string;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'title': string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'description': string;
    /**
     * URL of the icon of the integration. This is the icon that will be displayed in the UI
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'iconUrl': string;
    /**
     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.
     * @type {boolean}
     * @memberof BotIntegrationsValue
     */
    'public': boolean;
}
export declare const BotIntegrationsValueStatusEnum: {
    readonly RegistrationPending: "registration_pending";
    readonly Registered: "registered";
    readonly RegistrationFailed: "registration_failed";
    readonly UnregistrationPending: "unregistration_pending";
    readonly Unregistered: "unregistered";
    readonly UnregistrationFailed: "unregistration_failed";
};
export type BotIntegrationsValueStatusEnum = typeof BotIntegrationsValueStatusEnum[keyof typeof BotIntegrationsValueStatusEnum];
/**
 *
 * @export
 * @interface BotMediasInner
 */
export interface BotMediasInner {
    /**
     * URL of the media file
     * @type {string}
     * @memberof BotMediasInner
     */
    'url': string;
    /**
     * Name of the media file
     * @type {string}
     * @memberof BotMediasInner
     */
    'name': string;
}
/**
 *
 * @export
 * @interface BotRecurringEventsValue
 */
export interface BotRecurringEventsValue {
    /**
     *
     * @type {BotRecurringEventsValueSchedule}
     * @memberof BotRecurringEventsValue
     */
    'schedule': BotRecurringEventsValueSchedule;
    /**
     * Type of the task
     * @type {string}
     * @memberof BotRecurringEventsValue
     */
    'type': string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof BotRecurringEventsValue
     */
    'payload': {
        [key: string]: any;
    };
    /**
     * The number of times the recurring event failed to run. This counter resets once the recurring event runs successfully.
     * @type {number}
     * @memberof BotRecurringEventsValue
     */
    'failedAttempts': number;
    /**
     * The reason why the recurring event failed to run in the last attempt.
     * @type {string}
     * @memberof BotRecurringEventsValue
     */
    'lastFailureReason': string | null;
}
/**
 *
 * @export
 * @interface BotRecurringEventsValueSchedule
 */
export interface BotRecurringEventsValueSchedule {
    /**
     * Type of the task
     * @type {string}
     * @memberof BotRecurringEventsValueSchedule
     */
    'cron': string;
}
/**
 * User object configuration
 * @export
 * @interface BotUser
 */
export interface BotUser {
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}
     * @memberof BotUser
     */
    'tags': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue;
    };
}
/**
 *
 * @export
 * @interface BreakDownWorkspaceUsageByBotResponse
 */
export interface BreakDownWorkspaceUsageByBotResponse {
    /**
     *
     * @type {Array<BreakDownWorkspaceUsageByBotResponseDataInner>}
     * @memberof BreakDownWorkspaceUsageByBotResponse
     */
    'data': Array<BreakDownWorkspaceUsageByBotResponseDataInner>;
}
/**
 *
 * @export
 * @interface BreakDownWorkspaceUsageByBotResponseDataInner
 */
export interface BreakDownWorkspaceUsageByBotResponseDataInner {
    /**
     *
     * @type {string}
     * @memberof BreakDownWorkspaceUsageByBotResponseDataInner
     */
    'botId': string;
    /**
     *
     * @type {number}
     * @memberof BreakDownWorkspaceUsageByBotResponseDataInner
     */
    'value': number;
}
/**
 *
 * @export
 * @interface CallActionBody
 */
export interface CallActionBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CallActionBody
     */
    'type': string;
    /**
     * Input of the action
     * @type {{ [key: string]: any; }}
     * @memberof CallActionBody
     */
    'input': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface CallActionResponse
 */
export interface CallActionResponse {
    /**
     * Input of the action
     * @type {{ [key: string]: any; }}
     * @memberof CallActionResponse
     */
    'output': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface ChangeAISpendQuotaBody
 */
export interface ChangeAISpendQuotaBody {
    /**
     *
     * @type {number}
     * @memberof ChangeAISpendQuotaBody
     */
    'monthlySpendingLimit': number;
}
/**
 *
 * @export
 * @interface ChangeWorkspacePlanBody
 */
export interface ChangeWorkspacePlanBody {
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanBody
     */
    'plan': ChangeWorkspacePlanBodyPlanEnum;
}
export declare const ChangeWorkspacePlanBodyPlanEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type ChangeWorkspacePlanBodyPlanEnum = typeof ChangeWorkspacePlanBodyPlanEnum[keyof typeof ChangeWorkspacePlanBodyPlanEnum];
/**
 *
 * @export
 * @interface ChangeWorkspacePlanResponse
 */
export interface ChangeWorkspacePlanResponse {
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof ChangeWorkspacePlanResponse
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'accountType': ChangeWorkspacePlanResponseAccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'billingVersion': ChangeWorkspacePlanResponseBillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'plan': ChangeWorkspacePlanResponsePlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof ChangeWorkspacePlanResponse
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof ChangeWorkspacePlanResponse
     */
    'spendingLimit': number;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'about'?: string;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'profilePicture'?: string;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'contactEmail'?: string;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'website'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ChangeWorkspacePlanResponse
     */
    'socialAccounts'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof ChangeWorkspacePlanResponse
     */
    'isPublic'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'handle'?: string;
}
export declare const ChangeWorkspacePlanResponseAccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type ChangeWorkspacePlanResponseAccountTypeEnum = typeof ChangeWorkspacePlanResponseAccountTypeEnum[keyof typeof ChangeWorkspacePlanResponseAccountTypeEnum];
export declare const ChangeWorkspacePlanResponseBillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type ChangeWorkspacePlanResponseBillingVersionEnum = typeof ChangeWorkspacePlanResponseBillingVersionEnum[keyof typeof ChangeWorkspacePlanResponseBillingVersionEnum];
export declare const ChangeWorkspacePlanResponsePlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type ChangeWorkspacePlanResponsePlanEnum = typeof ChangeWorkspacePlanResponsePlanEnum[keyof typeof ChangeWorkspacePlanResponsePlanEnum];
/**
 *
 * @export
 * @interface ChargeWorkspaceUnpaidInvoicesBody
 */
export interface ChargeWorkspaceUnpaidInvoicesBody {
    /**
     *
     * @type {Array<string>}
     * @memberof ChargeWorkspaceUnpaidInvoicesBody
     */
    'invoiceIds'?: Array<string>;
}
/**
 *
 * @export
 * @interface ChargeWorkspaceUnpaidInvoicesResponse
 */
export interface ChargeWorkspaceUnpaidInvoicesResponse {
    /**
     * Invoices that were successfully charged by this request.
     * @type {Array<ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner>}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponse
     */
    'chargedInvoices': Array<ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner>;
    /**
     * Invoices that failed to be charged by this request.
     * @type {Array<ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner>}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponse
     */
    'failedInvoices': Array<ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner>;
}
/**
 *
 * @export
 * @interface ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner
 */
export interface ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner {
    /**
     *
     * @type {string}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner
     */
    'id': string;
    /**
     *
     * @type {number}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner
     */
    'amount': number;
}
/**
 *
 * @export
 * @interface ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner
 */
export interface ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner {
    /**
     *
     * @type {string}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner
     */
    'id': string;
    /**
     *
     * @type {number}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner
     */
    'amount': number;
    /**
     *
     * @type {string}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner
     */
    'failedReason': string;
}
/**
 *
 * @export
 * @interface CheckHandleAvailabilityBody
 */
export interface CheckHandleAvailabilityBody {
    /**
     *
     * @type {string}
     * @memberof CheckHandleAvailabilityBody
     */
    'handle': string;
}
/**
 *
 * @export
 * @interface CheckHandleAvailabilityResponse
 */
export interface CheckHandleAvailabilityResponse {
    /**
     *
     * @type {boolean}
     * @memberof CheckHandleAvailabilityResponse
     */
    'available': boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof CheckHandleAvailabilityResponse
     */
    'suggestions': Array<string>;
    /**
     *
     * @type {string}
     * @memberof CheckHandleAvailabilityResponse
     */
    'usedBy'?: string;
}
/**
 *
 * @export
 * @interface Column
 */
export interface Column {
    /**
     * Unique identifier for the column.
     * @type {string}
     * @memberof Column
     */
    'id'?: string;
    /**
     * Name of the column, must be within length limits.
     * @type {string}
     * @memberof Column
     */
    'name': string;
    /**
     * Optional descriptive text about the column.
     * @type {string}
     * @memberof Column
     */
    'description'?: string;
    /**
     * Indicates if the column is vectorized and searchable.
     * @type {boolean}
     * @memberof Column
     */
    'searchable'?: boolean;
    /**
     * Specifies the data type of the column. Use \"object\" for complex data structures.
     * @type {string}
     * @memberof Column
     */
    'type': ColumnTypeEnum;
    /**
     * TypeScript typings for the column. Recommended if the type is \"object\", ex: \"\\{ foo: string; bar: number \\}\"
     * @type {string}
     * @memberof Column
     */
    'typings'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof Column
     */
    'schema'?: {
        [key: string]: any;
    };
}
export declare const ColumnTypeEnum: {
    readonly String: "string";
    readonly Number: "number";
    readonly Boolean: "boolean";
    readonly Date: "date";
    readonly Object: "object";
};
export type ColumnTypeEnum = typeof ColumnTypeEnum[keyof typeof ColumnTypeEnum];
/**
 *
 * @export
 * @interface ConfigureIntegrationBody
 */
export interface ConfigureIntegrationBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof ConfigureIntegrationBody
     */
    'identifier': string;
}
/**
 * The conversation object represents an exchange of messages between one or more users. A [Conversation](#schema_conversation) is always linked to an integration\'s channels. For example, a Slack channel represents a conversation.
 * @export
 * @interface Conversation
 */
export interface Conversation {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Conversation
     */
    'id': string;
    /**
     * Id of the current [Task](#schema_task)
     * @type {string}
     * @memberof Conversation
     */
    'currentTaskId'?: string;
    /**
     * Creation date of the [Conversation](#schema_conversation) in ISO 8601 format
     * @type {string}
     * @memberof Conversation
     */
    'createdAt': string;
    /**
     * Updating date of the [Conversation](#schema_conversation) in ISO 8601 format
     * @type {string}
     * @memberof Conversation
     */
    'updatedAt': string;
    /**
     * Name of the channel where the [Conversation](#schema_conversation) is happening
     * @type {string}
     * @memberof Conversation
     */
    'channel': string;
    /**
     * Name of the integration that created the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Conversation
     */
    'integration': string;
    /**
     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof Conversation
     */
    'tags': {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface CreateBotBody
 */
export interface CreateBotBody {
    /**
     * A mapping of states to their definition
     * @type {{ [key: string]: CreateBotBodyStatesValue; }}
     * @memberof CreateBotBody
     */
    'states'?: {
        [key: string]: CreateBotBodyStatesValue;
    };
    /**
     * Events definition
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; }}
     * @memberof CreateBotBody
     */
    'events'?: {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue;
    };
    /**
     *
     * @type {{ [key: string]: CreateBotBodyRecurringEventsValue; }}
     * @memberof CreateBotBody
     */
    'recurringEvents'?: {
        [key: string]: CreateBotBodyRecurringEventsValue;
    };
    /**
     *
     * @type {CreateBotBodySubscriptions}
     * @memberof CreateBotBody
     */
    'subscriptions'?: CreateBotBodySubscriptions;
    /**
     * Actions definition
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; }}
     * @memberof CreateBotBody
     */
    'actions'?: {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue;
    };
    /**
     *
     * @type {CreateBotBodyConfiguration}
     * @memberof CreateBotBody
     */
    'configuration'?: CreateBotBodyConfiguration;
    /**
     *
     * @type {CreateBotBodyUser}
     * @memberof CreateBotBody
     */
    'user'?: CreateBotBodyUser;
    /**
     *
     * @type {CreateBotBodyUser}
     * @memberof CreateBotBody
     */
    'conversation'?: CreateBotBodyUser;
    /**
     *
     * @type {CreateBotBodyUser}
     * @memberof CreateBotBody
     */
    'message'?: CreateBotBodyUser;
    /**
     * JavaScript code of the bot
     * @type {string}
     * @memberof CreateBotBody
     */
    'code'?: string;
    /**
     * Optional name for the bot, if not provided will be auto-generated
     * @type {string}
     * @memberof CreateBotBody
     */
    'name'?: string;
    /**
     * Media files associated with the [Bot](#schema_bot)
     * @type {Array<CreateBotBodyMediasInner>}
     * @memberof CreateBotBody
     */
    'medias'?: Array<CreateBotBodyMediasInner>;
    /**
     * URL of the [Bot](#schema_bot); Only available for dev bots
     * @type {string}
     * @memberof CreateBotBody
     */
    'url'?: string;
    /**
     * Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations
     * @type {boolean}
     * @memberof CreateBotBody
     */
    'dev'?: boolean;
}
/**
 *
 * @export
 * @interface CreateBotBodyConfiguration
 */
export interface CreateBotBodyConfiguration {
    /**
     * Configuration data
     * @type {{ [key: string]: any; }}
     * @memberof CreateBotBodyConfiguration
     */
    'data'?: {
        [key: string]: any;
    };
    /**
     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.
     * @type {{ [key: string]: any; }}
     * @memberof CreateBotBodyConfiguration
     */
    'schema'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface CreateBotBodyMediasInner
 */
export interface CreateBotBodyMediasInner {
    /**
     *
     * @type {string}
     * @memberof CreateBotBodyMediasInner
     */
    'url': string;
    /**
     *
     * @type {string}
     * @memberof CreateBotBodyMediasInner
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateBotBodyRecurringEventsValue
 */
export interface CreateBotBodyRecurringEventsValue {
    /**
     *
     * @type {CreateBotBodyRecurringEventsValueSchedule}
     * @memberof CreateBotBodyRecurringEventsValue
     */
    'schedule': CreateBotBodyRecurringEventsValueSchedule;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateBotBodyRecurringEventsValue
     */
    'type': string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof CreateBotBodyRecurringEventsValue
     */
    'payload': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface CreateBotBodyRecurringEventsValueSchedule
 */
export interface CreateBotBodyRecurringEventsValueSchedule {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateBotBodyRecurringEventsValueSchedule
     */
    'cron': string;
}
/**
 *
 * @export
 * @interface CreateBotBodyStatesValue
 */
export interface CreateBotBodyStatesValue {
    /**
     * Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)
     * @type {string}
     * @memberof CreateBotBodyStatesValue
     */
    'type': CreateBotBodyStatesValueTypeEnum;
    /**
     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.
     * @type {{ [key: string]: any; }}
     * @memberof CreateBotBodyStatesValue
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\'t expire.
     * @type {number}
     * @memberof CreateBotBodyStatesValue
     */
    'expiry'?: number;
}
export declare const CreateBotBodyStatesValueTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
    readonly Task: "task";
};
export type CreateBotBodyStatesValueTypeEnum = typeof CreateBotBodyStatesValueTypeEnum[keyof typeof CreateBotBodyStatesValueTypeEnum];
/**
 * Subscriptions of the bot
 * @export
 * @interface CreateBotBodySubscriptions
 */
export interface CreateBotBodySubscriptions {
    /**
     * Events that the bot is currently subscribed on (ex: \"slack:reactionAdded\"). If null, the bot is subscribed to all events.
     * @type {{ [key: string]: { [key: string]: any; }; }}
     * @memberof CreateBotBodySubscriptions
     */
    'events': {
        [key: string]: {
            [key: string]: any;
        };
    } | null;
}
/**
 *
 * @export
 * @interface CreateBotBodyUser
 */
export interface CreateBotBodyUser {
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}
     * @memberof CreateBotBodyUser
     */
    'tags'?: {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue;
    };
}
/**
 *
 * @export
 * @interface CreateBotResponse
 */
export interface CreateBotResponse {
    /**
     *
     * @type {Bot}
     * @memberof CreateBotResponse
     */
    'bot': Bot;
}
/**
 *
 * @export
 * @interface CreateConversationBody
 */
export interface CreateConversationBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateConversationBody
     */
    'channel': string;
    /**
     * Tags for the [Conversation](#schema_conversation)
     * @type {{ [key: string]: string; }}
     * @memberof CreateConversationBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * [DEPRECATED] To create a conversation from within a bot, call an action of the integration instead.
     * @type {string}
     * @memberof CreateConversationBody
     * @deprecated
     */
    'integrationName'?: string;
}
/**
 *
 * @export
 * @interface CreateConversationResponse
 */
export interface CreateConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof CreateConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface CreateEventBody
 */
export interface CreateEventBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateEventBody
     */
    'type': string;
    /**
     * Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our API.
     * @type {{ [key: string]: any; }}
     * @memberof CreateEventBody
     */
    'payload': {
        [key: string]: any;
    };
    /**
     *
     * @type {CreateEventBodySchedule}
     * @memberof CreateEventBody
     */
    'schedule'?: CreateEventBodySchedule;
    /**
     * ID of the [Conversation](#schema_conversation) to link the event to.
     * @type {string}
     * @memberof CreateEventBody
     */
    'conversationId'?: string;
    /**
     * ID of the [User](#schema_user) to link the event to.
     * @type {string}
     * @memberof CreateEventBody
     */
    'userId'?: string;
    /**
     * ID of the [Message](#schema_message) to link the event to.
     * @type {string}
     * @memberof CreateEventBody
     */
    'messageId'?: string;
}
/**
 * Schedule the Event to be sent at a specific time. Either dateTime or delay must be provided.
 * @export
 * @interface CreateEventBodySchedule
 */
export interface CreateEventBodySchedule {
    /**
     * When the [Event](#schema_event) will be sent, in the ISO 8601 format
     * @type {string}
     * @memberof CreateEventBodySchedule
     */
    'dateTime'?: string;
    /**
     * Delay in milliseconds before sending the [Event](#schema_event)
     * @type {number}
     * @memberof CreateEventBodySchedule
     */
    'delay'?: number;
}
/**
 *
 * @export
 * @interface CreateEventResponse
 */
export interface CreateEventResponse {
    /**
     *
     * @type {Event}
     * @memberof CreateEventResponse
     */
    'event': Event;
}
/**
 *
 * @export
 * @interface CreateFileBody
 */
export interface CreateFileBody {
    /**
     *
     * @type {any}
     * @memberof CreateFileBody
     */
    'data'?: any | null;
}
/**
 *
 * @export
 * @interface CreateFileResponse
 */
export interface CreateFileResponse {
    /**
     *
     * @type {CreateFileResponseFile}
     * @memberof CreateFileResponse
     */
    'file': CreateFileResponseFile;
}
/**
 *
 * @export
 * @interface CreateFileResponseFile
 */
export interface CreateFileResponseFile {
    /**
     * File ID
     * @type {string}
     * @memberof CreateFileResponseFile
     */
    'id': string;
    /**
     * The ID of the bot the file belongs to
     * @type {string}
     * @memberof CreateFileResponseFile
     */
    'botId': string;
    /**
     * File name
     * @type {string}
     * @memberof CreateFileResponseFile
     */
    'name': string | null;
    /**
     * File size in bytes
     * @type {number}
     * @memberof CreateFileResponseFile
     */
    'size': number | null;
    /**
     * MIME type of the file\'s content
     * @type {string}
     * @memberof CreateFileResponseFile
     */
    'contentType': string;
    /**
     * The tags of the file as an object of key/value pairs
     * @type {{ [key: string]: string; }}
     * @memberof CreateFileResponseFile
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * File creation timestamp in ISO 8601 format
     * @type {string}
     * @memberof CreateFileResponseFile
     */
    'createdAt': string;
    /**
     * File last update timestamp in ISO 8601 format
     * @type {string}
     * @memberof CreateFileResponseFile
     */
    'updatedAt': string;
    /**
     * Access policies configured for the file.
     * @type {Array<string>}
     * @memberof CreateFileResponseFile
     */
    'accessPolicies': Array<string>;
    /**
     * Status of the file indexing process. No value will be set if indexing was not enabled for the file when it was created.
     * @type {string}
     * @memberof CreateFileResponseFile
     */
    'indexingStatus'?: CreateFileResponseFileIndexingStatusEnum;
    /**
     * Last failure reason of the file indexing if the indexing status is \"FAILED\".
     * @type {string}
     * @memberof CreateFileResponseFile
     */
    'indexingFailureReason'?: string;
}
export declare const CreateFileResponseFileIndexingStatusEnum: {
    readonly Pending: "PENDING";
    readonly InProgress: "IN_PROGRESS";
    readonly Complete: "COMPLETE";
    readonly Failed: "FAILED";
};
export type CreateFileResponseFileIndexingStatusEnum = typeof CreateFileResponseFileIndexingStatusEnum[keyof typeof CreateFileResponseFileIndexingStatusEnum];
/**
 *
 * @export
 * @interface CreateIntegrationApiKeyBody
 */
export interface CreateIntegrationApiKeyBody {
    /**
     *
     * @type {string}
     * @memberof CreateIntegrationApiKeyBody
     */
    'integrationVersionId': string;
    /**
     *
     * @type {string}
     * @memberof CreateIntegrationApiKeyBody
     */
    'note'?: string;
}
/**
 *
 * @export
 * @interface CreateIntegrationApiKeyResponse
 */
export interface CreateIntegrationApiKeyResponse {
    /**
     *
     * @type {string}
     * @memberof CreateIntegrationApiKeyResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof CreateIntegrationApiKeyResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof CreateIntegrationApiKeyResponse
     */
    'note': string;
    /**
     * The IAK value. This will only be returned here when created and cannot be retrieved later.
     * @type {string}
     * @memberof CreateIntegrationApiKeyResponse
     */
    'value': string;
}
/**
 *
 * @export
 * @interface CreateIntegrationBody
 */
export interface CreateIntegrationBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'name': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'version': string;
    /**
     *
     * @type {CreateIntegrationBodyConfiguration}
     * @memberof CreateIntegrationBody
     */
    'configuration'?: CreateIntegrationBodyConfiguration;
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue; }}
     * @memberof CreateIntegrationBody
     */
    'states'?: {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue;
    };
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; }}
     * @memberof CreateIntegrationBody
     */
    'events'?: {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue;
    };
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; }}
     * @memberof CreateIntegrationBody
     */
    'actions'?: {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue;
    };
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue; }}
     * @memberof CreateIntegrationBody
     */
    'entities'?: {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue;
    };
    /**
     *
     * @type {CreateIntegrationBodyIdentifier}
     * @memberof CreateIntegrationBody
     */
    'identifier'?: CreateIntegrationBodyIdentifier;
    /**
     *
     * @type {{ [key: string]: CreateIntegrationBodyChannelsValue; }}
     * @memberof CreateIntegrationBody
     */
    'channels'?: {
        [key: string]: CreateIntegrationBodyChannelsValue;
    };
    /**
     *
     * @type {CreateIntegrationBodyUser}
     * @memberof CreateIntegrationBody
     */
    'user'?: CreateIntegrationBodyUser;
    /**
     * Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing.
     * @type {{ [key: string]: string; }}
     * @memberof CreateIntegrationBody
     */
    'secrets'?: {
        [key: string]: string;
    };
    /**
     * JavaScript code of the integration
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'code'?: string;
    /**
     * URL of the integration; Only available for dev integrations
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'url'?: string;
    /**
     * Indicates if the integration is a development integration; Dev integrations run locally
     * @type {boolean}
     * @memberof CreateIntegrationBody
     */
    'dev'?: boolean;
    /**
     * Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes.
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'icon'?: string;
    /**
     * Base64 encoded markdown of the integration readme. The readme is specific to each integration versions.
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'readme'?: string;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'title'?: string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'description'?: string;
    /**
     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.
     * @type {boolean}
     * @memberof CreateIntegrationBody
     */
    'public'?: boolean;
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyChannelsValue
 */
export interface CreateIntegrationBodyChannelsValue {
    /**
     * Title of the channel
     * @type {string}
     * @memberof CreateIntegrationBodyChannelsValue
     */
    'title'?: string;
    /**
     * Description of the channel
     * @type {string}
     * @memberof CreateIntegrationBodyChannelsValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue; }}
     * @memberof CreateIntegrationBodyChannelsValue
     */
    'messages': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue;
    };
    /**
     *
     * @type {CreateIntegrationBodyChannelsValueConversation}
     * @memberof CreateIntegrationBodyChannelsValue
     */
    'conversation'?: CreateIntegrationBodyChannelsValueConversation;
    /**
     *
     * @type {CreateBotBodyUser}
     * @memberof CreateIntegrationBodyChannelsValue
     */
    'message'?: CreateBotBodyUser;
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyChannelsValueConversation
 */
export interface CreateIntegrationBodyChannelsValueConversation {
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation}
     * @memberof CreateIntegrationBodyChannelsValueConversation
     */
    'creation'?: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation;
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}
     * @memberof CreateIntegrationBodyChannelsValueConversation
     */
    'tags'?: {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue;
    };
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyConfiguration
 */
export interface CreateIntegrationBodyConfiguration {
    /**
     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.
     * @type {{ [key: string]: any; }}
     * @memberof CreateIntegrationBodyConfiguration
     */
    'schema'?: {
        [key: string]: any;
    };
    /**
     *
     * @type {CreateIntegrationBodyConfigurationIdentifier}
     * @memberof CreateIntegrationBodyConfiguration
     */
    'identifier'?: CreateIntegrationBodyConfigurationIdentifier;
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyConfigurationIdentifier
 */
export interface CreateIntegrationBodyConfigurationIdentifier {
    /**
     *
     * @type {boolean}
     * @memberof CreateIntegrationBodyConfigurationIdentifier
     */
    'required'?: boolean;
    /**
     * Title describing the task
     * @type {string}
     * @memberof CreateIntegrationBodyConfigurationIdentifier
     */
    'linkTemplateScript'?: string;
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyIdentifier
 */
export interface CreateIntegrationBodyIdentifier {
    /**
     * Title describing the task
     * @type {string}
     * @memberof CreateIntegrationBodyIdentifier
     */
    'fallbackHandlerScript'?: string;
    /**
     * Title describing the task
     * @type {string}
     * @memberof CreateIntegrationBodyIdentifier
     */
    'extractScript'?: string;
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyUser
 */
export interface CreateIntegrationBodyUser {
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationUserCreation}
     * @memberof CreateIntegrationBodyUser
     */
    'creation'?: GetPublicIntegrationByIdResponseIntegrationUserCreation;
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}
     * @memberof CreateIntegrationBodyUser
     */
    'tags'?: {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue;
    };
}
/**
 *
 * @export
 * @interface CreateIntegrationResponse
 */
export interface CreateIntegrationResponse {
    /**
     *
     * @type {Integration}
     * @memberof CreateIntegrationResponse
     */
    'integration': Integration;
}
/**
 *
 * @export
 * @interface CreateMessageBody
 */
export interface CreateMessageBody {
    /**
     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location
     * @type {{ [key: string]: any; }}
     * @memberof CreateMessageBody
     */
    'payload': {
        [key: string]: any;
    };
    /**
     * User id
     * @type {string}
     * @memberof CreateMessageBody
     */
    'userId': string;
    /**
     * User id
     * @type {string}
     * @memberof CreateMessageBody
     */
    'conversationId': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateMessageBody
     */
    'type': string;
    /**
     * Set of [Tags](#tags) that you can attach to a [Message](#schema_message). The set of [Tags](#tags) available on a [Message](#schema_message) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof CreateMessageBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     *
     * @type {CreateMessageBodySchedule}
     * @memberof CreateMessageBody
     */
    'schedule'?: CreateMessageBodySchedule;
}
/**
 * Schedule the Message to be sent at a specific time. Either dateTime or delay must be provided.
 * @export
 * @interface CreateMessageBodySchedule
 */
export interface CreateMessageBodySchedule {
    /**
     * When the [Event](#schema_event) will be sent, in the ISO 8601 format
     * @type {string}
     * @memberof CreateMessageBodySchedule
     */
    'dateTime'?: string;
    /**
     * Delay in milliseconds before sending the [Message](#schema_message)
     * @type {number}
     * @memberof CreateMessageBodySchedule
     */
    'delay'?: number;
}
/**
 *
 * @export
 * @interface CreateMessageResponse
 */
export interface CreateMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof CreateMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface CreatePersonalAccessTokenBody
 */
export interface CreatePersonalAccessTokenBody {
    /**
     * Note to identify the PAT
     * @type {string}
     * @memberof CreatePersonalAccessTokenBody
     */
    'note': string;
}
/**
 *
 * @export
 * @interface CreatePersonalAccessTokenResponse
 */
export interface CreatePersonalAccessTokenResponse {
    /**
     *
     * @type {CreatePersonalAccessTokenResponsePat}
     * @memberof CreatePersonalAccessTokenResponse
     */
    'pat': CreatePersonalAccessTokenResponsePat;
}
/**
 *
 * @export
 * @interface CreatePersonalAccessTokenResponsePat
 */
export interface CreatePersonalAccessTokenResponsePat {
    /**
     *
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponsePat
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponsePat
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponsePat
     */
    'note': string;
    /**
     * The PAT value. This will only be returned here when created and cannot be retrieved later.
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponsePat
     */
    'value': string;
}
/**
 *
 * @export
 * @interface CreateTableBody
 */
export interface CreateTableBody {
    /**
     * Required. This name is used to identify your table.
     * @type {string}
     * @memberof CreateTableBody
     */
    'name': string;
    /**
     * The \'factor\' multiplies the row\'s data storage limit by 4KB and its quota count, but can only be set at table creation and not modified later. For instance, a factor of 2 increases storage to 8KB but counts as 2 rows in your quota. The default factor is 1.
     * @type {number}
     * @memberof CreateTableBody
     */
    'factor'?: number;
    /**
     * A table designated as \"frozen\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations.
     * @type {boolean}
     * @memberof CreateTableBody
     */
    'frozen'?: boolean;
    /**
     * Provide an object or a JSON schema to define the columns of the table. A maximum of 20 keys in the object/schema is allowed.
     * @type {{ [key: string]: any; }}
     * @memberof CreateTableBody
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs.
     * @type {{ [key: string]: string; }}
     * @memberof CreateTableBody
     */
    'tags'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface CreateTableResponse
 */
export interface CreateTableResponse {
    /**
     *
     * @type {Table}
     * @memberof CreateTableResponse
     */
    'table': Table;
}
/**
 *
 * @export
 * @interface CreateTableRowsBody
 */
export interface CreateTableRowsBody {
    /**
     *
     * @type {Array<{ [key: string]: any; }>}
     * @memberof CreateTableRowsBody
     */
    'rows': Array<{
        [key: string]: any;
    }>;
}
/**
 *
 * @export
 * @interface CreateTableRowsResponse
 */
export interface CreateTableRowsResponse {
    /**
     *
     * @type {Array<Row>}
     * @memberof CreateTableRowsResponse
     */
    'rows': Array<Row>;
    /**
     * Alerts for minor issues that don\'t block the operation but suggest possible improvements.
     * @type {Array<string>}
     * @memberof CreateTableRowsResponse
     */
    'warnings'?: Array<string>;
    /**
     * Critical issues in specific elements that prevent their successful processing, allowing partial operation success.
     * @type {Array<string>}
     * @memberof CreateTableRowsResponse
     */
    'errors'?: Array<string>;
}
/**
 *
 * @export
 * @interface CreateTaskBody
 */
export interface CreateTaskBody {
    /**
     * Title describing the task
     * @type {string}
     * @memberof CreateTaskBody
     */
    'title'?: string;
    /**
     * All the notes related to the execution of the current task
     * @type {string}
     * @memberof CreateTaskBody
     */
    'description'?: string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateTaskBody
     */
    'type': string;
    /**
     * Content related to the task
     * @type {{ [key: string]: any; }}
     * @memberof CreateTaskBody
     */
    'data'?: {
        [key: string]: any;
    };
    /**
     * Parent task id is the parent task that created this task
     * @type {string}
     * @memberof CreateTaskBody
     */
    'parentTaskId'?: string;
    /**
     * Conversation id related to this task
     * @type {string}
     * @memberof CreateTaskBody
     */
    'conversationId': string;
    /**
     * Specific user related to this task
     * @type {string}
     * @memberof CreateTaskBody
     */
    'userId'?: string;
    /**
     * The timeout date where the task should be failed in the ISO 8601 format
     * @type {string}
     * @memberof CreateTaskBody
     */
    'timeoutAt'?: string;
    /**
     * Tags for the [Task](#schema_task)
     * @type {{ [key: string]: string; }}
     * @memberof CreateTaskBody
     */
    'tags'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface CreateTaskResponse
 */
export interface CreateTaskResponse {
    /**
     *
     * @type {Task}
     * @memberof CreateTaskResponse
     */
    'task': Task;
}
/**
 *
 * @export
 * @interface CreateUserBody
 */
export interface CreateUserBody {
    /**
     * Tags for the [User](#schema_user)
     * @type {{ [key: string]: string; }}
     * @memberof CreateUserBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * [DEPRECATED] To create a user from within a bot, call an action of the integration instead.
     * @type {string}
     * @memberof CreateUserBody
     * @deprecated
     */
    'integrationName'?: string;
    /**
     * Name of the user
     * @type {string}
     * @memberof CreateUserBody
     */
    'name'?: string;
    /**
     * URI of the user picture
     * @type {string}
     * @memberof CreateUserBody
     */
    'pictureUrl'?: string;
}
/**
 *
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     *
     * @type {User}
     * @memberof CreateUserResponse
     */
    'user': User;
}
/**
 *
 * @export
 * @interface CreateWorkspaceBody
 */
export interface CreateWorkspaceBody {
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceBody
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateWorkspaceMemberBody
 */
export interface CreateWorkspaceMemberBody {
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberBody
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberBody
     */
    'role': CreateWorkspaceMemberBodyRoleEnum;
}
export declare const CreateWorkspaceMemberBodyRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type CreateWorkspaceMemberBodyRoleEnum = typeof CreateWorkspaceMemberBodyRoleEnum[keyof typeof CreateWorkspaceMemberBodyRoleEnum];
/**
 *
 * @export
 * @interface CreateWorkspaceMemberResponse
 */
export interface CreateWorkspaceMemberResponse {
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberResponse
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberResponse
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberResponse
     */
    'role': CreateWorkspaceMemberResponseRoleEnum;
}
export declare const CreateWorkspaceMemberResponseRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type CreateWorkspaceMemberResponseRoleEnum = typeof CreateWorkspaceMemberResponseRoleEnum[keyof typeof CreateWorkspaceMemberResponseRoleEnum];
/**
 *
 * @export
 * @interface CreateWorkspaceResponse
 */
export interface CreateWorkspaceResponse {
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof CreateWorkspaceResponse
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'accountType': CreateWorkspaceResponseAccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'billingVersion': CreateWorkspaceResponseBillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'plan': CreateWorkspaceResponsePlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof CreateWorkspaceResponse
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof CreateWorkspaceResponse
     */
    'spendingLimit': number;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'about'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'profilePicture'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'contactEmail'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'website'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateWorkspaceResponse
     */
    'socialAccounts'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof CreateWorkspaceResponse
     */
    'isPublic'?: boolean;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'handle'?: string;
}
export declare const CreateWorkspaceResponseAccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type CreateWorkspaceResponseAccountTypeEnum = typeof CreateWorkspaceResponseAccountTypeEnum[keyof typeof CreateWorkspaceResponseAccountTypeEnum];
export declare const CreateWorkspaceResponseBillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type CreateWorkspaceResponseBillingVersionEnum = typeof CreateWorkspaceResponseBillingVersionEnum[keyof typeof CreateWorkspaceResponseBillingVersionEnum];
export declare const CreateWorkspaceResponsePlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type CreateWorkspaceResponsePlanEnum = typeof CreateWorkspaceResponsePlanEnum[keyof typeof CreateWorkspaceResponsePlanEnum];
/**
 *
 * @export
 * @interface DeleteTableRowsBody
 */
export interface DeleteTableRowsBody {
    /**
     *
     * @type {Array<number>}
     * @memberof DeleteTableRowsBody
     */
    'ids'?: Array<number>;
    /**
     * Filter to apply when deleting rows. Example: \\{ \"name\": \\{ \"$eq\": \"John\" \\} \\}
     * @type {{ [key: string]: any; }}
     * @memberof DeleteTableRowsBody
     */
    'filter'?: {
        [key: string]: any;
    };
    /**
     * Flag to delete all rows. Use with caution as this action is irreversible.
     * @type {boolean}
     * @memberof DeleteTableRowsBody
     */
    'deleteAllRows'?: boolean;
}
/**
 *
 * @export
 * @interface DeleteTableRowsResponse
 */
export interface DeleteTableRowsResponse {
    /**
     *
     * @type {number}
     * @memberof DeleteTableRowsResponse
     */
    'deletedRows': number;
}
/**
 *
 * @export
 * @interface DuplicateTableBody
 */
export interface DuplicateTableBody {
    /**
     *
     * @type {string}
     * @memberof DuplicateTableBody
     */
    'tableName'?: string;
    /**
     * Only duplicate the schema, not the content
     * @type {boolean}
     * @memberof DuplicateTableBody
     */
    'schemaOnly'?: boolean;
    /**
     * Use a different factor for the table. Leave empty to use the same as the duplicated table.
     * @type {number}
     * @memberof DuplicateTableBody
     */
    'factor'?: number;
}
/**
 *
 * @export
 * @interface DuplicateTableResponse
 */
export interface DuplicateTableResponse {
    /**
     *
     * @type {Table}
     * @memberof DuplicateTableResponse
     */
    'table': Table;
    /**
     * The total number of rows present in the table.
     * @type {number}
     * @memberof DuplicateTableResponse
     */
    'rows': number;
}
/**
 * The event object represents an action or an occurrence.
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Event
     */
    'id': string;
    /**
     * Creation date of the [Event](#schema_event) in ISO 8601 format
     * @type {string}
     * @memberof Event
     */
    'createdAt': string;
    /**
     * Type of the task
     * @type {string}
     * @memberof Event
     */
    'type': string;
    /**
     * Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our api.
     * @type {{ [key: string]: any; }}
     * @memberof Event
     */
    'payload': {
        [key: string]: any;
    };
    /**
     * ID of the [Conversation](#schema_conversation) to link the event to.
     * @type {string}
     * @memberof Event
     */
    'conversationId'?: string;
    /**
     * ID of the [User](#schema_user) to link the event to.
     * @type {string}
     * @memberof Event
     */
    'userId'?: string;
    /**
     * ID of the [Message](#schema_message) to link the event to.
     * @type {string}
     * @memberof Event
     */
    'messageId'?: string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'status': EventStatusEnum;
    /**
     * Reason why the event failed to be processed
     * @type {string}
     * @memberof Event
     */
    'failureReason': string | null;
}
export declare const EventStatusEnum: {
    readonly Pending: "pending";
    readonly Processed: "processed";
    readonly Ignored: "ignored";
    readonly Failed: "failed";
};
export type EventStatusEnum = typeof EventStatusEnum[keyof typeof EventStatusEnum];
/**
 *
 * @export
 * @interface FindTableRowsBody
 */
export interface FindTableRowsBody {
    /**
     * Limit for pagination, specifying the maximum number of rows to return.
     * @type {number}
     * @memberof FindTableRowsBody
     */
    'limit'?: number;
    /**
     * Offset for pagination, specifying where to start returning rows from.
     * @type {number}
     * @memberof FindTableRowsBody
     */
    'offset'?: number;
    /**
     * Provide a mongodb-like filter to apply to the query. Example: \\{ \"name\": \\{ \"$eq\": \"John\" \\} \\}
     * @type {{ [key: string]: any; }}
     * @memberof FindTableRowsBody
     */
    'filter'?: {
        [key: string]: any;
    };
    /**
     * Group the rows by a specific column and apply aggregations to them. Allowed values: key, avg, max, min, sum, count. Example: \\{ \"someId\": \"key\", \"orders\": [\"sum\", \"avg\"] \\}
     * @type {{ [key: string]: any; }}
     * @memberof FindTableRowsBody
     */
    'group'?: {
        [key: string]: any;
    };
    /**
     * Search term to apply to the row search. When using this parameter, some rows which doesn\'t match the search term will be returned, use the similarity field to know how much the row matches the search term.
     * @type {string}
     * @memberof FindTableRowsBody
     */
    'search'?: string;
    /**
     * Specifies the column by which to order the results. By default it is ordered by id. Build-in columns: id, createdAt, updatedAt
     * @type {string}
     * @memberof FindTableRowsBody
     */
    'orderBy'?: string;
    /**
     * Specifies the direction of sorting, either ascending or descending.
     * @type {string}
     * @memberof FindTableRowsBody
     */
    'orderDirection'?: FindTableRowsBodyOrderDirectionEnum;
}
export declare const FindTableRowsBodyOrderDirectionEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type FindTableRowsBodyOrderDirectionEnum = typeof FindTableRowsBodyOrderDirectionEnum[keyof typeof FindTableRowsBodyOrderDirectionEnum];
/**
 *
 * @export
 * @interface FindTableRowsResponse
 */
export interface FindTableRowsResponse {
    /**
     *
     * @type {Array<Row>}
     * @memberof FindTableRowsResponse
     */
    'rows': Array<Row>;
    /**
     * The total number of rows matching the search criteria, regardless of pagination.
     * @type {number}
     * @memberof FindTableRowsResponse
     */
    'count': number;
    /**
     *
     * @type {number}
     * @memberof FindTableRowsResponse
     */
    'offset': number;
    /**
     *
     * @type {number}
     * @memberof FindTableRowsResponse
     */
    'limit': number;
}
/**
 *
 * @export
 * @interface GetAccountPreferenceResponse
 */
export interface GetAccountPreferenceResponse {
    /**
     *
     * @type {any}
     * @memberof GetAccountPreferenceResponse
     */
    'value'?: any | null;
}
/**
 *
 * @export
 * @interface GetAccountResponse
 */
export interface GetAccountResponse {
    /**
     *
     * @type {GetAccountResponseAccount}
     * @memberof GetAccountResponse
     */
    'account': GetAccountResponseAccount;
}
/**
 *
 * @export
 * @interface GetAccountResponseAccount
 */
export interface GetAccountResponseAccount {
    /**
     *
     * @type {string}
     * @memberof GetAccountResponseAccount
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GetAccountResponseAccount
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof GetAccountResponseAccount
     */
    'displayName'?: string;
    /**
     *
     * @type {string}
     * @memberof GetAccountResponseAccount
     */
    'profilePicture'?: string;
    /**
     * Creation date of the [Account](#schema_account) in ISO 8601 format
     * @type {string}
     * @memberof GetAccountResponseAccount
     */
    'createdAt': string;
}
/**
 *
 * @export
 * @interface GetAllWorkspaceQuotaCompletionResponse
 */
export interface GetAllWorkspaceQuotaCompletionResponse {
    /**
     *
     * @type {string}
     * @memberof GetAllWorkspaceQuotaCompletionResponse
     */
    'type': GetAllWorkspaceQuotaCompletionResponseTypeEnum;
    /**
     *
     * @type {number}
     * @memberof GetAllWorkspaceQuotaCompletionResponse
     */
    'completion': number;
}
export declare const GetAllWorkspaceQuotaCompletionResponseTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type GetAllWorkspaceQuotaCompletionResponseTypeEnum = typeof GetAllWorkspaceQuotaCompletionResponseTypeEnum[keyof typeof GetAllWorkspaceQuotaCompletionResponseTypeEnum];
/**
 *
 * @export
 * @interface GetAuditRecordsResponse
 */
export interface GetAuditRecordsResponse {
    /**
     *
     * @type {Array<GetAuditRecordsResponseRecordsInner>}
     * @memberof GetAuditRecordsResponse
     */
    'records': Array<GetAuditRecordsResponseRecordsInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof GetAuditRecordsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface GetAuditRecordsResponseRecordsInner
 */
export interface GetAuditRecordsResponseRecordsInner {
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'recordedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'userId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'userEmail'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'resourceId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'resourceName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'value'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'action': GetAuditRecordsResponseRecordsInnerActionEnum;
}
export declare const GetAuditRecordsResponseRecordsInnerActionEnum: {
    readonly Unknown: "UNKNOWN";
    readonly AddWorkspaceMember: "ADD_WORKSPACE_MEMBER";
    readonly RemoveWorkspaceMember: "REMOVE_WORKSPACE_MEMBER";
    readonly UpdateWorkspaceMember: "UPDATE_WORKSPACE_MEMBER";
    readonly CloseWorkspace: "CLOSE_WORKSPACE";
    readonly CreateBot: "CREATE_BOT";
    readonly CreateWorkspace: "CREATE_WORKSPACE";
    readonly DeleteBot: "DELETE_BOT";
    readonly DeployBot: "DEPLOY_BOT";
    readonly TransferBot: "TRANSFER_BOT";
    readonly DowngradeWorkspacePlan: "DOWNGRADE_WORKSPACE_PLAN";
    readonly DownloadBotArchive: "DOWNLOAD_BOT_ARCHIVE";
    readonly UpdateBot: "UPDATE_BOT";
    readonly UpdateBotChannel: "UPDATE_BOT_CHANNEL";
    readonly UpdateBotConfig: "UPDATE_BOT_CONFIG";
    readonly UpdatePaymentMethod: "UPDATE_PAYMENT_METHOD";
    readonly UpdateWorkspace: "UPDATE_WORKSPACE";
    readonly UpgradeWorkspacePlan: "UPGRADE_WORKSPACE_PLAN";
    readonly SetSpendingLimit: "SET_SPENDING_LIMIT";
    readonly SetAiSpendingLimit: "SET_AI_SPENDING_LIMIT";
};
export type GetAuditRecordsResponseRecordsInnerActionEnum = typeof GetAuditRecordsResponseRecordsInnerActionEnum[keyof typeof GetAuditRecordsResponseRecordsInnerActionEnum];
/**
 *
 * @export
 * @interface GetBotAnalyticsResponse
 */
export interface GetBotAnalyticsResponse {
    /**
     *
     * @type {Array<GetBotAnalyticsResponseRecordsInner>}
     * @memberof GetBotAnalyticsResponse
     */
    'records': Array<GetBotAnalyticsResponseRecordsInner>;
}
/**
 *
 * @export
 * @interface GetBotAnalyticsResponseRecordsInner
 */
export interface GetBotAnalyticsResponseRecordsInner {
    /**
     * ISO 8601 date string of the beginning (inclusive) of the period
     * @type {string}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'startDateTimeUtc': string;
    /**
     * ISO 8601 date string of the end (exclusive) of the period
     * @type {string}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'endDateTimeUtc': string;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'returningUsers': number;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'newUsers': number;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'sessions': number;
    /**
     * Deprecated. Use `userMessages` instead.
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'messages': number;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'userMessages': number;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'botMessages': number;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'events': number;
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'eventTypes': {
        [key: string]: number;
    };
}
/**
 *
 * @export
 * @interface GetBotLogsResponse
 */
export interface GetBotLogsResponse {
    /**
     *
     * @type {Array<GetBotLogsResponseLogsInner>}
     * @memberof GetBotLogsResponse
     */
    'logs': Array<GetBotLogsResponseLogsInner>;
    /**
     *
     * @type {string}
     * @memberof GetBotLogsResponse
     */
    'nextToken'?: string;
}
/**
 *
 * @export
 * @interface GetBotLogsResponseLogsInner
 */
export interface GetBotLogsResponseLogsInner {
    /**
     *
     * @type {string}
     * @memberof GetBotLogsResponseLogsInner
     */
    'timestamp': string;
    /**
     *
     * @type {string}
     * @memberof GetBotLogsResponseLogsInner
     */
    'level': string;
    /**
     *
     * @type {string}
     * @memberof GetBotLogsResponseLogsInner
     */
    'message': string;
}
/**
 *
 * @export
 * @interface GetBotResponse
 */
export interface GetBotResponse {
    /**
     *
     * @type {Bot}
     * @memberof GetBotResponse
     */
    'bot': Bot;
}
/**
 *
 * @export
 * @interface GetBotWebchatResponse
 */
export interface GetBotWebchatResponse {
    /**
     *
     * @type {string}
     * @memberof GetBotWebchatResponse
     */
    'code': string;
}
/**
 *
 * @export
 * @interface GetConversationResponse
 */
export interface GetConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof GetConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface GetEventResponse
 */
export interface GetEventResponse {
    /**
     *
     * @type {Event}
     * @memberof GetEventResponse
     */
    'event': Event;
}
/**
 *
 * @export
 * @interface GetFileContentResponse
 */
export interface GetFileContentResponse {
    /**
     * Temporary pre-signed URL to download the file, should be used shortly after retrieving and should not be stored long-term as the URL will expire after a short timeframe.
     * @type {string}
     * @memberof GetFileContentResponse
     */
    'url': string;
}
/**
 *
 * @export
 * @interface GetFileMetadataResponse
 */
export interface GetFileMetadataResponse {
    /**
     *
     * @type {CreateFileResponseFile}
     * @memberof GetFileMetadataResponse
     */
    'file': CreateFileResponseFile;
}
/**
 *
 * @export
 * @interface GetIntegrationByNameResponse
 */
export interface GetIntegrationByNameResponse {
    /**
     *
     * @type {Integration}
     * @memberof GetIntegrationByNameResponse
     */
    'integration': Integration;
}
/**
 *
 * @export
 * @interface GetIntegrationLogsResponse
 */
export interface GetIntegrationLogsResponse {
    /**
     *
     * @type {Array<GetBotLogsResponseLogsInner>}
     * @memberof GetIntegrationLogsResponse
     */
    'logs': Array<GetBotLogsResponseLogsInner>;
    /**
     *
     * @type {string}
     * @memberof GetIntegrationLogsResponse
     */
    'nextToken'?: string;
}
/**
 *
 * @export
 * @interface GetIntegrationResponse
 */
export interface GetIntegrationResponse {
    /**
     *
     * @type {Integration}
     * @memberof GetIntegrationResponse
     */
    'integration': Integration;
}
/**
 *
 * @export
 * @interface GetMessageResponse
 */
export interface GetMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof GetMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface GetOrCreateConversationBody
 */
export interface GetOrCreateConversationBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof GetOrCreateConversationBody
     */
    'channel': string;
    /**
     * Tags for the [Conversation](#schema_conversation)
     * @type {{ [key: string]: string; }}
     * @memberof GetOrCreateConversationBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * [DEPRECATED] To create a conversation from within a bot, call an action of the integration instead.
     * @type {string}
     * @memberof GetOrCreateConversationBody
     * @deprecated
     */
    'integrationName'?: string;
}
/**
 *
 * @export
 * @interface GetOrCreateConversationResponse
 */
export interface GetOrCreateConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof GetOrCreateConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface GetOrCreateMessageBody
 */
export interface GetOrCreateMessageBody {
    /**
     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location
     * @type {{ [key: string]: any; }}
     * @memberof GetOrCreateMessageBody
     */
    'payload': {
        [key: string]: any;
    };
    /**
     * User id
     * @type {string}
     * @memberof GetOrCreateMessageBody
     */
    'userId': string;
    /**
     * User id
     * @type {string}
     * @memberof GetOrCreateMessageBody
     */
    'conversationId': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof GetOrCreateMessageBody
     */
    'type': string;
    /**
     * Set of [Tags](#tags) that you can attach to a [Message](#schema_message). The set of [Tags](#tags) available on a [Message](#schema_message) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof GetOrCreateMessageBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     *
     * @type {CreateMessageBodySchedule}
     * @memberof GetOrCreateMessageBody
     */
    'schedule'?: CreateMessageBodySchedule;
}
/**
 *
 * @export
 * @interface GetOrCreateMessageResponse
 */
export interface GetOrCreateMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof GetOrCreateMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface GetOrCreateTableBody
 */
export interface GetOrCreateTableBody {
    /**
     * The \'factor\' multiplies the row\'s data storage limit by 4KB and its quota count, but can only be set at table creation and not modified later. For instance, a factor of 2 increases storage to 8KB but counts as 2 rows in your quota. The default factor is 1.
     * @type {number}
     * @memberof GetOrCreateTableBody
     */
    'factor'?: number;
    /**
     * A table designated as \"frozen\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations.
     * @type {boolean}
     * @memberof GetOrCreateTableBody
     */
    'frozen'?: boolean;
    /**
     * Provide an object or a JSON schema to define the columns of the table. A maximum of 20 keys in the object/schema is allowed.
     * @type {{ [key: string]: any; }}
     * @memberof GetOrCreateTableBody
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs.
     * @type {{ [key: string]: string; }}
     * @memberof GetOrCreateTableBody
     */
    'tags'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface GetOrCreateTableResponse
 */
export interface GetOrCreateTableResponse {
    /**
     *
     * @type {Table}
     * @memberof GetOrCreateTableResponse
     */
    'table': Table;
    /**
     * Flag indicating if the table was newly created.
     * @type {boolean}
     * @memberof GetOrCreateTableResponse
     */
    'created': boolean;
    /**
     * The total number of rows present in the table.
     * @type {number}
     * @memberof GetOrCreateTableResponse
     */
    'rows': number;
    /**
     * The number of rows pending indexing, relevant for search functionalities.
     * @type {number}
     * @memberof GetOrCreateTableResponse
     */
    'indexingCount': number;
}
/**
 *
 * @export
 * @interface GetOrCreateUserBody
 */
export interface GetOrCreateUserBody {
    /**
     * Tags for the [User](#schema_user)
     * @type {{ [key: string]: string; }}
     * @memberof GetOrCreateUserBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * [DEPRECATED] To create a user from within a bot, call an action of the integration instead.
     * @type {string}
     * @memberof GetOrCreateUserBody
     * @deprecated
     */
    'integrationName'?: string;
    /**
     * Name of the user
     * @type {string}
     * @memberof GetOrCreateUserBody
     */
    'name'?: string;
    /**
     * URI of the user picture
     * @type {string}
     * @memberof GetOrCreateUserBody
     */
    'pictureUrl'?: string;
}
/**
 *
 * @export
 * @interface GetOrCreateUserResponse
 */
export interface GetOrCreateUserResponse {
    /**
     *
     * @type {User}
     * @memberof GetOrCreateUserResponse
     */
    'user': User;
}
/**
 *
 * @export
 * @interface GetOrSetStateBody
 */
export interface GetOrSetStateBody {
    /**
     * Payload is the content of the state defined by your bot.
     * @type {{ [key: string]: any; }}
     * @memberof GetOrSetStateBody
     */
    'payload': {
        [key: string]: any;
    };
    /**
     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\'t expire.
     * @type {number}
     * @memberof GetOrSetStateBody
     */
    'expiry'?: number;
}
/**
 *
 * @export
 * @interface GetOrSetStateResponse
 */
export interface GetOrSetStateResponse {
    /**
     *
     * @type {State}
     * @memberof GetOrSetStateResponse
     */
    'state': State;
}
/**
 *
 * @export
 * @interface GetParticipantResponse
 */
export interface GetParticipantResponse {
    /**
     *
     * @type {User}
     * @memberof GetParticipantResponse
     */
    'participant': User;
}
/**
 *
 * @export
 * @interface GetPublicIntegrationByIdResponse
 */
export interface GetPublicIntegrationByIdResponse {
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegration}
     * @memberof GetPublicIntegrationByIdResponse
     */
    'integration': GetPublicIntegrationByIdResponseIntegration;
}
/**
 *
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegration
 */
export interface GetPublicIntegrationByIdResponseIntegration {
    /**
     * User id
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'id': string;
    /**
     * Creation date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'createdAt': string;
    /**
     * Updating date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'updatedAt': string;
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationIdentifier}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'identifier': GetPublicIntegrationByIdResponseIntegrationIdentifier;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'name': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'version': string;
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationConfiguration}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'configuration': GetPublicIntegrationByIdResponseIntegrationConfiguration;
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValue; }}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'channels': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValue;
    };
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue; }}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'states': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue;
    };
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; }}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'events': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue;
    };
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; }}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'actions': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue;
    };
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationUser}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'user': GetPublicIntegrationByIdResponseIntegrationUser;
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue; }}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'entities': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue;
    };
    /**
     * Indicates if the integration is a development integration; Dev integrations run locally
     * @type {boolean}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'dev': boolean;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'title': string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'description': string;
    /**
     * URL of the icon of the integration. This is the icon that will be displayed in the UI
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'iconUrl': string;
    /**
     * URL of the readme of the integration. This is the readme that will be displayed in the UI
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'readmeUrl': string;
    /**
     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.
     * @type {boolean}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'public': boolean;
    /**
     * Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing.
     * @type {Array<string>}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'secrets': Array<string>;
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace}
     * @memberof GetPublicIntegrationByIdResponseIntegration
     */
    'ownerWorkspace': GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace;
}
/**
 * Action definition
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationActionsValue
 */
export interface GetPublicIntegrationByIdResponseIntegrationActionsValue {
    /**
     * Title of the action
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationActionsValue
     */
    'title'?: string;
    /**
     * Description of the action
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationActionsValue
     */
    'description'?: string;
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationActionsValueInput}
     * @memberof GetPublicIntegrationByIdResponseIntegrationActionsValue
     */
    'input': GetPublicIntegrationByIdResponseIntegrationActionsValueInput;
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationActionsValueInput}
     * @memberof GetPublicIntegrationByIdResponseIntegrationActionsValue
     */
    'output': GetPublicIntegrationByIdResponseIntegrationActionsValueInput;
}
/**
 *
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationActionsValueInput
 */
export interface GetPublicIntegrationByIdResponseIntegrationActionsValueInput {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof GetPublicIntegrationByIdResponseIntegrationActionsValueInput
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 * Channel definition
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValue
 */
export interface GetPublicIntegrationByIdResponseIntegrationChannelsValue {
    /**
     * Title of the channel
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValue
     */
    'title'?: string;
    /**
     * Description of the channel
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue; }}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValue
     */
    'messages': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue;
    };
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValue
     */
    'conversation': GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation;
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValue
     */
    'message': GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage;
}
/**
 * Conversation object configuration
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation
 */
export interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation {
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation
     */
    'tags': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue;
    };
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversation
     */
    'creation': GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation;
}
/**
 * The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation
 */
export interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation {
    /**
     * Enable conversation creation
     * @type {boolean}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation
     */
    'enabled': boolean;
    /**
     * The list of tags that are required to be specified when calling the API directly to create a conversation.
     * @type {Array<string>}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation
     */
    'requiredTags': Array<string>;
}
/**
 * Definition of a tag that can be provided on the object
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue
 */
export interface GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue {
    /**
     * Title of the tag
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue
     */
    'title'?: string;
    /**
     * Description of the tag
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue
     */
    'description'?: string;
}
/**
 * Message object configuration
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage
 */
export interface GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage {
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueMessage
     */
    'tags': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue;
    };
}
/**
 * Message definition
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue
 */
export interface GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof GetPublicIntegrationByIdResponseIntegrationChannelsValueMessagesValue
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 * Configuration definition
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationConfiguration
 */
export interface GetPublicIntegrationByIdResponseIntegrationConfiguration {
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier}
     * @memberof GetPublicIntegrationByIdResponseIntegrationConfiguration
     */
    'identifier': GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier;
    /**
     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.
     * @type {{ [key: string]: any; }}
     * @memberof GetPublicIntegrationByIdResponseIntegrationConfiguration
     */
    'schema'?: {
        [key: string]: any;
    };
}
/**
 * Identifier configuration of the [Integration](#schema_integration)
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier
 */
export interface GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier {
    /**
     * Title describing the task
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier
     */
    'linkTemplateScript'?: string;
    /**
     *
     * @type {boolean}
     * @memberof GetPublicIntegrationByIdResponseIntegrationConfigurationIdentifier
     */
    'required': boolean;
}
/**
 * Entity definition
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationEntitiesValue
 */
export interface GetPublicIntegrationByIdResponseIntegrationEntitiesValue {
    /**
     * Title of the entity
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationEntitiesValue
     */
    'title'?: string;
    /**
     * Description of the entity
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationEntitiesValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof GetPublicIntegrationByIdResponseIntegrationEntitiesValue
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 * Event Definition
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationEventsValue
 */
export interface GetPublicIntegrationByIdResponseIntegrationEventsValue {
    /**
     * Title of the event
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationEventsValue
     */
    'title'?: string;
    /**
     * Description of the event
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationEventsValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof GetPublicIntegrationByIdResponseIntegrationEventsValue
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 * Global identifier configuration of the [Integration](#schema_integration)
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationIdentifier
 */
export interface GetPublicIntegrationByIdResponseIntegrationIdentifier {
    /**
     * VRL Script of the [Integration](#schema_integration) to handle incoming requests for a request that doesn\'t have an identifier
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationIdentifier
     */
    'fallbackHandlerScript'?: string;
    /**
     * VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook often use for OAuth
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationIdentifier
     */
    'extractScript'?: string;
}
/**
 *
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace
 */
export interface GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace {
    /**
     *
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace
     */
    'handle': string | null;
    /**
     *
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationOwnerWorkspace
     */
    'name': string;
}
/**
 * State definition
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationStatesValue
 */
export interface GetPublicIntegrationByIdResponseIntegrationStatesValue {
    /**
     * Type of the [State](#schema_state) (`conversation`, `user` or `integration`)
     * @type {string}
     * @memberof GetPublicIntegrationByIdResponseIntegrationStatesValue
     */
    'type': GetPublicIntegrationByIdResponseIntegrationStatesValueTypeEnum;
    /**
     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.
     * @type {{ [key: string]: any; }}
     * @memberof GetPublicIntegrationByIdResponseIntegrationStatesValue
     */
    'schema': {
        [key: string]: any;
    };
}
export declare const GetPublicIntegrationByIdResponseIntegrationStatesValueTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Integration: "integration";
};
export type GetPublicIntegrationByIdResponseIntegrationStatesValueTypeEnum = typeof GetPublicIntegrationByIdResponseIntegrationStatesValueTypeEnum[keyof typeof GetPublicIntegrationByIdResponseIntegrationStatesValueTypeEnum];
/**
 * User object configuration
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationUser
 */
export interface GetPublicIntegrationByIdResponseIntegrationUser {
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue; }}
     * @memberof GetPublicIntegrationByIdResponseIntegrationUser
     */
    'tags': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationTagsValue;
    };
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationUserCreation}
     * @memberof GetPublicIntegrationByIdResponseIntegrationUser
     */
    'creation': GetPublicIntegrationByIdResponseIntegrationUserCreation;
}
/**
 * The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.
 * @export
 * @interface GetPublicIntegrationByIdResponseIntegrationUserCreation
 */
export interface GetPublicIntegrationByIdResponseIntegrationUserCreation {
    /**
     * Enable user creation
     * @type {boolean}
     * @memberof GetPublicIntegrationByIdResponseIntegrationUserCreation
     */
    'enabled': boolean;
    /**
     * The list of tags that are required to be specified when calling the API directly to create a user.
     * @type {Array<string>}
     * @memberof GetPublicIntegrationByIdResponseIntegrationUserCreation
     */
    'requiredTags': Array<string>;
}
/**
 *
 * @export
 * @interface GetPublicIntegrationResponse
 */
export interface GetPublicIntegrationResponse {
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegration}
     * @memberof GetPublicIntegrationResponse
     */
    'integration': GetPublicIntegrationByIdResponseIntegration;
}
/**
 *
 * @export
 * @interface GetPublicWorkspaceResponse
 */
export interface GetPublicWorkspaceResponse {
    /**
     *
     * @type {string}
     * @memberof GetPublicWorkspaceResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GetPublicWorkspaceResponse
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof GetPublicWorkspaceResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetPublicWorkspaceResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetPublicWorkspaceResponse
     */
    'about'?: string;
    /**
     *
     * @type {string}
     * @memberof GetPublicWorkspaceResponse
     */
    'profilePicture'?: string;
    /**
     *
     * @type {string}
     * @memberof GetPublicWorkspaceResponse
     */
    'contactEmail'?: string;
    /**
     *
     * @type {string}
     * @memberof GetPublicWorkspaceResponse
     */
    'website'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof GetPublicWorkspaceResponse
     */
    'socialAccounts'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof GetPublicWorkspaceResponse
     */
    'handle'?: string;
}
/**
 *
 * @export
 * @interface GetStateResponse
 */
export interface GetStateResponse {
    /**
     *
     * @type {State}
     * @memberof GetStateResponse
     */
    'state': State;
}
/**
 *
 * @export
 * @interface GetTableResponse
 */
export interface GetTableResponse {
    /**
     *
     * @type {Table}
     * @memberof GetTableResponse
     */
    'table': Table;
    /**
     * The total number of rows present in the table.
     * @type {number}
     * @memberof GetTableResponse
     */
    'rows': number;
    /**
     * The number of rows pending indexing, relevant for search functionalities.
     * @type {number}
     * @memberof GetTableResponse
     */
    'indexingCount': number;
}
/**
 *
 * @export
 * @interface GetTableRowResponse
 */
export interface GetTableRowResponse {
    /**
     *
     * @type {Row}
     * @memberof GetTableRowResponse
     */
    'row': Row;
}
/**
 *
 * @export
 * @interface GetTaskResponse
 */
export interface GetTaskResponse {
    /**
     *
     * @type {Task}
     * @memberof GetTaskResponse
     */
    'task': Task;
}
/**
 *
 * @export
 * @interface GetUpcomingInvoiceResponse
 */
export interface GetUpcomingInvoiceResponse {
    /**
     * ID of the invoice.
     * @type {string}
     * @memberof GetUpcomingInvoiceResponse
     */
    'id': string;
    /**
     * Total amount to pay of the invoice.
     * @type {number}
     * @memberof GetUpcomingInvoiceResponse
     */
    'total': number;
}
/**
 *
 * @export
 * @interface GetUsageResponse
 */
export interface GetUsageResponse {
    /**
     *
     * @type {Usage}
     * @memberof GetUsageResponse
     */
    'usage': Usage;
}
/**
 *
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     *
     * @type {User}
     * @memberof GetUserResponse
     */
    'user': User;
}
/**
 *
 * @export
 * @interface GetWorkspaceQuotaResponse
 */
export interface GetWorkspaceQuotaResponse {
    /**
     *
     * @type {GetWorkspaceQuotaResponseQuota}
     * @memberof GetWorkspaceQuotaResponse
     */
    'quota': GetWorkspaceQuotaResponseQuota;
}
/**
 *
 * @export
 * @interface GetWorkspaceQuotaResponseQuota
 */
export interface GetWorkspaceQuotaResponseQuota {
    /**
     * Period of the quota that it is applied to
     * @type {string}
     * @memberof GetWorkspaceQuotaResponseQuota
     */
    'period': string;
    /**
     * Value of the quota that is used
     * @type {number}
     * @memberof GetWorkspaceQuotaResponseQuota
     */
    'value': number;
    /**
     * Usage type that can be used
     * @type {string}
     * @memberof GetWorkspaceQuotaResponseQuota
     */
    'type': GetWorkspaceQuotaResponseQuotaTypeEnum;
}
export declare const GetWorkspaceQuotaResponseQuotaTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type GetWorkspaceQuotaResponseQuotaTypeEnum = typeof GetWorkspaceQuotaResponseQuotaTypeEnum[keyof typeof GetWorkspaceQuotaResponseQuotaTypeEnum];
/**
 *
 * @export
 * @interface GetWorkspaceResponse
 */
export interface GetWorkspaceResponse {
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof GetWorkspaceResponse
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'accountType': GetWorkspaceResponseAccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'billingVersion': GetWorkspaceResponseBillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'plan': GetWorkspaceResponsePlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof GetWorkspaceResponse
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof GetWorkspaceResponse
     */
    'spendingLimit': number;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'about'?: string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'profilePicture'?: string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'contactEmail'?: string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'website'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof GetWorkspaceResponse
     */
    'socialAccounts'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof GetWorkspaceResponse
     */
    'isPublic'?: boolean;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'handle'?: string;
}
export declare const GetWorkspaceResponseAccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type GetWorkspaceResponseAccountTypeEnum = typeof GetWorkspaceResponseAccountTypeEnum[keyof typeof GetWorkspaceResponseAccountTypeEnum];
export declare const GetWorkspaceResponseBillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type GetWorkspaceResponseBillingVersionEnum = typeof GetWorkspaceResponseBillingVersionEnum[keyof typeof GetWorkspaceResponseBillingVersionEnum];
export declare const GetWorkspaceResponsePlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type GetWorkspaceResponsePlanEnum = typeof GetWorkspaceResponsePlanEnum[keyof typeof GetWorkspaceResponsePlanEnum];
/**
 *
 * @export
 * @interface Integration
 */
export interface Integration {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Integration
     */
    'id': string;
    /**
     * Creation date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof Integration
     */
    'createdAt': string;
    /**
     * Updating date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof Integration
     */
    'updatedAt': string;
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationIdentifier}
     * @memberof Integration
     */
    'identifier': GetPublicIntegrationByIdResponseIntegrationIdentifier;
    /**
     * Type of the task
     * @type {string}
     * @memberof Integration
     */
    'name': string;
    /**
     * Type of the task
     * @type {string}
     * @memberof Integration
     */
    'version': string;
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationConfiguration}
     * @memberof Integration
     */
    'configuration': GetPublicIntegrationByIdResponseIntegrationConfiguration;
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValue; }}
     * @memberof Integration
     */
    'channels': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationChannelsValue;
    };
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue; }}
     * @memberof Integration
     */
    'states': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationStatesValue;
    };
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue; }}
     * @memberof Integration
     */
    'events': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationEventsValue;
    };
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue; }}
     * @memberof Integration
     */
    'actions': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationActionsValue;
    };
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationUser}
     * @memberof Integration
     */
    'user': GetPublicIntegrationByIdResponseIntegrationUser;
    /**
     *
     * @type {{ [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue; }}
     * @memberof Integration
     */
    'entities': {
        [key: string]: GetPublicIntegrationByIdResponseIntegrationEntitiesValue;
    };
    /**
     * Indicates if the integration is a development integration; Dev integrations run locally
     * @type {boolean}
     * @memberof Integration
     */
    'dev': boolean;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof Integration
     */
    'title': string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof Integration
     */
    'description': string;
    /**
     * URL of the icon of the integration. This is the icon that will be displayed in the UI
     * @type {string}
     * @memberof Integration
     */
    'iconUrl': string;
    /**
     * URL of the readme of the integration. This is the readme that will be displayed in the UI
     * @type {string}
     * @memberof Integration
     */
    'readmeUrl': string;
    /**
     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.
     * @type {boolean}
     * @memberof Integration
     */
    'public': boolean;
    /**
     * Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing.
     * @type {Array<string>}
     * @memberof Integration
     */
    'secrets': Array<string>;
}
/**
 *
 * @export
 * @interface IntrospectBody
 */
export interface IntrospectBody {
    /**
     *
     * @type {string}
     * @memberof IntrospectBody
     */
    'botId': string;
}
/**
 *
 * @export
 * @interface IntrospectResponse
 */
export interface IntrospectResponse {
    /**
     *
     * @type {string}
     * @memberof IntrospectResponse
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof IntrospectResponse
     */
    'botId': string;
    /**
     *
     * @type {string}
     * @memberof IntrospectResponse
     */
    'userId': string;
}
/**
 *
 * @export
 * @interface Issue
 */
export interface Issue {
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'lastSeenAt': string;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'description': string;
    /**
     *
     * @type {{ [key: string]: IssueGroupedDataValue; }}
     * @memberof Issue
     */
    'groupedData': {
        [key: string]: IssueGroupedDataValue;
    };
    /**
     *
     * @type {number}
     * @memberof Issue
     */
    'eventsCount': number;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'category': IssueCategoryEnum;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'resolutionLink': string | null;
}
export declare const IssueCategoryEnum: {
    readonly UserCode: "user_code";
    readonly Limits: "limits";
    readonly Configuration: "configuration";
    readonly Other: "other";
};
export type IssueCategoryEnum = typeof IssueCategoryEnum[keyof typeof IssueCategoryEnum];
/**
 *
 * @export
 * @interface IssueEvent
 */
export interface IssueEvent {
    /**
     *
     * @type {string}
     * @memberof IssueEvent
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof IssueEvent
     */
    'createdAt': string;
    /**
     *
     * @type {{ [key: string]: IssueGroupedDataValue; }}
     * @memberof IssueEvent
     */
    'data': {
        [key: string]: IssueGroupedDataValue;
    };
}
/**
 *
 * @export
 * @interface IssueGroupedDataValue
 */
export interface IssueGroupedDataValue {
    /**
     *
     * @type {string}
     * @memberof IssueGroupedDataValue
     */
    'raw': string;
    /**
     *
     * @type {string}
     * @memberof IssueGroupedDataValue
     */
    'pretty'?: string;
}
/**
 *
 * @export
 * @interface ListActivitiesResponse
 */
export interface ListActivitiesResponse {
    /**
     *
     * @type {Array<Activity>}
     * @memberof ListActivitiesResponse
     */
    'activities': Array<Activity>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListActivitiesResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListBotIssueEventsResponse
 */
export interface ListBotIssueEventsResponse {
    /**
     *
     * @type {Array<ListBotIssueEventsResponseIssueEventsInner>}
     * @memberof ListBotIssueEventsResponse
     */
    'issueEvents': Array<ListBotIssueEventsResponseIssueEventsInner>;
}
/**
 *
 * @export
 * @interface ListBotIssueEventsResponseIssueEventsInner
 */
export interface ListBotIssueEventsResponseIssueEventsInner {
    /**
     *
     * @type {string}
     * @memberof ListBotIssueEventsResponseIssueEventsInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssueEventsResponseIssueEventsInner
     */
    'createdAt': string;
    /**
     *
     * @type {{ [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; }}
     * @memberof ListBotIssueEventsResponseIssueEventsInner
     */
    'data': {
        [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue;
    };
}
/**
 *
 * @export
 * @interface ListBotIssuesResponse
 */
export interface ListBotIssuesResponse {
    /**
     *
     * @type {Array<ListBotIssuesResponseIssuesInner>}
     * @memberof ListBotIssuesResponse
     */
    'issues': Array<ListBotIssuesResponseIssuesInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListBotIssuesResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListBotIssuesResponseIssuesInner
 */
export interface ListBotIssuesResponseIssuesInner {
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'lastSeenAt': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'description': string;
    /**
     *
     * @type {{ [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; }}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'groupedData': {
        [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue;
    };
    /**
     *
     * @type {number}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'eventsCount': number;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'category': ListBotIssuesResponseIssuesInnerCategoryEnum;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'resolutionLink': string | null;
}
export declare const ListBotIssuesResponseIssuesInnerCategoryEnum: {
    readonly UserCode: "user_code";
    readonly Limits: "limits";
    readonly Configuration: "configuration";
    readonly Other: "other";
};
export type ListBotIssuesResponseIssuesInnerCategoryEnum = typeof ListBotIssuesResponseIssuesInnerCategoryEnum[keyof typeof ListBotIssuesResponseIssuesInnerCategoryEnum];
/**
 *
 * @export
 * @interface ListBotIssuesResponseIssuesInnerGroupedDataValue
 */
export interface ListBotIssuesResponseIssuesInnerGroupedDataValue {
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInnerGroupedDataValue
     */
    'raw': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInnerGroupedDataValue
     */
    'pretty'?: string;
}
/**
 *
 * @export
 * @interface ListBotsResponse
 */
export interface ListBotsResponse {
    /**
     *
     * @type {Array<ListBotsResponseBotsInner>}
     * @memberof ListBotsResponse
     */
    'bots': Array<ListBotsResponseBotsInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListBotsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListBotsResponseBotsInner
 */
export interface ListBotsResponseBotsInner {
    /**
     * User id
     * @type {string}
     * @memberof ListBotsResponseBotsInner
     */
    'id': string;
    /**
     * Creation date of the [Bot](#schema_bot) in ISO 8601 format
     * @type {string}
     * @memberof ListBotsResponseBotsInner
     */
    'createdAt': string;
    /**
     * Updating date of the [Bot](#schema_bot) in ISO 8601 format
     * @type {string}
     * @memberof ListBotsResponseBotsInner
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof ListBotsResponseBotsInner
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ListBotsResponseBotsInner
     */
    'deployedAt'?: string;
}
/**
 *
 * @export
 * @interface ListConversationsResponse
 */
export interface ListConversationsResponse {
    /**
     *
     * @type {Array<Conversation>}
     * @memberof ListConversationsResponse
     */
    'conversations': Array<Conversation>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListConversationsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListConversationsResponseMeta
 */
export interface ListConversationsResponseMeta {
    /**
     * The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint.
     * @type {string}
     * @memberof ListConversationsResponseMeta
     */
    'nextToken'?: string;
}
/**
 *
 * @export
 * @interface ListEventsResponse
 */
export interface ListEventsResponse {
    /**
     *
     * @type {Array<Event>}
     * @memberof ListEventsResponse
     */
    'events': Array<Event>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListEventsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListFilesResponse
 */
export interface ListFilesResponse {
    /**
     *
     * @type {Array<ListFilesResponseFilesInner>}
     * @memberof ListFilesResponse
     */
    'files': Array<ListFilesResponseFilesInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListFilesResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListFilesResponseFilesInner
 */
export interface ListFilesResponseFilesInner {
    /**
     * File ID
     * @type {string}
     * @memberof ListFilesResponseFilesInner
     */
    'id': string;
    /**
     * The ID of the bot the file belongs to
     * @type {string}
     * @memberof ListFilesResponseFilesInner
     */
    'botId': string;
    /**
     * File name
     * @type {string}
     * @memberof ListFilesResponseFilesInner
     */
    'name': string | null;
    /**
     * File size in bytes
     * @type {number}
     * @memberof ListFilesResponseFilesInner
     */
    'size': number | null;
    /**
     * MIME type of the file\'s content
     * @type {string}
     * @memberof ListFilesResponseFilesInner
     */
    'contentType': string;
    /**
     * The tags of the file as an object of key/value pairs
     * @type {{ [key: string]: string; }}
     * @memberof ListFilesResponseFilesInner
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * File creation timestamp in ISO 8601 format
     * @type {string}
     * @memberof ListFilesResponseFilesInner
     */
    'createdAt': string;
    /**
     * File last update timestamp in ISO 8601 format
     * @type {string}
     * @memberof ListFilesResponseFilesInner
     */
    'updatedAt': string;
    /**
     * Access policies configured for the file.
     * @type {Array<string>}
     * @memberof ListFilesResponseFilesInner
     */
    'accessPolicies': Array<string>;
    /**
     * Status of the file indexing process. No value will be set if indexing was not enabled for the file when it was created.
     * @type {string}
     * @memberof ListFilesResponseFilesInner
     */
    'indexingStatus'?: ListFilesResponseFilesInnerIndexingStatusEnum;
    /**
     * Last failure reason of the file indexing if the indexing status is \"FAILED\".
     * @type {string}
     * @memberof ListFilesResponseFilesInner
     */
    'indexingFailureReason'?: string;
}
export declare const ListFilesResponseFilesInnerIndexingStatusEnum: {
    readonly Pending: "PENDING";
    readonly InProgress: "IN_PROGRESS";
    readonly Complete: "COMPLETE";
    readonly Failed: "FAILED";
};
export type ListFilesResponseFilesInnerIndexingStatusEnum = typeof ListFilesResponseFilesInnerIndexingStatusEnum[keyof typeof ListFilesResponseFilesInnerIndexingStatusEnum];
/**
 *
 * @export
 * @interface ListIntegrationApiKeysResponse
 */
export interface ListIntegrationApiKeysResponse {
    /**
     *
     * @type {Array<ListPersonalAccessTokensResponsePatsInner>}
     * @memberof ListIntegrationApiKeysResponse
     */
    'iaks': Array<ListPersonalAccessTokensResponsePatsInner>;
}
/**
 *
 * @export
 * @interface ListIntegrationsResponse
 */
export interface ListIntegrationsResponse {
    /**
     *
     * @type {Array<ListIntegrationsResponseIntegrationsInner>}
     * @memberof ListIntegrationsResponse
     */
    'integrations': Array<ListIntegrationsResponseIntegrationsInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListIntegrationsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListIntegrationsResponseIntegrationsInner
 */
export interface ListIntegrationsResponseIntegrationsInner {
    /**
     * User id
     * @type {string}
     * @memberof ListIntegrationsResponseIntegrationsInner
     */
    'id': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof ListIntegrationsResponseIntegrationsInner
     */
    'name': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof ListIntegrationsResponseIntegrationsInner
     */
    'version': string;
    /**
     * Creation date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof ListIntegrationsResponseIntegrationsInner
     */
    'createdAt': string;
    /**
     * Updating date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof ListIntegrationsResponseIntegrationsInner
     */
    'updatedAt': string;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof ListIntegrationsResponseIntegrationsInner
     */
    'title': string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof ListIntegrationsResponseIntegrationsInner
     */
    'description': string;
    /**
     * URL of the icon of the integration. This is the icon that will be displayed in the UI
     * @type {string}
     * @memberof ListIntegrationsResponseIntegrationsInner
     */
    'iconUrl': string;
    /**
     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.
     * @type {boolean}
     * @memberof ListIntegrationsResponseIntegrationsInner
     */
    'public': boolean;
}
/**
 *
 * @export
 * @interface ListMessagesResponse
 */
export interface ListMessagesResponse {
    /**
     *
     * @type {Array<Message>}
     * @memberof ListMessagesResponse
     */
    'messages': Array<Message>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListMessagesResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListParticipantsResponse
 */
export interface ListParticipantsResponse {
    /**
     *
     * @type {Array<User>}
     * @memberof ListParticipantsResponse
     */
    'participants': Array<User>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListParticipantsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListPersonalAccessTokensResponse
 */
export interface ListPersonalAccessTokensResponse {
    /**
     *
     * @type {Array<ListPersonalAccessTokensResponsePatsInner>}
     * @memberof ListPersonalAccessTokensResponse
     */
    'pats': Array<ListPersonalAccessTokensResponsePatsInner>;
}
/**
 *
 * @export
 * @interface ListPersonalAccessTokensResponsePatsInner
 */
export interface ListPersonalAccessTokensResponsePatsInner {
    /**
     *
     * @type {string}
     * @memberof ListPersonalAccessTokensResponsePatsInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ListPersonalAccessTokensResponsePatsInner
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ListPersonalAccessTokensResponsePatsInner
     */
    'note': string;
}
/**
 *
 * @export
 * @interface ListPublicIntegrationsResponse
 */
export interface ListPublicIntegrationsResponse {
    /**
     *
     * @type {Array<ListPublicIntegrationsResponseIntegrationsInner>}
     * @memberof ListPublicIntegrationsResponse
     */
    'integrations': Array<ListPublicIntegrationsResponseIntegrationsInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListPublicIntegrationsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListPublicIntegrationsResponseIntegrationsInner
 */
export interface ListPublicIntegrationsResponseIntegrationsInner {
    /**
     * User id
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'id': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'name': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'version': string;
    /**
     * Creation date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'createdAt': string;
    /**
     * Updating date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'updatedAt': string;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'title': string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'description': string;
    /**
     * URL of the icon of the integration. This is the icon that will be displayed in the UI
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'iconUrl': string;
    /**
     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.
     * @type {boolean}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'public': boolean;
    /**
     *
     * @type {ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'ownerWorkspace': ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace;
}
/**
 *
 * @export
 * @interface ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace
 */
export interface ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace {
    /**
     *
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace
     */
    'handle': string | null;
    /**
     *
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInnerOwnerWorkspace
     */
    'name': string;
}
/**
 *
 * @export
 * @interface ListTablesResponse
 */
export interface ListTablesResponse {
    /**
     *
     * @type {Array<Table>}
     * @memberof ListTablesResponse
     */
    'tables': Array<Table>;
}
/**
 *
 * @export
 * @interface ListTasksResponse
 */
export interface ListTasksResponse {
    /**
     *
     * @type {Array<Task>}
     * @memberof ListTasksResponse
     */
    'tasks': Array<Task>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListTasksResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListUsageHistoryResponse
 */
export interface ListUsageHistoryResponse {
    /**
     *
     * @type {Array<Usage>}
     * @memberof ListUsageHistoryResponse
     */
    'usages': Array<Usage>;
}
/**
 *
 * @export
 * @interface ListUsersResponse
 */
export interface ListUsersResponse {
    /**
     *
     * @type {Array<User>}
     * @memberof ListUsersResponse
     */
    'users': Array<User>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListUsersResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListWorkspaceInvoicesResponse
 */
export interface ListWorkspaceInvoicesResponse {
    /**
     *
     * @type {Array<ListWorkspaceInvoicesResponseInvoicesInner>}
     * @memberof ListWorkspaceInvoicesResponse
     */
    'invoices': Array<ListWorkspaceInvoicesResponseInvoicesInner>;
}
/**
 *
 * @export
 * @interface ListWorkspaceInvoicesResponseInvoicesInner
 */
export interface ListWorkspaceInvoicesResponseInvoicesInner {
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'id': string;
    /**
     *
     * @type {ListWorkspaceInvoicesResponseInvoicesInnerPeriod}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'period': ListWorkspaceInvoicesResponseInvoicesInnerPeriod;
    /**
     * Date on which the invoice was generated.
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'date': string;
    /**
     * Total amount to pay of the invoice.
     * @type {number}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'amount': number;
    /**
     * Currency of the invoice amount.
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'currency': string;
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'paymentStatus': ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum;
    /**
     * Number of times payment has been unsuccessfully attempted on the invoice.
     * @type {number}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'paymentAttemptCount': number | null;
    /**
     * Date on which the next payment attempt will be made.
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'nextPaymentAttemptDate': string | null;
    /**
     * URL to download the PDF file of the invoice.
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'pdfUrl': string;
}
export declare const ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum: {
    readonly Paid: "paid";
    readonly Unpaid: "unpaid";
};
export type ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum = typeof ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum[keyof typeof ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum];
/**
 *
 * @export
 * @interface ListWorkspaceInvoicesResponseInvoicesInnerPeriod
 */
export interface ListWorkspaceInvoicesResponseInvoicesInnerPeriod {
    /**
     *
     * @type {number}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInnerPeriod
     */
    'month': number;
    /**
     *
     * @type {number}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInnerPeriod
     */
    'year': number;
}
/**
 *
 * @export
 * @interface ListWorkspaceMembersResponse
 */
export interface ListWorkspaceMembersResponse {
    /**
     *
     * @type {Array<ListWorkspaceMembersResponseMembersInner>}
     * @memberof ListWorkspaceMembersResponse
     */
    'members': Array<ListWorkspaceMembersResponseMembersInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListWorkspaceMembersResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListWorkspaceMembersResponseMembersInner
 */
export interface ListWorkspaceMembersResponseMembersInner {
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceMembersResponseMembersInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceMembersResponseMembersInner
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceMembersResponseMembersInner
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceMembersResponseMembersInner
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceMembersResponseMembersInner
     */
    'role': ListWorkspaceMembersResponseMembersInnerRoleEnum;
}
export declare const ListWorkspaceMembersResponseMembersInnerRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type ListWorkspaceMembersResponseMembersInnerRoleEnum = typeof ListWorkspaceMembersResponseMembersInnerRoleEnum[keyof typeof ListWorkspaceMembersResponseMembersInnerRoleEnum];
/**
 *
 * @export
 * @interface ListWorkspaceQuotasResponse
 */
export interface ListWorkspaceQuotasResponse {
    /**
     *
     * @type {Array<ListWorkspaceQuotasResponseQuotasInner>}
     * @memberof ListWorkspaceQuotasResponse
     */
    'quotas': Array<ListWorkspaceQuotasResponseQuotasInner>;
}
/**
 *
 * @export
 * @interface ListWorkspaceQuotasResponseQuotasInner
 */
export interface ListWorkspaceQuotasResponseQuotasInner {
    /**
     * Period of the quota that it is applied to
     * @type {string}
     * @memberof ListWorkspaceQuotasResponseQuotasInner
     */
    'period': string;
    /**
     * Value of the quota that is used
     * @type {number}
     * @memberof ListWorkspaceQuotasResponseQuotasInner
     */
    'value': number;
    /**
     * Usage type that can be used
     * @type {string}
     * @memberof ListWorkspaceQuotasResponseQuotasInner
     */
    'type': ListWorkspaceQuotasResponseQuotasInnerTypeEnum;
}
export declare const ListWorkspaceQuotasResponseQuotasInnerTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type ListWorkspaceQuotasResponseQuotasInnerTypeEnum = typeof ListWorkspaceQuotasResponseQuotasInnerTypeEnum[keyof typeof ListWorkspaceQuotasResponseQuotasInnerTypeEnum];
/**
 *
 * @export
 * @interface ListWorkspaceUsagesResponse
 */
export interface ListWorkspaceUsagesResponse {
    /**
     *
     * @type {Array<Usage>}
     * @memberof ListWorkspaceUsagesResponse
     */
    'usages': Array<Usage>;
}
/**
 *
 * @export
 * @interface ListWorkspacesResponse
 */
export interface ListWorkspacesResponse {
    /**
     *
     * @type {Array<UpdateWorkspaceResponse>}
     * @memberof ListWorkspacesResponse
     */
    'workspaces': Array<UpdateWorkspaceResponse>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListWorkspacesResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 * The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Message
     */
    'id': string;
    /**
     * Creation date of the [Message](#schema_message) in ISO 8601 format
     * @type {string}
     * @memberof Message
     */
    'createdAt': string;
    /**
     * Type of the task
     * @type {string}
     * @memberof Message
     */
    'type': string;
    /**
     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location
     * @type {{ [key: string]: any; }}
     * @memberof Message
     */
    'payload': {
        [key: string]: any;
    };
    /**
     * Direction of the message (`incoming` or `outgoing`).
     * @type {string}
     * @memberof Message
     */
    'direction': MessageDirectionEnum;
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Message
     */
    'userId': string;
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Message
     */
    'conversationId': string;
    /**
     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof Message
     */
    'tags': {
        [key: string]: string;
    };
}
export declare const MessageDirectionEnum: {
    readonly Incoming: "incoming";
    readonly Outgoing: "outgoing";
};
export type MessageDirectionEnum = typeof MessageDirectionEnum[keyof typeof MessageDirectionEnum];
/**
 *
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * File ID
     * @type {string}
     * @memberof ModelFile
     */
    'id': string;
    /**
     * The ID of the bot the file belongs to
     * @type {string}
     * @memberof ModelFile
     */
    'botId': string;
    /**
     * File name
     * @type {string}
     * @memberof ModelFile
     */
    'name': string | null;
    /**
     * File size in bytes
     * @type {number}
     * @memberof ModelFile
     */
    'size': number | null;
    /**
     * MIME type of the file\'s content
     * @type {string}
     * @memberof ModelFile
     */
    'contentType': string;
    /**
     * The tags of the file as an object of key/value pairs
     * @type {{ [key: string]: string; }}
     * @memberof ModelFile
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * File creation timestamp in ISO 8601 format
     * @type {string}
     * @memberof ModelFile
     */
    'createdAt': string;
    /**
     * File last update timestamp in ISO 8601 format
     * @type {string}
     * @memberof ModelFile
     */
    'updatedAt': string;
    /**
     * Access policies configured for the file.
     * @type {Array<string>}
     * @memberof ModelFile
     */
    'accessPolicies': Array<string>;
    /**
     * Status of the file indexing process. No value will be set if indexing was not enabled for the file when it was created.
     * @type {string}
     * @memberof ModelFile
     */
    'indexingStatus'?: ModelFileIndexingStatusEnum;
    /**
     * Last failure reason of the file indexing if the indexing status is \"FAILED\".
     * @type {string}
     * @memberof ModelFile
     */
    'indexingFailureReason'?: string;
}
export declare const ModelFileIndexingStatusEnum: {
    readonly Pending: "PENDING";
    readonly InProgress: "IN_PROGRESS";
    readonly Complete: "COMPLETE";
    readonly Failed: "FAILED";
};
export type ModelFileIndexingStatusEnum = typeof ModelFileIndexingStatusEnum[keyof typeof ModelFileIndexingStatusEnum];
/**
 *
 * @export
 * @interface PatchStateBody
 */
export interface PatchStateBody {
    /**
     * Payload is the content of the state defined by your bot.
     * @type {{ [key: string]: any; }}
     * @memberof PatchStateBody
     */
    'payload': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface PatchStateResponse
 */
export interface PatchStateResponse {
    /**
     *
     * @type {State}
     * @memberof PatchStateResponse
     */
    'state': State;
}
/**
 *
 * @export
 * @interface RenameTableColumnBody
 */
export interface RenameTableColumnBody {
    /**
     * The existing name of the column.
     * @type {string}
     * @memberof RenameTableColumnBody
     */
    'name': string;
    /**
     * The new name to assign to the column.
     * @type {string}
     * @memberof RenameTableColumnBody
     */
    'newName': string;
}
/**
 *
 * @export
 * @interface RenameTableColumnResponse
 */
export interface RenameTableColumnResponse {
    /**
     *
     * @type {Table}
     * @memberof RenameTableColumnResponse
     */
    'table': Table;
}
/**
 *
 * @export
 * @interface Row
 */
export interface Row {
    [key: string]: any;
    /**
     * Unique identifier for the row.
     * @type {number}
     * @memberof Row
     */
    'id': number;
    /**
     * Timestamp of row creation.
     * @type {string}
     * @memberof Row
     */
    'createdAt'?: string;
    /**
     * Timestamp of the last row update.
     * @type {string}
     * @memberof Row
     */
    'updatedAt'?: string;
    /**
     * Optional numeric value indicating similarity, when using findTableRows.
     * @type {number}
     * @memberof Row
     */
    'similarity'?: number;
}
/**
 *
 * @export
 * @interface RunVrlBody
 */
export interface RunVrlBody {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof RunVrlBody
     */
    'data': {
        [key: string]: any;
    };
    /**
     *
     * @type {string}
     * @memberof RunVrlBody
     */
    'script': string;
}
/**
 *
 * @export
 * @interface RunVrlResponse
 */
export interface RunVrlResponse {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof RunVrlResponse
     */
    'data': {
        [key: string]: any;
    };
    /**
     *
     * @type {any}
     * @memberof RunVrlResponse
     */
    'result'?: any | null;
}
/**
 *
 * @export
 * @interface SearchFilesResponse
 */
export interface SearchFilesResponse {
    /**
     *
     * @type {Array<SearchFilesResponsePassagesInner>}
     * @memberof SearchFilesResponse
     */
    'passages': Array<SearchFilesResponsePassagesInner>;
}
/**
 *
 * @export
 * @interface SearchFilesResponsePassagesInner
 */
export interface SearchFilesResponsePassagesInner {
    /**
     * The content of the matching passage in the file including surrounding context, if any.
     * @type {string}
     * @memberof SearchFilesResponsePassagesInner
     */
    'content': string;
    /**
     * The score indicating the similarity of the passage to the query. A higher score indicates higher similarity.
     * @type {number}
     * @memberof SearchFilesResponsePassagesInner
     */
    'score': number;
    /**
     *
     * @type {SearchFilesResponsePassagesInnerFile}
     * @memberof SearchFilesResponsePassagesInner
     */
    'file': SearchFilesResponsePassagesInnerFile;
}
/**
 *
 * @export
 * @interface SearchFilesResponsePassagesInnerFile
 */
export interface SearchFilesResponsePassagesInnerFile {
    /**
     * File ID
     * @type {string}
     * @memberof SearchFilesResponsePassagesInnerFile
     */
    'id': string;
    /**
     * File name
     * @type {string}
     * @memberof SearchFilesResponsePassagesInnerFile
     */
    'name': string | null;
    /**
     * The tags of the file as an object of key/value pairs.
     * @type {{ [key: string]: string; }}
     * @memberof SearchFilesResponsePassagesInnerFile
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * File creation timestamp in ISO 8601 format
     * @type {string}
     * @memberof SearchFilesResponsePassagesInnerFile
     */
    'createdAt': string;
    /**
     * File last update timestamp in ISO 8601 format
     * @type {string}
     * @memberof SearchFilesResponsePassagesInnerFile
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface SetAccountPreferenceBody
 */
export interface SetAccountPreferenceBody {
    /**
     *
     * @type {any}
     * @memberof SetAccountPreferenceBody
     */
    'value'?: any;
}
/**
 *
 * @export
 * @interface SetStateBody
 */
export interface SetStateBody {
    /**
     * Payload is the content of the state defined by your bot.
     * @type {{ [key: string]: any; }}
     * @memberof SetStateBody
     */
    'payload': {
        [key: string]: any;
    } | null;
    /**
     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\'t expire.
     * @type {number}
     * @memberof SetStateBody
     */
    'expiry'?: number;
}
/**
 *
 * @export
 * @interface SetStateResponse
 */
export interface SetStateResponse {
    /**
     *
     * @type {State}
     * @memberof SetStateResponse
     */
    'state': State;
}
/**
 *
 * @export
 * @interface SetWorkspacePaymentMethodBody
 */
export interface SetWorkspacePaymentMethodBody {
    /**
     * ID of the Stripe PaymentMethod to attach to the workspace.
     * @type {string}
     * @memberof SetWorkspacePaymentMethodBody
     */
    'stripePaymentMethodId': string;
}
/**
 *
 * @export
 * @interface SetWorkspacePaymentMethodResponse
 */
export interface SetWorkspacePaymentMethodResponse {
    /**
     *
     * @type {string}
     * @memberof SetWorkspacePaymentMethodResponse
     */
    'stripePaymentMethodId': string;
    /**
     *
     * @type {SetWorkspacePaymentMethodResponsePaymentMethod}
     * @memberof SetWorkspacePaymentMethodResponse
     */
    'paymentMethod': SetWorkspacePaymentMethodResponsePaymentMethod | null;
    /**
     *
     * @type {string}
     * @memberof SetWorkspacePaymentMethodResponse
     */
    'status': SetWorkspacePaymentMethodResponseStatusEnum;
    /**
     *
     * @type {SetWorkspacePaymentMethodResponseNextAction}
     * @memberof SetWorkspacePaymentMethodResponse
     */
    'nextAction'?: SetWorkspacePaymentMethodResponseNextAction;
}
export declare const SetWorkspacePaymentMethodResponseStatusEnum: {
    readonly Succeeded: "succeeded";
    readonly Processing: "processing";
    readonly Canceled: "canceled";
    readonly RequiresConfirmation: "requires_confirmation";
    readonly RequiresAction: "requires_action";
    readonly RequiresPaymentMethod: "requires_payment_method";
};
export type SetWorkspacePaymentMethodResponseStatusEnum = typeof SetWorkspacePaymentMethodResponseStatusEnum[keyof typeof SetWorkspacePaymentMethodResponseStatusEnum];
/**
 * If the payment needs to be confirmed, this will contain a URL to redirect the user to so they can complete the verification process to confirm it.
 * @export
 * @interface SetWorkspacePaymentMethodResponseNextAction
 */
export interface SetWorkspacePaymentMethodResponseNextAction {
    /**
     *
     * @type {string}
     * @memberof SetWorkspacePaymentMethodResponseNextAction
     */
    'redirectToUrl': string;
}
/**
 *
 * @export
 * @interface SetWorkspacePaymentMethodResponsePaymentMethod
 */
export interface SetWorkspacePaymentMethodResponsePaymentMethod {
    /**
     *
     * @type {string}
     * @memberof SetWorkspacePaymentMethodResponsePaymentMethod
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof SetWorkspacePaymentMethodResponsePaymentMethod
     */
    'lastDigits': string;
}
/**
 * The state object represents the current payload. A state is always linked to either a bot, a conversation or a user.
 * @export
 * @interface State
 */
export interface State {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof State
     */
    'id': string;
    /**
     * Creation date of the [State](#schema_state) in ISO 8601 format
     * @type {string}
     * @memberof State
     */
    'createdAt': string;
    /**
     * Updating date of the [State](#schema_state) in ISO 8601 format
     * @type {string}
     * @memberof State
     */
    'updatedAt': string;
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof State
     */
    'botId': string;
    /**
     * Id of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof State
     */
    'conversationId'?: string;
    /**
     * Id of the [User](#schema_user)
     * @type {string}
     * @memberof State
     */
    'userId'?: string;
    /**
     * Type of the task
     * @type {string}
     * @memberof State
     */
    'name': string;
    /**
     * Type of the [State](#schema_state) represents the resource type (`conversation`, `user`, `bot`, `task` or `integration`) that the state is related to
     * @type {string}
     * @memberof State
     */
    'type': StateTypeEnum;
    /**
     * Payload is the content of the state defined by your bot.
     * @type {{ [key: string]: any; }}
     * @memberof State
     */
    'payload': {
        [key: string]: any;
    };
}
export declare const StateTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
    readonly Task: "task";
    readonly Integration: "integration";
};
export type StateTypeEnum = typeof StateTypeEnum[keyof typeof StateTypeEnum];
/**
 *
 * @export
 * @interface Table
 */
export interface Table {
    /**
     * Unique identifier for the table
     * @type {string}
     * @memberof Table
     */
    'id': string;
    /**
     * Required. This name is used to identify your table.
     * @type {string}
     * @memberof Table
     */
    'name': string;
    /**
     * The \'factor\' multiplies the row\'s data storage limit by 4KB and its quota count, but can only be set at table creation and not modified later. For instance, a factor of 2 increases storage to 8KB but counts as 2 rows in your quota. The default factor is 1.
     * @type {number}
     * @memberof Table
     */
    'factor'?: number;
    /**
     * A table designated as \"frozen\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations.
     * @type {boolean}
     * @memberof Table
     */
    'frozen'?: boolean;
    /**
     *
     * @type {TableSchema}
     * @memberof Table
     */
    'schema': TableSchema;
    /**
     * Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs.
     * @type {{ [key: string]: string; }}
     * @memberof Table
     */
    'tags'?: {
        [key: string]: string;
    };
    /**
     * Timestamp of table creation.
     * @type {string}
     * @memberof Table
     */
    'createdAt'?: string;
    /**
     * Timestamp of the last table update.
     * @type {string}
     * @memberof Table
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface TableSchema
 */
export interface TableSchema {
    /**
     *
     * @type {string}
     * @memberof TableSchema
     */
    '$schema': string;
    /**
     * List of keys/columns in the table.
     * @type {{ [key: string]: TableSchemaPropertiesValue; }}
     * @memberof TableSchema
     */
    'properties': {
        [key: string]: TableSchemaPropertiesValue;
    };
    /**
     * Additional properties can be provided, but they will be ignored if no column matches.
     * @type {boolean}
     * @memberof TableSchema
     */
    'additionalProperties': boolean;
    /**
     * Array of required properties.
     * @type {Array<string>}
     * @memberof TableSchema
     */
    'required'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof TableSchema
     */
    'type': TableSchemaTypeEnum;
}
export declare const TableSchemaTypeEnum: {
    readonly Object: "object";
};
export type TableSchemaTypeEnum = typeof TableSchemaTypeEnum[keyof typeof TableSchemaTypeEnum];
/**
 *
 * @export
 * @interface TableSchemaPropertiesValue
 */
export interface TableSchemaPropertiesValue {
    /**
     *
     * @type {string}
     * @memberof TableSchemaPropertiesValue
     */
    'type': TableSchemaPropertiesValueTypeEnum;
    /**
     *
     * @type {string}
     * @memberof TableSchemaPropertiesValue
     */
    'format'?: TableSchemaPropertiesValueFormatEnum;
    /**
     *
     * @type {string}
     * @memberof TableSchemaPropertiesValue
     */
    'description'?: string;
    /**
     *
     * @type {boolean}
     * @memberof TableSchemaPropertiesValue
     */
    'nullable'?: boolean;
    /**
     *
     * @type {TableSchemaPropertiesValueXZui}
     * @memberof TableSchemaPropertiesValue
     */
    'x-zui': TableSchemaPropertiesValueXZui;
}
export declare const TableSchemaPropertiesValueTypeEnum: {
    readonly String: "string";
    readonly Number: "number";
    readonly Boolean: "boolean";
    readonly Object: "object";
    readonly Null: "null";
};
export type TableSchemaPropertiesValueTypeEnum = typeof TableSchemaPropertiesValueTypeEnum[keyof typeof TableSchemaPropertiesValueTypeEnum];
export declare const TableSchemaPropertiesValueFormatEnum: {
    readonly DateTime: "date-time";
};
export type TableSchemaPropertiesValueFormatEnum = typeof TableSchemaPropertiesValueFormatEnum[keyof typeof TableSchemaPropertiesValueFormatEnum];
/**
 *
 * @export
 * @interface TableSchemaPropertiesValueXZui
 */
export interface TableSchemaPropertiesValueXZui {
    /**
     *
     * @type {number}
     * @memberof TableSchemaPropertiesValueXZui
     */
    'index': number;
    /**
     * [deprecated] ID of the column.
     * @type {string}
     * @memberof TableSchemaPropertiesValueXZui
     */
    'id'?: string;
    /**
     * Indicates if the column is vectorized and searchable.
     * @type {boolean}
     * @memberof TableSchemaPropertiesValueXZui
     */
    'searchable'?: boolean;
    /**
     * TypeScript typings for the column. Recommended if the type is \"object\", ex: \"\\{ foo: string; bar: number \\}\"
     * @type {string}
     * @memberof TableSchemaPropertiesValueXZui
     */
    'typings'?: string;
}
/**
 * Task definition
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Task
     */
    'id': string;
    /**
     * Title describing the task
     * @type {string}
     * @memberof Task
     */
    'title': string;
    /**
     * All the notes related to the execution of the current task
     * @type {string}
     * @memberof Task
     */
    'description': string;
    /**
     * Type of the task
     * @type {string}
     * @memberof Task
     */
    'type': string;
    /**
     * Content related to the task
     * @type {{ [key: string]: any; }}
     * @memberof Task
     */
    'data': {
        [key: string]: any;
    };
    /**
     * Status of the task
     * @type {string}
     * @memberof Task
     */
    'status': TaskStatusEnum;
    /**
     * Parent task id is the parent task that created this task
     * @type {string}
     * @memberof Task
     */
    'parentTaskId'?: string;
    /**
     * Conversation id related to this task
     * @type {string}
     * @memberof Task
     */
    'conversationId'?: string;
    /**
     * Specific user related to this task
     * @type {string}
     * @memberof Task
     */
    'userId'?: string;
    /**
     * The timeout date where the task should be failed in the ISO 8601 format
     * @type {string}
     * @memberof Task
     */
    'timeoutAt': string;
    /**
     * Creation date of the task in ISO 8601 format
     * @type {string}
     * @memberof Task
     */
    'createdAt': string;
    /**
     * Updating date of the task in ISO 8601 format
     * @type {string}
     * @memberof Task
     */
    'updatedAt': string;
    /**
     * If the task fails this is the reason behind it
     * @type {string}
     * @memberof Task
     */
    'failureReason'?: string;
    /**
     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Task](#schema_task). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof Task
     */
    'tags': {
        [key: string]: string;
    };
}
export declare const TaskStatusEnum: {
    readonly Pending: "pending";
    readonly InProgress: "in_progress";
    readonly Failed: "failed";
    readonly Completed: "completed";
    readonly Blocked: "blocked";
    readonly Paused: "paused";
    readonly Timeout: "timeout";
    readonly Cancelled: "cancelled";
};
export type TaskStatusEnum = typeof TaskStatusEnum[keyof typeof TaskStatusEnum];
/**
 *
 * @export
 * @interface TransferBotBody
 */
export interface TransferBotBody {
    /**
     * The ID of the workspace you want to transfer the bot to.
     * @type {string}
     * @memberof TransferBotBody
     */
    'targetWorkspaceId': string;
}
/**
 *
 * @export
 * @interface UpdateAccountBody
 */
export interface UpdateAccountBody {
    /**
     *
     * @type {string}
     * @memberof UpdateAccountBody
     */
    'displayName'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateAccountBody
     */
    'profilePicture'?: string;
}
/**
 *
 * @export
 * @interface UpdateAccountResponse
 */
export interface UpdateAccountResponse {
    /**
     *
     * @type {GetAccountResponseAccount}
     * @memberof UpdateAccountResponse
     */
    'account': GetAccountResponseAccount;
}
/**
 *
 * @export
 * @interface UpdateBotBody
 */
export interface UpdateBotBody {
    /**
     * URL of the [Bot](#schema_bot); Only available for dev bots
     * @type {string}
     * @memberof UpdateBotBody
     */
    'url'?: string;
    /**
     * Type of the [Bot](#schema_bot) authentication (`iam`)
     * @type {string}
     * @memberof UpdateBotBody
     */
    'authentication'?: UpdateBotBodyAuthenticationEnum;
    /**
     *
     * @type {CreateBotBodyConfiguration}
     * @memberof UpdateBotBody
     */
    'configuration'?: CreateBotBodyConfiguration;
    /**
     *
     * @type {boolean}
     * @memberof UpdateBotBody
     */
    'blocked'?: boolean;
    /**
     * Indicates if the [Bot](#schema_bot) should be in always alive mode
     * @type {boolean}
     * @memberof UpdateBotBody
     */
    'alwaysAlive'?: boolean;
    /**
     *
     * @type {UpdateBotBodyUser}
     * @memberof UpdateBotBody
     */
    'user'?: UpdateBotBodyUser;
    /**
     *
     * @type {UpdateBotBodyUser}
     * @memberof UpdateBotBody
     */
    'message'?: UpdateBotBodyUser;
    /**
     *
     * @type {UpdateBotBodyUser}
     * @memberof UpdateBotBody
     */
    'conversation'?: UpdateBotBodyUser;
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyEventsValue | null; }}
     * @memberof UpdateBotBody
     */
    'events'?: {
        [key: string]: UpdateBotBodyEventsValue | null;
    };
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyActionsValue | null; }}
     * @memberof UpdateBotBody
     */
    'actions'?: {
        [key: string]: UpdateBotBodyActionsValue | null;
    };
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyStatesValue | null; }}
     * @memberof UpdateBotBody
     */
    'states'?: {
        [key: string]: UpdateBotBodyStatesValue | null;
    };
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyRecurringEventsValue | null; }}
     * @memberof UpdateBotBody
     */
    'recurringEvents'?: {
        [key: string]: UpdateBotBodyRecurringEventsValue | null;
    };
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyIntegrationsValue | null; }}
     * @memberof UpdateBotBody
     */
    'integrations'?: {
        [key: string]: UpdateBotBodyIntegrationsValue | null;
    };
    /**
     *
     * @type {UpdateBotBodySubscriptions}
     * @memberof UpdateBotBody
     */
    'subscriptions'?: UpdateBotBodySubscriptions;
    /**
     * JavaScript code of the bot
     * @type {string}
     * @memberof UpdateBotBody
     */
    'code'?: string;
    /**
     * Optional name for the bot, if not provided will be auto-generated
     * @type {string}
     * @memberof UpdateBotBody
     */
    'name'?: string;
    /**
     * Media files associated with the [Bot](#schema_bot)
     * @type {Array<CreateBotBodyMediasInner>}
     * @memberof UpdateBotBody
     */
    'medias'?: Array<CreateBotBodyMediasInner>;
}
export declare const UpdateBotBodyAuthenticationEnum: {
    readonly Iam: "iam";
};
export type UpdateBotBodyAuthenticationEnum = typeof UpdateBotBodyAuthenticationEnum[keyof typeof UpdateBotBodyAuthenticationEnum];
/**
 * Action definition
 * @export
 * @interface UpdateBotBodyActionsValue
 */
export interface UpdateBotBodyActionsValue {
    /**
     * Title of the action
     * @type {string}
     * @memberof UpdateBotBodyActionsValue
     */
    'title'?: string;
    /**
     * Description of the action
     * @type {string}
     * @memberof UpdateBotBodyActionsValue
     */
    'description'?: string;
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationActionsValueInput}
     * @memberof UpdateBotBodyActionsValue
     */
    'input': GetPublicIntegrationByIdResponseIntegrationActionsValueInput;
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationActionsValueInput}
     * @memberof UpdateBotBodyActionsValue
     */
    'output': GetPublicIntegrationByIdResponseIntegrationActionsValueInput;
}
/**
 * Event Definition
 * @export
 * @interface UpdateBotBodyEventsValue
 */
export interface UpdateBotBodyEventsValue {
    /**
     * Title of the event
     * @type {string}
     * @memberof UpdateBotBodyEventsValue
     */
    'title'?: string;
    /**
     * Description of the event
     * @type {string}
     * @memberof UpdateBotBodyEventsValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof UpdateBotBodyEventsValue
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface UpdateBotBodyIntegrationsValue
 */
export interface UpdateBotBodyIntegrationsValue {
    /**
     *
     * @type {boolean}
     * @memberof UpdateBotBodyIntegrationsValue
     */
    'enabled'?: boolean;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof UpdateBotBodyIntegrationsValue
     */
    'configuration'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface UpdateBotBodyRecurringEventsValue
 */
export interface UpdateBotBodyRecurringEventsValue {
    /**
     *
     * @type {CreateBotBodyRecurringEventsValueSchedule}
     * @memberof UpdateBotBodyRecurringEventsValue
     */
    'schedule': CreateBotBodyRecurringEventsValueSchedule;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof UpdateBotBodyRecurringEventsValue
     */
    'type': string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof UpdateBotBodyRecurringEventsValue
     */
    'payload': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface UpdateBotBodyStatesValue
 */
export interface UpdateBotBodyStatesValue {
    /**
     * Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)
     * @type {string}
     * @memberof UpdateBotBodyStatesValue
     */
    'type': UpdateBotBodyStatesValueTypeEnum;
    /**
     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.
     * @type {{ [key: string]: any; }}
     * @memberof UpdateBotBodyStatesValue
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\'t expire.
     * @type {number}
     * @memberof UpdateBotBodyStatesValue
     */
    'expiry'?: number;
}
export declare const UpdateBotBodyStatesValueTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
    readonly Task: "task";
};
export type UpdateBotBodyStatesValueTypeEnum = typeof UpdateBotBodyStatesValueTypeEnum[keyof typeof UpdateBotBodyStatesValueTypeEnum];
/**
 *
 * @export
 * @interface UpdateBotBodySubscriptions
 */
export interface UpdateBotBodySubscriptions {
    /**
     *
     * @type {{ [key: string]: { [key: string]: any; } | null; }}
     * @memberof UpdateBotBodySubscriptions
     */
    'events': {
        [key: string]: {
            [key: string]: any;
        } | null;
    } | null;
}
/**
 *
 * @export
 * @interface UpdateBotBodyUser
 */
export interface UpdateBotBodyUser {
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}
     * @memberof UpdateBotBodyUser
     */
    'tags'?: {
        [key: string]: UpdateBotBodyUserTagsValue | null;
    };
}
/**
 * Definition of a tag that can be provided on the object
 * @export
 * @interface UpdateBotBodyUserTagsValue
 */
export interface UpdateBotBodyUserTagsValue {
    /**
     * Title of the tag
     * @type {string}
     * @memberof UpdateBotBodyUserTagsValue
     */
    'title'?: string;
    /**
     * Description of the tag
     * @type {string}
     * @memberof UpdateBotBodyUserTagsValue
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface UpdateBotResponse
 */
export interface UpdateBotResponse {
    /**
     *
     * @type {Bot}
     * @memberof UpdateBotResponse
     */
    'bot': Bot;
}
/**
 *
 * @export
 * @interface UpdateConversationBody
 */
export interface UpdateConversationBody {
    /**
     *
     * @type {string}
     * @memberof UpdateConversationBody
     */
    'currentTaskId'?: string;
    /**
     * Tags for the [Conversation](#schema_conversation)
     * @type {{ [key: string]: string; }}
     * @memberof UpdateConversationBody
     */
    'tags'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface UpdateConversationResponse
 */
export interface UpdateConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof UpdateConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface UpdateFileMetadataBody
 */
export interface UpdateFileMetadataBody {
    /**
     * The tags to update as an object of key/value pairs. A tag key can be set to a null value to delete it.
     * @type {{ [key: string]: string; }}
     * @memberof UpdateFileMetadataBody
     */
    'tags': {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface UpdateFileMetadataResponse
 */
export interface UpdateFileMetadataResponse {
    /**
     * The updated tags of the file.
     * @type {{ [key: string]: string; }}
     * @memberof UpdateFileMetadataResponse
     */
    'tags': {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface UpdateIntegrationBody
 */
export interface UpdateIntegrationBody {
    /**
     *
     * @type {UpdateIntegrationBodyConfiguration}
     * @memberof UpdateIntegrationBody
     */
    'configuration'?: UpdateIntegrationBodyConfiguration;
    /**
     *
     * @type {{ [key: string]: UpdateIntegrationBodyChannelsValue | null; }}
     * @memberof UpdateIntegrationBody
     */
    'channels'?: {
        [key: string]: UpdateIntegrationBodyChannelsValue | null;
    };
    /**
     *
     * @type {UpdateIntegrationBodyIdentifier}
     * @memberof UpdateIntegrationBody
     */
    'identifier'?: UpdateIntegrationBodyIdentifier;
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyActionsValue | null; }}
     * @memberof UpdateIntegrationBody
     */
    'actions'?: {
        [key: string]: UpdateBotBodyActionsValue | null;
    };
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyEventsValue | null; }}
     * @memberof UpdateIntegrationBody
     */
    'events'?: {
        [key: string]: UpdateBotBodyEventsValue | null;
    };
    /**
     *
     * @type {{ [key: string]: UpdateIntegrationBodyStatesValue | null; }}
     * @memberof UpdateIntegrationBody
     */
    'states'?: {
        [key: string]: UpdateIntegrationBodyStatesValue | null;
    };
    /**
     *
     * @type {UpdateIntegrationBodyUser}
     * @memberof UpdateIntegrationBody
     */
    'user'?: UpdateIntegrationBodyUser;
    /**
     *
     * @type {{ [key: string]: UpdateIntegrationBodyEntitiesValue | null; }}
     * @memberof UpdateIntegrationBody
     */
    'entities'?: {
        [key: string]: UpdateIntegrationBodyEntitiesValue | null;
    };
    /**
     * Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing.
     * @type {{ [key: string]: string | null; }}
     * @memberof UpdateIntegrationBody
     */
    'secrets'?: {
        [key: string]: string | null;
    };
    /**
     * JavaScript code of the integration
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'code'?: string;
    /**
     * Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes.
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'icon'?: string;
    /**
     * Base64 encoded markdown of the integration readme. The readme is specific to each integration versions.
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'readme'?: string;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'title'?: string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'description'?: string;
    /**
     * URL of the integration; Only available for dev integrations
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'url'?: string;
    /**
     * Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version.
     * @type {boolean}
     * @memberof UpdateIntegrationBody
     */
    'public'?: boolean;
}
/**
 *
 * @export
 * @interface UpdateIntegrationBodyChannelsValue
 */
export interface UpdateIntegrationBodyChannelsValue {
    /**
     * Title of the channel
     * @type {string}
     * @memberof UpdateIntegrationBodyChannelsValue
     */
    'title'?: string;
    /**
     * Description of the channel
     * @type {string}
     * @memberof UpdateIntegrationBodyChannelsValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: UpdateIntegrationBodyChannelsValueMessagesValue | null; }}
     * @memberof UpdateIntegrationBodyChannelsValue
     */
    'messages'?: {
        [key: string]: UpdateIntegrationBodyChannelsValueMessagesValue | null;
    };
    /**
     *
     * @type {UpdateIntegrationBodyChannelsValueConversation}
     * @memberof UpdateIntegrationBodyChannelsValue
     */
    'conversation'?: UpdateIntegrationBodyChannelsValueConversation;
    /**
     *
     * @type {UpdateBotBodyUser}
     * @memberof UpdateIntegrationBodyChannelsValue
     */
    'message'?: UpdateBotBodyUser;
}
/**
 *
 * @export
 * @interface UpdateIntegrationBodyChannelsValueConversation
 */
export interface UpdateIntegrationBodyChannelsValueConversation {
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation}
     * @memberof UpdateIntegrationBodyChannelsValueConversation
     */
    'creation'?: GetPublicIntegrationByIdResponseIntegrationChannelsValueConversationCreation;
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}
     * @memberof UpdateIntegrationBodyChannelsValueConversation
     */
    'tags'?: {
        [key: string]: UpdateBotBodyUserTagsValue | null;
    };
}
/**
 * Message definition
 * @export
 * @interface UpdateIntegrationBodyChannelsValueMessagesValue
 */
export interface UpdateIntegrationBodyChannelsValueMessagesValue {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof UpdateIntegrationBodyChannelsValueMessagesValue
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface UpdateIntegrationBodyConfiguration
 */
export interface UpdateIntegrationBodyConfiguration {
    /**
     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.
     * @type {{ [key: string]: any; }}
     * @memberof UpdateIntegrationBodyConfiguration
     */
    'schema'?: {
        [key: string]: any;
    };
    /**
     *
     * @type {UpdateIntegrationBodyConfigurationIdentifier}
     * @memberof UpdateIntegrationBodyConfiguration
     */
    'identifier'?: UpdateIntegrationBodyConfigurationIdentifier;
}
/**
 *
 * @export
 * @interface UpdateIntegrationBodyConfigurationIdentifier
 */
export interface UpdateIntegrationBodyConfigurationIdentifier {
    /**
     * Title describing the task
     * @type {string}
     * @memberof UpdateIntegrationBodyConfigurationIdentifier
     */
    'linkTemplateScript'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof UpdateIntegrationBodyConfigurationIdentifier
     */
    'required'?: boolean;
}
/**
 * Entity definition
 * @export
 * @interface UpdateIntegrationBodyEntitiesValue
 */
export interface UpdateIntegrationBodyEntitiesValue {
    /**
     * Title of the entity
     * @type {string}
     * @memberof UpdateIntegrationBodyEntitiesValue
     */
    'title'?: string;
    /**
     * Description of the entity
     * @type {string}
     * @memberof UpdateIntegrationBodyEntitiesValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof UpdateIntegrationBodyEntitiesValue
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface UpdateIntegrationBodyIdentifier
 */
export interface UpdateIntegrationBodyIdentifier {
    /**
     * Title describing the task
     * @type {string}
     * @memberof UpdateIntegrationBodyIdentifier
     */
    'extractScript'?: string | null;
    /**
     * Title describing the task
     * @type {string}
     * @memberof UpdateIntegrationBodyIdentifier
     */
    'fallbackHandlerScript'?: string | null;
}
/**
 * State definition
 * @export
 * @interface UpdateIntegrationBodyStatesValue
 */
export interface UpdateIntegrationBodyStatesValue {
    /**
     * Type of the [State](#schema_state) (`conversation`, `user` or `integration`)
     * @type {string}
     * @memberof UpdateIntegrationBodyStatesValue
     */
    'type': UpdateIntegrationBodyStatesValueTypeEnum;
    /**
     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.
     * @type {{ [key: string]: any; }}
     * @memberof UpdateIntegrationBodyStatesValue
     */
    'schema': {
        [key: string]: any;
    };
}
export declare const UpdateIntegrationBodyStatesValueTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Integration: "integration";
};
export type UpdateIntegrationBodyStatesValueTypeEnum = typeof UpdateIntegrationBodyStatesValueTypeEnum[keyof typeof UpdateIntegrationBodyStatesValueTypeEnum];
/**
 *
 * @export
 * @interface UpdateIntegrationBodyUser
 */
export interface UpdateIntegrationBodyUser {
    /**
     *
     * @type {GetPublicIntegrationByIdResponseIntegrationUserCreation}
     * @memberof UpdateIntegrationBodyUser
     */
    'creation'?: GetPublicIntegrationByIdResponseIntegrationUserCreation;
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}
     * @memberof UpdateIntegrationBodyUser
     */
    'tags'?: {
        [key: string]: UpdateBotBodyUserTagsValue | null;
    };
}
/**
 *
 * @export
 * @interface UpdateIntegrationResponse
 */
export interface UpdateIntegrationResponse {
    /**
     *
     * @type {Integration}
     * @memberof UpdateIntegrationResponse
     */
    'integration': Integration;
}
/**
 *
 * @export
 * @interface UpdateMessageBody
 */
export interface UpdateMessageBody {
    /**
     * Set of [Tags](#tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](#tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof UpdateMessageBody
     */
    'tags': {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface UpdateMessageResponse
 */
export interface UpdateMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof UpdateMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface UpdateTableBody
 */
export interface UpdateTableBody {
    /**
     * Required. This name is used to identify your table.
     * @type {string}
     * @memberof UpdateTableBody
     */
    'name'?: string;
    /**
     * A table designated as \"frozen\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations.
     * @type {boolean}
     * @memberof UpdateTableBody
     */
    'frozen'?: boolean;
    /**
     * Provide an object or a JSON schema to define the columns of the table. A maximum of 20 keys in the object/schema is allowed.
     * @type {{ [key: string]: any; }}
     * @memberof UpdateTableBody
     */
    'schema'?: {
        [key: string]: any;
    };
    /**
     * Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs.
     * @type {{ [key: string]: string; }}
     * @memberof UpdateTableBody
     */
    'tags'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface UpdateTableResponse
 */
export interface UpdateTableResponse {
    /**
     *
     * @type {Table}
     * @memberof UpdateTableResponse
     */
    'table': Table;
}
/**
 *
 * @export
 * @interface UpdateTableRowsBody
 */
export interface UpdateTableRowsBody {
    /**
     * Rows with updated data, identified by ID.
     * @type {Array<UpdateTableRowsBodyRowsInner>}
     * @memberof UpdateTableRowsBody
     */
    'rows': Array<UpdateTableRowsBodyRowsInner>;
}
/**
 *
 * @export
 * @interface UpdateTableRowsBodyRowsInner
 */
export interface UpdateTableRowsBodyRowsInner {
    [key: string]: any;
    /**
     *
     * @type {number}
     * @memberof UpdateTableRowsBodyRowsInner
     */
    'id': number;
}
/**
 *
 * @export
 * @interface UpdateTableRowsResponse
 */
export interface UpdateTableRowsResponse {
    /**
     *
     * @type {Array<Row>}
     * @memberof UpdateTableRowsResponse
     */
    'rows': Array<Row>;
    /**
     * Alerts for minor issues that don\'t block the operation but suggest possible improvements.
     * @type {Array<string>}
     * @memberof UpdateTableRowsResponse
     */
    'warnings'?: Array<string>;
    /**
     * Critical issues in specific elements that prevent their successful processing, allowing partial operation success.
     * @type {Array<string>}
     * @memberof UpdateTableRowsResponse
     */
    'errors'?: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateTaskBody
 */
export interface UpdateTaskBody {
    /**
     * Title describing the task
     * @type {string}
     * @memberof UpdateTaskBody
     */
    'title'?: string;
    /**
     * All the notes related to the execution of the current task
     * @type {string}
     * @memberof UpdateTaskBody
     */
    'description'?: string;
    /**
     * Content related to the task
     * @type {{ [key: string]: any; }}
     * @memberof UpdateTaskBody
     */
    'data'?: {
        [key: string]: any;
    };
    /**
     * The timeout date where the task should be failed in the ISO 8601 format
     * @type {string}
     * @memberof UpdateTaskBody
     */
    'timeoutAt'?: string;
    /**
     * Status of the task
     * @type {string}
     * @memberof UpdateTaskBody
     */
    'status'?: UpdateTaskBodyStatusEnum;
    /**
     * Tags for the [Task](#schema_task)
     * @type {{ [key: string]: string; }}
     * @memberof UpdateTaskBody
     */
    'tags'?: {
        [key: string]: string;
    };
}
export declare const UpdateTaskBodyStatusEnum: {
    readonly Pending: "pending";
    readonly InProgress: "in_progress";
    readonly Failed: "failed";
    readonly Completed: "completed";
    readonly Blocked: "blocked";
    readonly Paused: "paused";
    readonly Timeout: "timeout";
    readonly Cancelled: "cancelled";
};
export type UpdateTaskBodyStatusEnum = typeof UpdateTaskBodyStatusEnum[keyof typeof UpdateTaskBodyStatusEnum];
/**
 *
 * @export
 * @interface UpdateTaskResponse
 */
export interface UpdateTaskResponse {
    /**
     *
     * @type {Task}
     * @memberof UpdateTaskResponse
     */
    'task': Task;
}
/**
 *
 * @export
 * @interface UpdateUserBody
 */
export interface UpdateUserBody {
    /**
     * Tags for the [User](#schema_user)
     * @type {{ [key: string]: string; }}
     * @memberof UpdateUserBody
     */
    'tags'?: {
        [key: string]: string;
    };
    /**
     * Name of the user
     * @type {string}
     * @memberof UpdateUserBody
     */
    'name'?: string;
    /**
     * URI of the user picture
     * @type {string}
     * @memberof UpdateUserBody
     */
    'pictureUrl'?: string | null;
}
/**
 *
 * @export
 * @interface UpdateUserResponse
 */
export interface UpdateUserResponse {
    /**
     *
     * @type {User}
     * @memberof UpdateUserResponse
     */
    'user': User;
}
/**
 *
 * @export
 * @interface UpdateWorkspaceBody
 */
export interface UpdateWorkspaceBody {
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceBody
     */
    'name'?: string;
    /**
     *
     * @type {number}
     * @memberof UpdateWorkspaceBody
     */
    'spendingLimit'?: number;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceBody
     */
    'about'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceBody
     */
    'profilePicture'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceBody
     */
    'contactEmail'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceBody
     */
    'website'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateWorkspaceBody
     */
    'socialAccounts'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof UpdateWorkspaceBody
     */
    'isPublic'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceBody
     */
    'handle'?: string;
}
/**
 *
 * @export
 * @interface UpdateWorkspaceMemberBody
 */
export interface UpdateWorkspaceMemberBody {
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceMemberBody
     */
    'role'?: UpdateWorkspaceMemberBodyRoleEnum;
}
export declare const UpdateWorkspaceMemberBodyRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type UpdateWorkspaceMemberBodyRoleEnum = typeof UpdateWorkspaceMemberBodyRoleEnum[keyof typeof UpdateWorkspaceMemberBodyRoleEnum];
/**
 *
 * @export
 * @interface UpdateWorkspaceMemberResponse
 */
export interface UpdateWorkspaceMemberResponse {
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceMemberResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceMemberResponse
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceMemberResponse
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceMemberResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceMemberResponse
     */
    'role': UpdateWorkspaceMemberResponseRoleEnum;
}
export declare const UpdateWorkspaceMemberResponseRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type UpdateWorkspaceMemberResponseRoleEnum = typeof UpdateWorkspaceMemberResponseRoleEnum[keyof typeof UpdateWorkspaceMemberResponseRoleEnum];
/**
 *
 * @export
 * @interface UpdateWorkspaceResponse
 */
export interface UpdateWorkspaceResponse {
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof UpdateWorkspaceResponse
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'accountType': UpdateWorkspaceResponseAccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'billingVersion': UpdateWorkspaceResponseBillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'plan': UpdateWorkspaceResponsePlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof UpdateWorkspaceResponse
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof UpdateWorkspaceResponse
     */
    'spendingLimit': number;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'about'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'profilePicture'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'contactEmail'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'website'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateWorkspaceResponse
     */
    'socialAccounts'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof UpdateWorkspaceResponse
     */
    'isPublic'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'handle'?: string;
}
export declare const UpdateWorkspaceResponseAccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type UpdateWorkspaceResponseAccountTypeEnum = typeof UpdateWorkspaceResponseAccountTypeEnum[keyof typeof UpdateWorkspaceResponseAccountTypeEnum];
export declare const UpdateWorkspaceResponseBillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type UpdateWorkspaceResponseBillingVersionEnum = typeof UpdateWorkspaceResponseBillingVersionEnum[keyof typeof UpdateWorkspaceResponseBillingVersionEnum];
export declare const UpdateWorkspaceResponsePlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type UpdateWorkspaceResponsePlanEnum = typeof UpdateWorkspaceResponsePlanEnum[keyof typeof UpdateWorkspaceResponsePlanEnum];
/**
 *
 * @export
 * @interface UpdateWorkspaceResponse1
 */
export interface UpdateWorkspaceResponse1 {
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof UpdateWorkspaceResponse1
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'accountType': UpdateWorkspaceResponse1AccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'billingVersion': UpdateWorkspaceResponse1BillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'plan': UpdateWorkspaceResponse1PlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof UpdateWorkspaceResponse1
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof UpdateWorkspaceResponse1
     */
    'spendingLimit': number;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'about'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'profilePicture'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'contactEmail'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'website'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateWorkspaceResponse1
     */
    'socialAccounts'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof UpdateWorkspaceResponse1
     */
    'isPublic'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'handle'?: string;
}
export declare const UpdateWorkspaceResponse1AccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type UpdateWorkspaceResponse1AccountTypeEnum = typeof UpdateWorkspaceResponse1AccountTypeEnum[keyof typeof UpdateWorkspaceResponse1AccountTypeEnum];
export declare const UpdateWorkspaceResponse1BillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type UpdateWorkspaceResponse1BillingVersionEnum = typeof UpdateWorkspaceResponse1BillingVersionEnum[keyof typeof UpdateWorkspaceResponse1BillingVersionEnum];
export declare const UpdateWorkspaceResponse1PlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type UpdateWorkspaceResponse1PlanEnum = typeof UpdateWorkspaceResponse1PlanEnum[keyof typeof UpdateWorkspaceResponse1PlanEnum];
/**
 *
 * @export
 * @interface UpsertTableRowsBody
 */
export interface UpsertTableRowsBody {
    /**
     *
     * @type {Array<UpsertTableRowsBodyRowsInner>}
     * @memberof UpsertTableRowsBody
     */
    'rows': Array<UpsertTableRowsBodyRowsInner>;
    /**
     * Determines if a row is inserted or updated. Defaults to \"id\".
     * @type {string}
     * @memberof UpsertTableRowsBody
     */
    'keyColumn'?: string;
}
/**
 *
 * @export
 * @interface UpsertTableRowsBodyRowsInner
 */
export interface UpsertTableRowsBodyRowsInner {
    [key: string]: any;
    /**
     *
     * @type {number}
     * @memberof UpsertTableRowsBodyRowsInner
     */
    'id'?: number;
}
/**
 *
 * @export
 * @interface UpsertTableRowsResponse
 */
export interface UpsertTableRowsResponse {
    /**
     *
     * @type {Array<Row>}
     * @memberof UpsertTableRowsResponse
     */
    'inserted': Array<Row>;
    /**
     *
     * @type {Array<Row>}
     * @memberof UpsertTableRowsResponse
     */
    'updated': Array<Row>;
    /**
     * Alerts for minor issues that don\'t block the operation but suggest possible improvements.
     * @type {Array<string>}
     * @memberof UpsertTableRowsResponse
     */
    'warnings'?: Array<string>;
    /**
     * Critical issues in specific elements that prevent their successful processing, allowing partial operation success.
     * @type {Array<string>}
     * @memberof UpsertTableRowsResponse
     */
    'errors'?: Array<string>;
}
/**
 *
 * @export
 * @interface Usage
 */
export interface Usage {
    /**
     * Id of the usage that it is linked to. It can either be a workspace id or a bot id
     * @type {string}
     * @memberof Usage
     */
    'id': string;
    /**
     * Period of the quota that it is applied to
     * @type {string}
     * @memberof Usage
     */
    'period': string;
    /**
     * Value of the current usage
     * @type {number}
     * @memberof Usage
     */
    'value': number;
    /**
     * Quota of the current usage
     * @type {number}
     * @memberof Usage
     */
    'quota': number;
    /**
     * Usage type that can be used
     * @type {string}
     * @memberof Usage
     */
    'type': UsageTypeEnum;
}
export declare const UsageTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type UsageTypeEnum = typeof UsageTypeEnum[keyof typeof UsageTypeEnum];
/**
 * The user object represents someone interacting with the bot within a specific integration. The same person interacting with a bot in slack and messenger will be represented with two different users.
 * @export
 * @interface User
 */
export interface User {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * Creation date of the [User](#schema_user) in ISO 8601 format
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     * Updating date of the [User](#schema_user) in ISO 8601 format
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [User](#schema_user). The set of [Tags](/docs/developers/concepts/tags) available on a [User](#schema_user) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof User
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * Name of the [User](#schema_user)
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * Picture URL of the [User](#schema_user)
     * @type {string}
     * @memberof User
     */
    'pictureUrl'?: string;
}
/**
 *
 * @export
 * @interface Workspace
 */
export interface Workspace {
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof Workspace
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'accountType': WorkspaceAccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'billingVersion': WorkspaceBillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'plan': WorkspacePlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof Workspace
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof Workspace
     */
    'spendingLimit': number;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'about'?: string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'profilePicture'?: string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'contactEmail'?: string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'website'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Workspace
     */
    'socialAccounts'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof Workspace
     */
    'isPublic'?: boolean;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'handle'?: string;
}
export declare const WorkspaceAccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type WorkspaceAccountTypeEnum = typeof WorkspaceAccountTypeEnum[keyof typeof WorkspaceAccountTypeEnum];
export declare const WorkspaceBillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type WorkspaceBillingVersionEnum = typeof WorkspaceBillingVersionEnum[keyof typeof WorkspaceBillingVersionEnum];
export declare const WorkspacePlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type WorkspacePlanEnum = typeof WorkspacePlanEnum[keyof typeof WorkspacePlanEnum];
/**
 *
 * @export
 * @interface WorkspaceMember
 */
export interface WorkspaceMember {
    /**
     *
     * @type {string}
     * @memberof WorkspaceMember
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceMember
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceMember
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceMember
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceMember
     */
    'role': WorkspaceMemberRoleEnum;
}
export declare const WorkspaceMemberRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type WorkspaceMemberRoleEnum = typeof WorkspaceMemberRoleEnum[keyof typeof WorkspaceMemberRoleEnum];
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {AddParticipantBody} [addParticipantBody] Participant data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParticipant: (id: string, addParticipantBody?: AddParticipantBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Break down workspace usage by bot
     * @param {string} id Workspace ID
     * @param {BreakDownWorkspaceUsageByBotTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    breakDownWorkspaceUsageByBot: (id: string, type: BreakDownWorkspaceUsageByBotTypeEnum, period?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Call an action
     * @param {CallActionBody} [callActionBody] Action payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callAction: (callActionBody?: CallActionBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Change AI Spend quota
     * @param {ChangeAISpendQuotaBody} [changeAISpendQuotaBody] New AI Spend quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAISpendQuota: (changeAISpendQuotaBody?: ChangeAISpendQuotaBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Change workspace billing plan
     * @param {string} id Workspace ID
     * @param {ChangeWorkspacePlanBody} [changeWorkspacePlanBody] Billing plan to change the workspace to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWorkspacePlan: (id: string, changeWorkspacePlanBody?: ChangeWorkspacePlanBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Charge unpaid invoices of a workspace.
     * @param {string} id Workspace ID
     * @param {ChargeWorkspaceUnpaidInvoicesBody} [chargeWorkspaceUnpaidInvoicesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargeWorkspaceUnpaidInvoices: (id: string, chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if a workspace handle is available
     * @param {CheckHandleAvailabilityBody} [checkHandleAvailabilityBody] Workspace handle availability
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkHandleAvailability: (checkHandleAvailabilityBody?: CheckHandleAvailabilityBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * An integration can call this endpoint to configure itself
     * @param {ConfigureIntegrationBody} [configureIntegrationBody] Configuration of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureIntegration: (configureIntegrationBody?: ConfigureIntegrationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create bot
     * @param {CreateBotBody} [createBotBody] Bot metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBot: (createBotBody?: CreateBotBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.
     * @param {CreateConversationBody} [createConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation: (createConversationBody?: CreateConversationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.
     * @param {CreateEventBody} [createEventBody] Event data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvent: (createEventBody?: CreateEventBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a file.
     * @param {string} [xName] File name
     * @param {string} [xTags] File tags as URL-encoded JSON string representing an object of key-value pairs.
     * @param {string} [xAccessPolicies] File access policies, comma-separated. Add \&quot;public_content\&quot; to allow public access to the file content. Add \&quot;integrations\&quot; to allo read, search and list operations for any integration installed in the bot.
     * @param {boolean} [xIndex] Set to a value of \&quot;true\&quot; to index the file in vector storage (default: false). Only PDFs, Office documents, and text-based files are currently supported. Note that if a file is indexed, it will count towards the Vector Storage quota of the workspace rather than the File Storage quota.
     * @param {string} [contentType] File content type. If omitted, the content type will be inferred from the file extension. If a type cannot be inferred, the default is \&quot;application/octet-stream\&quot;.
     * @param {string} [contentLength] File content length
     * @param {CreateFileBody} [createFileBody] The file to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile: (xName?: string, xTags?: string, xAccessPolicies?: string, xIndex?: boolean, contentType?: string, contentLength?: string, createFileBody?: CreateFileBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create integration
     * @param {CreateIntegrationBody} [createIntegrationBody] Integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegration: (createIntegrationBody?: CreateIntegrationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create an IAK
     * @param {CreateIntegrationApiKeyBody} [createIntegrationApiKeyBody] IAK metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegrationApiKey: (createIntegrationApiKeyBody?: CreateIntegrationApiKeyBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.
     * @param {CreateMessageBody} [createMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage: (createMessageBody?: CreateMessageBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a PAT
     * @param {CreatePersonalAccessTokenBody} [createPersonalAccessTokenBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken: (createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Initiates the creation of a new table based on the provided schema, excluding system-managed fields like IDs and timestamps.
     * @param {CreateTableBody} [createTableBody] Schema defining the structure of the new table
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTable: (createTableBody?: CreateTableBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Inserts one or multiple new rows into the specified table.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {CreateTableRowsBody} [createTableRowsBody] A batch of new rows to insert into the table. Each row must adhere to the table’s schema. A maximum of 1000 rows can be inserted in a single request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTableRows: (table: string, createTableRowsBody?: CreateTableRowsBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Task](#schema_task). When creating a new [Task](#schema_task), the required tags must be provided. See the specific integration for more details.
     * @param {CreateTaskBody} [createTaskBody] Task data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTask: (createTaskBody?: CreateTaskBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.
     * @param {CreateUserBody} [createUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (createUserBody?: CreateUserBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create workspace
     * @param {CreateWorkspaceBody} [createWorkspaceBody] Workspace metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace: (createWorkspaceBody?: CreateWorkspaceBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add a member to the workspace
     * @param {CreateWorkspaceMemberBody} [createWorkspaceMemberBody] Workspace member metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspaceMember: (createWorkspaceMemberBody?: CreateWorkspaceMemberBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete bot
     * @param {string} id Bot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete Bot Issue
     * @param {string} id Bot ID
     * @param {string} issueId Issue ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBotIssue: (id: string, issueId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a file.
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete integration
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegration: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an IAK
     * @param {string} id ID of Integration Api Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegrationApiKey: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {string} id Message id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a PAT
     * @param {string} id ID of Personal Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Permanently deletes a table and all its associated data from the system. Use with caution, as this action cannot be undone.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTable: (table: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Allows selective deletion of rows or complete clearance of a table.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {DeleteTableRowsBody} [deleteTableRowsBody] Identifiers of the rows to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTableRows: (table: string, deleteTableRowsBody?: DeleteTableRowsBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Permanently deletes a [Task](#schema_task). It cannot be undone.
     * @param {string} id Task id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTask: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove a member of a workspace
     * @param {string} id Workspace member ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceMember: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Duplicates the table schema & content
     * @param {string} sourceTableId The table\&#39;s unique identifier
     * @param {DuplicateTableBody} [duplicateTableBody] Parameters for the duplication operation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateTable: (sourceTableId: string, duplicateTableBody?: DuplicateTableBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Enables the search and filtering of rows within a table based on specific criteria. This operation supports complex queries for advanced data manipulation and retrieval.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {FindTableRowsBody} [findTableRowsBody] The search criteria and filters to apply when searching for rows. This includes conditions, search terms, and pagination options.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTableRows: (table: string, findTableRowsBody?: FindTableRowsBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get details of the account authenticating with this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a preference of the account
     * @param {string} key Preference key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountPreference: (key: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * For a user, gets a map of workspace IDs to their highest quota completion rate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllWorkspaceQuotaCompletion: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the audit records of a workspace, sorted from most recent to oldest.
     * @param {string} id Workspace ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditRecords: (id: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get bot details
     * @param {string} id Bot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get bot analytics
     * @param {string} id Bot ID
     * @param {string} startDate Start date/time (inclusive)
     * @param {string} endDate End date/time (exclusive)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotAnalytics: (id: string, startDate: string, endDate: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get bot logs
     * @param {string} id Bot ID
     * @param {string} timeStart Beginning of the time range to get logs from
     * @param {string} timeEnd End of the time range to get logs from
     * @param {string} [nextToken] Token to get the next page of logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotLogs: (id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the webchat code/URL for a bot
     * @param {string} id Bot ID
     * @param {GetBotWebchatTypeEnum} type type of script to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotWebchat: (id: string, type: GetBotWebchatTypeEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Event](#schema_event) object for a valid identifiers.
     * @param {string} id Event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a presigned URL to download the file content.
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileContent: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get file metadata
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMetadata: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get integration
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegration: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get integration
     * @param {string} name Integration Name
     * @param {string} version Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationByName: (name: string, version: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get integration logs
     * @param {string} id Integration ID
     * @param {string} timeStart Beginning of the time range to get logs from
     * @param {string} timeEnd End of the time range to get logs from
     * @param {string} [nextToken] Token to get the next page of logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationLogs: (id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {string} id Id of the Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.
     * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateConversation: (getOrCreateConversationBody?: GetOrCreateConversationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.
     * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateMessage: (getOrCreateMessageBody?: GetOrCreateMessageBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves information about a specific table if it exists; otherwise, creates a new table based on the provided schema.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {GetOrCreateTableBody} [getOrCreateTableBody] Schema defining the structure of the table
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateTable: (table: string, getOrCreateTableBody?: GetOrCreateTableBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.
     * @param {GetOrCreateUserBody} [getOrCreateUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateUser: (getOrCreateUserBody?: GetOrCreateUserBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers. If the state does not exist, it creates a new state.
     * @param {GetOrSetStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {GetOrSetStateBody} [getOrSetStateBody] State content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrSetState: (type: GetOrSetStateTypeEnum, id: string, name: string, getOrSetStateBody?: GetOrSetStateBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipant: (id: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get public integration by name and version
     * @param {string} name Integration Name
     * @param {string} version Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegration: (name: string, version: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get public integration by Id
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegrationById: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get workspace public details
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicWorkspace: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers.
     * @param {GetStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getState: (type: GetStateTypeEnum, id: string, name: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves detailed information about a specific table, identified by its name or unique identifier.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTable: (table: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches a specific row from a table using the row\'s unique identifier.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {number} id Identifier of the row within the table.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTableRow: (table: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Task](#schema_task) object for a valid identifier.
     * @param {string} id Task id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTask: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get upcoming invoice for workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUpcomingInvoice: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get usage
     * @param {GetUsageTypeEnum} type Type of usage
     * @param {string} id ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage: (type: GetUsageTypeEnum, id: string, period?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get workspace details
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspace: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get workspace quota
     * @param {string} id Workspace ID
     * @param {GetWorkspaceQuotaTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceQuota: (id: string, type: GetWorkspaceQuotaTypeEnum, period?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Introspect the API
     * @param {IntrospectBody} [introspectBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    introspect: (introspectBody?: IntrospectBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List activities of a task
     * @param {string} taskId ID of the task to list activities for
     * @param {string} botId ID of the bot to list activities for
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActivities: (taskId: string, botId: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Events for a Bot Issue
     * @param {string} id Bot ID
     * @param {string} issueId Issue ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssueEvents: (id: string, issueId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Bot Issues
     * @param {string} id Bot ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssues: (id: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List bots
     * @param {boolean} [dev] If true, only dev bots are returned. Otherwise, only production bots are returned.
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBots: (dev?: boolean, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of [Conversation](#schema_conversation) you’ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {Array<string>} [participantIds] Filter by participant ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversations: (nextToken?: string, tags?: {
        [key: string]: string;
    } | undefined, participantIds?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of [Event](#schema_event) you’ve previously created. The events are returned in sorted order, with the most recent appearing first.
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [type] Filter by event type
     * @param {string} [conversationId] Filter by conversation id
     * @param {string} [userId] Filter by user id
     * @param {string} [messageId] Filter by message id
     * @param {string} [status] Filter by status. Allowed values: pending, ignored, processed, failed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents: (nextToken?: string, type?: string, conversationId?: string, userId?: string, messageId?: string, status?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List files for bot
     * @param {string} botId Bot ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFiles: (botId: string, nextToken?: string, tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List IAKs (Integration Api Keys) of an integration
     * @param {string} integrationVersionId ID of the integration version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrationApiKeys: (integrationVersionId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List integrations
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [name] Integration Name
     * @param {string} [version] Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {boolean} [dev] If true, only dev integrations are returned. Otherwise, only production integrations are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrations: (nextToken?: string, name?: string, version?: string, dev?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of [Messages](#schema_message) you’ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [conversationId] Conversation id
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMessages: (nextToken?: string, conversationId?: string, tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listParticipants: (id: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List PATs (Personal Access Tokens) of account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List public integration
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [name] Integration Name
     * @param {string} [version] Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicIntegrations: (nextToken?: string, name?: string, version?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of all tables associated with your bot.
     * @param {{ [key: string]: string; }} [tags] Optional filters to narrow down the list by tags associated with tables.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTables: (tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of [Task](#schema_task) you\'ve previously created. The tasks are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {string} [conversationId] Conversation id
     * @param {string} [userId] User id
     * @param {string} [parentTaskId] Parent task id
     * @param {Array<ListTasksStatusEnum>} [status] Status
     * @param {string} [type] Type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTasks: (nextToken?: string, tags?: {
        [key: string]: string;
    } | undefined, conversationId?: string, userId?: string, parentTaskId?: string, status?: Array<ListTasksStatusEnum>, type?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get usage history
     * @param {ListUsageHistoryTypeEnum} type Type of usage
     * @param {string} id ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsageHistory: (type: ListUsageHistoryTypeEnum, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [conversationId] Filter by conversation id. This will return all users that have participated in the conversation.
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: (nextToken?: string, conversationId?: string, tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List invoices billed to workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceInvoices: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the members in a workspace
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceMembers: (nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List workspace quotas
     * @param {string} id Workspace ID
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceQuotas: (id: string, period?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List workspace usages
     * @param {string} id Workspace ID
     * @param {ListWorkspaceUsagesTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceUsages: (id: string, type: ListWorkspaceUsagesTypeEnum, period?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List workspaces the user has access to
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces: (nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {PatchStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {PatchStateBody} [patchStateBody] State content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchState: (type: PatchStateTypeEnum, id: string, name: string, patchStateBody?: PatchStateBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeParticipant: (id: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Renames an existing column within a table to better reflect its content or usage. The operation targets a specific table and requires the current and new column names.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {RenameTableColumnBody} [renameTableColumnBody] Details of the column to be renamed, including its current name and the desired new name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameTableColumn: (table: string, renameTableColumnBody?: RenameTableColumnBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Run a VRL script
     * @param {RunVrlBody} [runVrlBody] VRL script
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runVrl: (runVrlBody?: RunVrlBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Search files
     * @param {string} botId Bot ID
     * @param {string} query Query expressed in natural language to retrieve matching text passages within all indexed files in the bot using semantical search.
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {number} [contextDepth] The number of neighbor passages to prepend and append as surrounding context to the content of each returned passage. Default: 0, Maximum: 10
     * @param {number} [limit] The maximum number of passages to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchFiles: (botId: string, query: string, tags?: {
        [key: string]: string;
    } | undefined, contextDepth?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set a preference for the account
     * @param {string} key Preference key
     * @param {SetAccountPreferenceBody} [setAccountPreferenceBody] Preference value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAccountPreference: (key: string, setAccountPreferenceBody?: SetAccountPreferenceBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Overrides the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {SetStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {SetStateBody} [setStateBody] State content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setState: (type: SetStateTypeEnum, id: string, name: string, setStateBody?: SetStateBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.
     * @param {string} id Workspace ID
     * @param {SetWorkspacePaymentMethodBody} [setWorkspacePaymentMethodBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePaymentMethod: (id: string, setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.
     * @param {string} id Bot ID
     * @param {TransferBotBody} [transferBotBody] Bot transfer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferBot: (id: string, transferBotBody?: TransferBotBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update details of the account associated with authenticated user
     * @param {UpdateAccountBody} [updateAccountBody] Account Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount: (updateAccountBody?: UpdateAccountBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update bot
     * @param {string} id Bot ID
     * @param {UpdateBotBody} [updateBotBody] Bot metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBot: (id: string, updateBotBody?: UpdateBotBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {string} id Conversation id
     * @param {UpdateConversationBody} [updateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation: (id: string, updateConversationBody?: UpdateConversationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update file metadata
     * @param {string} id File ID
     * @param {UpdateFileMetadataBody} [updateFileMetadataBody] File metadata to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFileMetadata: (id: string, updateFileMetadataBody?: UpdateFileMetadataBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update integration
     * @param {string} id Integration ID
     * @param {UpdateIntegrationBody} [updateIntegrationBody] Integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIntegration: (id: string, updateIntegrationBody?: UpdateIntegrationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a message
     * @param {string} id Message id
     * @param {UpdateMessageBody} [updateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessage: (id: string, updateMessageBody?: UpdateMessageBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the schema or the name of an existing table.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {UpdateTableBody} [updateTableBody] The updated schema/name of the table.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTable: (table: string, updateTableBody?: UpdateTableBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates specified rows in a table, allowing partial success with detailed feedback on errors.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {UpdateTableRowsBody} [updateTableRowsBody] Data for rows to update, including IDs. Errors affect only specific rows, not the entire batch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTableRows: (table: string, updateTableRowsBody?: UpdateTableRowsBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [Task](#schema_task) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {string} id Task id
     * @param {UpdateTaskBody} [updateTaskBody] Task data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTask: (id: string, updateTaskBody?: UpdateTaskBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {string} id User ID
     * @param {UpdateUserBody} [updateUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (id: string, updateUserBody?: UpdateUserBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update workspace
     * @param {string} id Workspace ID
     * @param {UpdateWorkspaceBody} [updateWorkspaceBody] Workspace metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspace: (id: string, updateWorkspaceBody?: UpdateWorkspaceBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the member of a workspace
     * @param {string} id Workspace member ID
     * @param {UpdateWorkspaceMemberBody} [updateWorkspaceMemberBody] Workspace member metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceMember: (id: string, updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Inserts or updates rows based on a key. If a row exists, it is updated; otherwise, a new row is created.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {UpsertTableRowsBody} [upsertTableRowsBody] Rows for insertion or update, with a key column to determine action. Supports partial successes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsertTableRows: (table: string, upsertTableRowsBody?: UpsertTableRowsBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {AddParticipantBody} [addParticipantBody] Participant data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParticipant(id: string, addParticipantBody?: AddParticipantBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddParticipantResponse>>;
    /**
     * Break down workspace usage by bot
     * @param {string} id Workspace ID
     * @param {BreakDownWorkspaceUsageByBotTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    breakDownWorkspaceUsageByBot(id: string, type: BreakDownWorkspaceUsageByBotTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BreakDownWorkspaceUsageByBotResponse>>;
    /**
     * Call an action
     * @param {CallActionBody} [callActionBody] Action payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callAction(callActionBody?: CallActionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallActionResponse>>;
    /**
     * Change AI Spend quota
     * @param {ChangeAISpendQuotaBody} [changeAISpendQuotaBody] New AI Spend quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAISpendQuota(changeAISpendQuotaBody?: ChangeAISpendQuotaBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Change workspace billing plan
     * @param {string} id Workspace ID
     * @param {ChangeWorkspacePlanBody} [changeWorkspacePlanBody] Billing plan to change the workspace to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWorkspacePlan(id: string, changeWorkspacePlanBody?: ChangeWorkspacePlanBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeWorkspacePlanResponse>>;
    /**
     * Charge unpaid invoices of a workspace.
     * @param {string} id Workspace ID
     * @param {ChargeWorkspaceUnpaidInvoicesBody} [chargeWorkspaceUnpaidInvoicesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargeWorkspaceUnpaidInvoices(id: string, chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeWorkspaceUnpaidInvoicesResponse>>;
    /**
     * Check if a workspace handle is available
     * @param {CheckHandleAvailabilityBody} [checkHandleAvailabilityBody] Workspace handle availability
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkHandleAvailability(checkHandleAvailabilityBody?: CheckHandleAvailabilityBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckHandleAvailabilityResponse>>;
    /**
     * An integration can call this endpoint to configure itself
     * @param {ConfigureIntegrationBody} [configureIntegrationBody] Configuration of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureIntegration(configureIntegrationBody?: ConfigureIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Create bot
     * @param {CreateBotBody} [createBotBody] Bot metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBot(createBotBody?: CreateBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBotResponse>>;
    /**
     * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.
     * @param {CreateConversationBody} [createConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation(createConversationBody?: CreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConversationResponse>>;
    /**
     * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.
     * @param {CreateEventBody} [createEventBody] Event data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvent(createEventBody?: CreateEventBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventResponse>>;
    /**
     * Creates a file.
     * @param {string} [xName] File name
     * @param {string} [xTags] File tags as URL-encoded JSON string representing an object of key-value pairs.
     * @param {string} [xAccessPolicies] File access policies, comma-separated. Add \&quot;public_content\&quot; to allow public access to the file content. Add \&quot;integrations\&quot; to allo read, search and list operations for any integration installed in the bot.
     * @param {boolean} [xIndex] Set to a value of \&quot;true\&quot; to index the file in vector storage (default: false). Only PDFs, Office documents, and text-based files are currently supported. Note that if a file is indexed, it will count towards the Vector Storage quota of the workspace rather than the File Storage quota.
     * @param {string} [contentType] File content type. If omitted, the content type will be inferred from the file extension. If a type cannot be inferred, the default is \&quot;application/octet-stream\&quot;.
     * @param {string} [contentLength] File content length
     * @param {CreateFileBody} [createFileBody] The file to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile(xName?: string, xTags?: string, xAccessPolicies?: string, xIndex?: boolean, contentType?: string, contentLength?: string, createFileBody?: CreateFileBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFileResponse>>;
    /**
     * Create integration
     * @param {CreateIntegrationBody} [createIntegrationBody] Integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegration(createIntegrationBody?: CreateIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIntegrationResponse>>;
    /**
     * Create an IAK
     * @param {CreateIntegrationApiKeyBody} [createIntegrationApiKeyBody] IAK metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegrationApiKey(createIntegrationApiKeyBody?: CreateIntegrationApiKeyBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIntegrationApiKeyResponse>>;
    /**
     * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.
     * @param {CreateMessageBody} [createMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage(createMessageBody?: CreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMessageResponse>>;
    /**
     * Create a PAT
     * @param {CreatePersonalAccessTokenBody} [createPersonalAccessTokenBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken(createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePersonalAccessTokenResponse>>;
    /**
     * Initiates the creation of a new table based on the provided schema, excluding system-managed fields like IDs and timestamps.
     * @param {CreateTableBody} [createTableBody] Schema defining the structure of the new table
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTable(createTableBody?: CreateTableBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTableResponse>>;
    /**
     * Inserts one or multiple new rows into the specified table.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {CreateTableRowsBody} [createTableRowsBody] A batch of new rows to insert into the table. Each row must adhere to the table’s schema. A maximum of 1000 rows can be inserted in a single request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTableRows(table: string, createTableRowsBody?: CreateTableRowsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTableRowsResponse>>;
    /**
     * Creates a new [Task](#schema_task). When creating a new [Task](#schema_task), the required tags must be provided. See the specific integration for more details.
     * @param {CreateTaskBody} [createTaskBody] Task data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTask(createTaskBody?: CreateTaskBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTaskResponse>>;
    /**
     * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.
     * @param {CreateUserBody} [createUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(createUserBody?: CreateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponse>>;
    /**
     * Create workspace
     * @param {CreateWorkspaceBody} [createWorkspaceBody] Workspace metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace(createWorkspaceBody?: CreateWorkspaceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkspaceResponse>>;
    /**
     * Add a member to the workspace
     * @param {CreateWorkspaceMemberBody} [createWorkspaceMemberBody] Workspace member metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspaceMember(createWorkspaceMemberBody?: CreateWorkspaceMemberBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkspaceMemberResponse>>;
    /**
     * Delete bot
     * @param {string} id Bot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Delete Bot Issue
     * @param {string} id Bot ID
     * @param {string} issueId Issue ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBotIssue(id: string, issueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Deletes a file.
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Delete integration
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Delete an IAK
     * @param {string} id ID of Integration Api Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegrationApiKey(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {string} id Message id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Delete a PAT
     * @param {string} id ID of Personal Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Permanently deletes a table and all its associated data from the system. Use with caution, as this action cannot be undone.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTable(table: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Allows selective deletion of rows or complete clearance of a table.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {DeleteTableRowsBody} [deleteTableRowsBody] Identifiers of the rows to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTableRows(table: string, deleteTableRowsBody?: DeleteTableRowsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteTableRowsResponse>>;
    /**
     * Permanently deletes a [Task](#schema_task). It cannot be undone.
     * @param {string} id Task id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTask(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Delete workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Remove a member of a workspace
     * @param {string} id Workspace member ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceMember(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Duplicates the table schema & content
     * @param {string} sourceTableId The table\&#39;s unique identifier
     * @param {DuplicateTableBody} [duplicateTableBody] Parameters for the duplication operation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateTable(sourceTableId: string, duplicateTableBody?: DuplicateTableBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DuplicateTableResponse>>;
    /**
     * Enables the search and filtering of rows within a table based on specific criteria. This operation supports complex queries for advanced data manipulation and retrieval.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {FindTableRowsBody} [findTableRowsBody] The search criteria and filters to apply when searching for rows. This includes conditions, search terms, and pagination options.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTableRows(table: string, findTableRowsBody?: FindTableRowsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTableRowsResponse>>;
    /**
     * Get details of the account authenticating with this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountResponse>>;
    /**
     * Get a preference of the account
     * @param {string} key Preference key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountPreference(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountPreferenceResponse>>;
    /**
     * For a user, gets a map of workspace IDs to their highest quota completion rate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllWorkspaceQuotaCompletion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: GetAllWorkspaceQuotaCompletionResponse;
    }>>;
    /**
     * Get the audit records of a workspace, sorted from most recent to oldest.
     * @param {string} id Workspace ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditRecords(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAuditRecordsResponse>>;
    /**
     * Get bot details
     * @param {string} id Bot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotResponse>>;
    /**
     * Get bot analytics
     * @param {string} id Bot ID
     * @param {string} startDate Start date/time (inclusive)
     * @param {string} endDate End date/time (exclusive)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotAnalytics(id: string, startDate: string, endDate: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotAnalyticsResponse>>;
    /**
     * Get bot logs
     * @param {string} id Bot ID
     * @param {string} timeStart Beginning of the time range to get logs from
     * @param {string} timeEnd End of the time range to get logs from
     * @param {string} [nextToken] Token to get the next page of logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotLogs(id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotLogsResponse>>;
    /**
     * Get the webchat code/URL for a bot
     * @param {string} id Bot ID
     * @param {GetBotWebchatTypeEnum} type type of script to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotWebchat(id: string, type: GetBotWebchatTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotWebchatResponse>>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConversationResponse>>;
    /**
     * Retrieves the [Event](#schema_event) object for a valid identifiers.
     * @param {string} id Event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventResponse>>;
    /**
     * Returns a presigned URL to download the file content.
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileContent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileContentResponse>>;
    /**
     * Get file metadata
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMetadata(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileMetadataResponse>>;
    /**
     * Get integration
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationResponse>>;
    /**
     * Get integration
     * @param {string} name Integration Name
     * @param {string} version Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationByName(name: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationByNameResponse>>;
    /**
     * Get integration logs
     * @param {string} id Integration ID
     * @param {string} timeStart Beginning of the time range to get logs from
     * @param {string} timeEnd End of the time range to get logs from
     * @param {string} [nextToken] Token to get the next page of logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationLogs(id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationLogsResponse>>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {string} id Id of the Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMessageResponse>>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.
     * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateConversation(getOrCreateConversationBody?: GetOrCreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateConversationResponse>>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.
     * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateMessage(getOrCreateMessageBody?: GetOrCreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateMessageResponse>>;
    /**
     * Retrieves information about a specific table if it exists; otherwise, creates a new table based on the provided schema.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {GetOrCreateTableBody} [getOrCreateTableBody] Schema defining the structure of the table
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateTable(table: string, getOrCreateTableBody?: GetOrCreateTableBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateTableResponse>>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.
     * @param {GetOrCreateUserBody} [getOrCreateUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateUser(getOrCreateUserBody?: GetOrCreateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateUserResponse>>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers. If the state does not exist, it creates a new state.
     * @param {GetOrSetStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {GetOrSetStateBody} [getOrSetStateBody] State content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrSetState(type: GetOrSetStateTypeEnum, id: string, name: string, getOrSetStateBody?: GetOrSetStateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrSetStateResponse>>;
    /**
     * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipant(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetParticipantResponse>>;
    /**
     * Get public integration by name and version
     * @param {string} name Integration Name
     * @param {string} version Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegration(name: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicIntegrationResponse>>;
    /**
     * Get public integration by Id
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegrationById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicIntegrationByIdResponse>>;
    /**
     * Get workspace public details
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicWorkspace(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicWorkspaceResponse>>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers.
     * @param {GetStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getState(type: GetStateTypeEnum, id: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStateResponse>>;
    /**
     * Retrieves detailed information about a specific table, identified by its name or unique identifier.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTable(table: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTableResponse>>;
    /**
     * Fetches a specific row from a table using the row\'s unique identifier.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {number} id Identifier of the row within the table.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTableRow(table: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTableRowResponse>>;
    /**
     * Retrieves the [Task](#schema_task) object for a valid identifier.
     * @param {string} id Task id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTask(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTaskResponse>>;
    /**
     * Get upcoming invoice for workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUpcomingInvoice(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUpcomingInvoiceResponse>>;
    /**
     * Get usage
     * @param {GetUsageTypeEnum} type Type of usage
     * @param {string} id ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage(type: GetUsageTypeEnum, id: string, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsageResponse>>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>>;
    /**
     * Get workspace details
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspace(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkspaceResponse>>;
    /**
     * Get workspace quota
     * @param {string} id Workspace ID
     * @param {GetWorkspaceQuotaTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceQuota(id: string, type: GetWorkspaceQuotaTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkspaceQuotaResponse>>;
    /**
     * Introspect the API
     * @param {IntrospectBody} [introspectBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    introspect(introspectBody?: IntrospectBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntrospectResponse>>;
    /**
     * List activities of a task
     * @param {string} taskId ID of the task to list activities for
     * @param {string} botId ID of the bot to list activities for
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActivities(taskId: string, botId: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListActivitiesResponse>>;
    /**
     * List Events for a Bot Issue
     * @param {string} id Bot ID
     * @param {string} issueId Issue ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssueEvents(id: string, issueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotIssueEventsResponse>>;
    /**
     * List Bot Issues
     * @param {string} id Bot ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssues(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotIssuesResponse>>;
    /**
     * List bots
     * @param {boolean} [dev] If true, only dev bots are returned. Otherwise, only production bots are returned.
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBots(dev?: boolean, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotsResponse>>;
    /**
     * Retrieves a list of [Conversation](#schema_conversation) you’ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {Array<string>} [participantIds] Filter by participant ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversations(nextToken?: string, tags?: {
        [key: string]: string;
    } | undefined, participantIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListConversationsResponse>>;
    /**
     * Retrieves a list of [Event](#schema_event) you’ve previously created. The events are returned in sorted order, with the most recent appearing first.
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [type] Filter by event type
     * @param {string} [conversationId] Filter by conversation id
     * @param {string} [userId] Filter by user id
     * @param {string} [messageId] Filter by message id
     * @param {string} [status] Filter by status. Allowed values: pending, ignored, processed, failed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents(nextToken?: string, type?: string, conversationId?: string, userId?: string, messageId?: string, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEventsResponse>>;
    /**
     * List files for bot
     * @param {string} botId Bot ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFiles(botId: string, nextToken?: string, tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFilesResponse>>;
    /**
     * List IAKs (Integration Api Keys) of an integration
     * @param {string} integrationVersionId ID of the integration version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrationApiKeys(integrationVersionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIntegrationApiKeysResponse>>;
    /**
     * List integrations
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [name] Integration Name
     * @param {string} [version] Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {boolean} [dev] If true, only dev integrations are returned. Otherwise, only production integrations are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrations(nextToken?: string, name?: string, version?: string, dev?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIntegrationsResponse>>;
    /**
     * Retrieves a list of [Messages](#schema_message) you’ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [conversationId] Conversation id
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMessages(nextToken?: string, conversationId?: string, tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMessagesResponse>>;
    /**
     * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listParticipants(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListParticipantsResponse>>;
    /**
     * List PATs (Personal Access Tokens) of account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPersonalAccessTokensResponse>>;
    /**
     * List public integration
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [name] Integration Name
     * @param {string} [version] Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicIntegrations(nextToken?: string, name?: string, version?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPublicIntegrationsResponse>>;
    /**
     * Retrieves a list of all tables associated with your bot.
     * @param {{ [key: string]: string; }} [tags] Optional filters to narrow down the list by tags associated with tables.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTables(tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTablesResponse>>;
    /**
     * Retrieves a list of [Task](#schema_task) you\'ve previously created. The tasks are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {string} [conversationId] Conversation id
     * @param {string} [userId] User id
     * @param {string} [parentTaskId] Parent task id
     * @param {Array<ListTasksStatusEnum>} [status] Status
     * @param {string} [type] Type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTasks(nextToken?: string, tags?: {
        [key: string]: string;
    } | undefined, conversationId?: string, userId?: string, parentTaskId?: string, status?: Array<ListTasksStatusEnum>, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTasksResponse>>;
    /**
     * Get usage history
     * @param {ListUsageHistoryTypeEnum} type Type of usage
     * @param {string} id ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsageHistory(type: ListUsageHistoryTypeEnum, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsageHistoryResponse>>;
    /**
     * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [conversationId] Filter by conversation id. This will return all users that have participated in the conversation.
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(nextToken?: string, conversationId?: string, tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsersResponse>>;
    /**
     * List invoices billed to workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceInvoices(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceInvoicesResponse>>;
    /**
     * Lists all the members in a workspace
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceMembers(nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceMembersResponse>>;
    /**
     * List workspace quotas
     * @param {string} id Workspace ID
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceQuotas(id: string, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceQuotasResponse>>;
    /**
     * List workspace usages
     * @param {string} id Workspace ID
     * @param {ListWorkspaceUsagesTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceUsages(id: string, type: ListWorkspaceUsagesTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceUsagesResponse>>;
    /**
     * List workspaces the user has access to
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces(nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspacesResponse>>;
    /**
     * Updates the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {PatchStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {PatchStateBody} [patchStateBody] State content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchState(type: PatchStateTypeEnum, id: string, name: string, patchStateBody?: PatchStateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchStateResponse>>;
    /**
     * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeParticipant(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Renames an existing column within a table to better reflect its content or usage. The operation targets a specific table and requires the current and new column names.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {RenameTableColumnBody} [renameTableColumnBody] Details of the column to be renamed, including its current name and the desired new name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameTableColumn(table: string, renameTableColumnBody?: RenameTableColumnBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RenameTableColumnResponse>>;
    /**
     * Run a VRL script
     * @param {RunVrlBody} [runVrlBody] VRL script
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runVrl(runVrlBody?: RunVrlBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunVrlResponse>>;
    /**
     * Search files
     * @param {string} botId Bot ID
     * @param {string} query Query expressed in natural language to retrieve matching text passages within all indexed files in the bot using semantical search.
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {number} [contextDepth] The number of neighbor passages to prepend and append as surrounding context to the content of each returned passage. Default: 0, Maximum: 10
     * @param {number} [limit] The maximum number of passages to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchFiles(botId: string, query: string, tags?: {
        [key: string]: string;
    } | undefined, contextDepth?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFilesResponse>>;
    /**
     * Set a preference for the account
     * @param {string} key Preference key
     * @param {SetAccountPreferenceBody} [setAccountPreferenceBody] Preference value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAccountPreference(key: string, setAccountPreferenceBody?: SetAccountPreferenceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Overrides the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {SetStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {SetStateBody} [setStateBody] State content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setState(type: SetStateTypeEnum, id: string, name: string, setStateBody?: SetStateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetStateResponse>>;
    /**
     * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.
     * @param {string} id Workspace ID
     * @param {SetWorkspacePaymentMethodBody} [setWorkspacePaymentMethodBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePaymentMethod(id: string, setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWorkspacePaymentMethodResponse>>;
    /**
     * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.
     * @param {string} id Bot ID
     * @param {TransferBotBody} [transferBotBody] Bot transfer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferBot(id: string, transferBotBody?: TransferBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Update details of the account associated with authenticated user
     * @param {UpdateAccountBody} [updateAccountBody] Account Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount(updateAccountBody?: UpdateAccountBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccountResponse>>;
    /**
     * Update bot
     * @param {string} id Bot ID
     * @param {UpdateBotBody} [updateBotBody] Bot metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBot(id: string, updateBotBody?: UpdateBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBotResponse>>;
    /**
     * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {string} id Conversation id
     * @param {UpdateConversationBody} [updateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation(id: string, updateConversationBody?: UpdateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateConversationResponse>>;
    /**
     * Update file metadata
     * @param {string} id File ID
     * @param {UpdateFileMetadataBody} [updateFileMetadataBody] File metadata to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFileMetadata(id: string, updateFileMetadataBody?: UpdateFileMetadataBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateFileMetadataResponse>>;
    /**
     * Update integration
     * @param {string} id Integration ID
     * @param {UpdateIntegrationBody} [updateIntegrationBody] Integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIntegration(id: string, updateIntegrationBody?: UpdateIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateIntegrationResponse>>;
    /**
     * Update a message
     * @param {string} id Message id
     * @param {UpdateMessageBody} [updateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessage(id: string, updateMessageBody?: UpdateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMessageResponse>>;
    /**
     * Updates the schema or the name of an existing table.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {UpdateTableBody} [updateTableBody] The updated schema/name of the table.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTable(table: string, updateTableBody?: UpdateTableBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateTableResponse>>;
    /**
     * Updates specified rows in a table, allowing partial success with detailed feedback on errors.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {UpdateTableRowsBody} [updateTableRowsBody] Data for rows to update, including IDs. Errors affect only specific rows, not the entire batch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTableRows(table: string, updateTableRowsBody?: UpdateTableRowsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateTableRowsResponse>>;
    /**
     * Update a [Task](#schema_task) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {string} id Task id
     * @param {UpdateTaskBody} [updateTaskBody] Task data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTask(id: string, updateTaskBody?: UpdateTaskBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateTaskResponse>>;
    /**
     * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {string} id User ID
     * @param {UpdateUserBody} [updateUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(id: string, updateUserBody?: UpdateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>>;
    /**
     * Update workspace
     * @param {string} id Workspace ID
     * @param {UpdateWorkspaceBody} [updateWorkspaceBody] Workspace metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspace(id: string, updateWorkspaceBody?: UpdateWorkspaceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkspaceResponse1>>;
    /**
     * Update the member of a workspace
     * @param {string} id Workspace member ID
     * @param {UpdateWorkspaceMemberBody} [updateWorkspaceMemberBody] Workspace member metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceMember(id: string, updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkspaceMemberResponse>>;
    /**
     * Inserts or updates rows based on a key. If a row exists, it is updated; otherwise, a new row is created.
     * @param {string} table The table\&#39;s name or unique identifier for targeting specific table operations.
     * @param {UpsertTableRowsBody} [upsertTableRowsBody] Rows for insertion or update, with a key column to determine action. Supports partial successes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsertTableRows(table: string, upsertTableRowsBody?: UpsertTableRowsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpsertTableRowsResponse>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).
     * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<AddParticipantResponse>;
    /**
     * Break down workspace usage by bot
     * @param {DefaultApiBreakDownWorkspaceUsageByBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    breakDownWorkspaceUsageByBot(requestParameters: DefaultApiBreakDownWorkspaceUsageByBotRequest, options?: AxiosRequestConfig): AxiosPromise<BreakDownWorkspaceUsageByBotResponse>;
    /**
     * Call an action
     * @param {DefaultApiCallActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callAction(requestParameters?: DefaultApiCallActionRequest, options?: AxiosRequestConfig): AxiosPromise<CallActionResponse>;
    /**
     * Change AI Spend quota
     * @param {DefaultApiChangeAISpendQuotaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAISpendQuota(requestParameters?: DefaultApiChangeAISpendQuotaRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Change workspace billing plan
     * @param {DefaultApiChangeWorkspacePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWorkspacePlan(requestParameters: DefaultApiChangeWorkspacePlanRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeWorkspacePlanResponse>;
    /**
     * Charge unpaid invoices of a workspace.
     * @param {DefaultApiChargeWorkspaceUnpaidInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargeWorkspaceUnpaidInvoices(requestParameters: DefaultApiChargeWorkspaceUnpaidInvoicesRequest, options?: AxiosRequestConfig): AxiosPromise<ChargeWorkspaceUnpaidInvoicesResponse>;
    /**
     * Check if a workspace handle is available
     * @param {DefaultApiCheckHandleAvailabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkHandleAvailability(requestParameters?: DefaultApiCheckHandleAvailabilityRequest, options?: AxiosRequestConfig): AxiosPromise<CheckHandleAvailabilityResponse>;
    /**
     * An integration can call this endpoint to configure itself
     * @param {DefaultApiConfigureIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureIntegration(requestParameters?: DefaultApiConfigureIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Create bot
     * @param {DefaultApiCreateBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBot(requestParameters?: DefaultApiCreateBotRequest, options?: AxiosRequestConfig): AxiosPromise<CreateBotResponse>;
    /**
     * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation(requestParameters?: DefaultApiCreateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<CreateConversationResponse>;
    /**
     * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvent(requestParameters?: DefaultApiCreateEventRequest, options?: AxiosRequestConfig): AxiosPromise<CreateEventResponse>;
    /**
     * Creates a file.
     * @param {DefaultApiCreateFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile(requestParameters?: DefaultApiCreateFileRequest, options?: AxiosRequestConfig): AxiosPromise<CreateFileResponse>;
    /**
     * Create integration
     * @param {DefaultApiCreateIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegration(requestParameters?: DefaultApiCreateIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<CreateIntegrationResponse>;
    /**
     * Create an IAK
     * @param {DefaultApiCreateIntegrationApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegrationApiKey(requestParameters?: DefaultApiCreateIntegrationApiKeyRequest, options?: AxiosRequestConfig): AxiosPromise<CreateIntegrationApiKeyResponse>;
    /**
     * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage(requestParameters?: DefaultApiCreateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<CreateMessageResponse>;
    /**
     * Create a PAT
     * @param {DefaultApiCreatePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken(requestParameters?: DefaultApiCreatePersonalAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<CreatePersonalAccessTokenResponse>;
    /**
     * Initiates the creation of a new table based on the provided schema, excluding system-managed fields like IDs and timestamps.
     * @param {DefaultApiCreateTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTable(requestParameters?: DefaultApiCreateTableRequest, options?: AxiosRequestConfig): AxiosPromise<CreateTableResponse>;
    /**
     * Inserts one or multiple new rows into the specified table.
     * @param {DefaultApiCreateTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTableRows(requestParameters: DefaultApiCreateTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<CreateTableRowsResponse>;
    /**
     * Creates a new [Task](#schema_task). When creating a new [Task](#schema_task), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTask(requestParameters?: DefaultApiCreateTaskRequest, options?: AxiosRequestConfig): AxiosPromise<CreateTaskResponse>;
    /**
     * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(requestParameters?: DefaultApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<CreateUserResponse>;
    /**
     * Create workspace
     * @param {DefaultApiCreateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace(requestParameters?: DefaultApiCreateWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<CreateWorkspaceResponse>;
    /**
     * Add a member to the workspace
     * @param {DefaultApiCreateWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspaceMember(requestParameters?: DefaultApiCreateWorkspaceMemberRequest, options?: AxiosRequestConfig): AxiosPromise<CreateWorkspaceMemberResponse>;
    /**
     * Delete bot
     * @param {DefaultApiDeleteBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot(requestParameters: DefaultApiDeleteBotRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Delete Bot Issue
     * @param {DefaultApiDeleteBotIssueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBotIssue(requestParameters: DefaultApiDeleteBotIssueRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Deletes a file.
     * @param {DefaultApiDeleteFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(requestParameters: DefaultApiDeleteFileRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Delete integration
     * @param {DefaultApiDeleteIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegration(requestParameters: DefaultApiDeleteIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Delete an IAK
     * @param {DefaultApiDeleteIntegrationApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegrationApiKey(requestParameters: DefaultApiDeleteIntegrationApiKeyRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Delete a PAT
     * @param {DefaultApiDeletePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken(requestParameters: DefaultApiDeletePersonalAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Permanently deletes a table and all its associated data from the system. Use with caution, as this action cannot be undone.
     * @param {DefaultApiDeleteTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTable(requestParameters: DefaultApiDeleteTableRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Allows selective deletion of rows or complete clearance of a table.
     * @param {DefaultApiDeleteTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTableRows(requestParameters: DefaultApiDeleteTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteTableRowsResponse>;
    /**
     * Permanently deletes a [Task](#schema_task). It cannot be undone.
     * @param {DefaultApiDeleteTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTask(requestParameters: DefaultApiDeleteTaskRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Delete workspace
     * @param {DefaultApiDeleteWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace(requestParameters: DefaultApiDeleteWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Remove a member of a workspace
     * @param {DefaultApiDeleteWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceMember(requestParameters: DefaultApiDeleteWorkspaceMemberRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Duplicates the table schema & content
     * @param {DefaultApiDuplicateTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateTable(requestParameters: DefaultApiDuplicateTableRequest, options?: AxiosRequestConfig): AxiosPromise<DuplicateTableResponse>;
    /**
     * Enables the search and filtering of rows within a table based on specific criteria. This operation supports complex queries for advanced data manipulation and retrieval.
     * @param {DefaultApiFindTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTableRows(requestParameters: DefaultApiFindTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<FindTableRowsResponse>;
    /**
     * Get details of the account authenticating with this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(options?: AxiosRequestConfig): AxiosPromise<GetAccountResponse>;
    /**
     * Get a preference of the account
     * @param {DefaultApiGetAccountPreferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountPreference(requestParameters: DefaultApiGetAccountPreferenceRequest, options?: AxiosRequestConfig): AxiosPromise<GetAccountPreferenceResponse>;
    /**
     * For a user, gets a map of workspace IDs to their highest quota completion rate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllWorkspaceQuotaCompletion(options?: AxiosRequestConfig): AxiosPromise<{
        [key: string]: GetAllWorkspaceQuotaCompletionResponse;
    }>;
    /**
     * Get the audit records of a workspace, sorted from most recent to oldest.
     * @param {DefaultApiGetAuditRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditRecords(requestParameters: DefaultApiGetAuditRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<GetAuditRecordsResponse>;
    /**
     * Get bot details
     * @param {DefaultApiGetBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot(requestParameters: DefaultApiGetBotRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotResponse>;
    /**
     * Get bot analytics
     * @param {DefaultApiGetBotAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotAnalytics(requestParameters: DefaultApiGetBotAnalyticsRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotAnalyticsResponse>;
    /**
     * Get bot logs
     * @param {DefaultApiGetBotLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotLogs(requestParameters: DefaultApiGetBotLogsRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotLogsResponse>;
    /**
     * Get the webchat code/URL for a bot
     * @param {DefaultApiGetBotWebchatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotWebchat(requestParameters: DefaultApiGetBotWebchatRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotWebchatResponse>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig): AxiosPromise<GetConversationResponse>;
    /**
     * Retrieves the [Event](#schema_event) object for a valid identifiers.
     * @param {DefaultApiGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(requestParameters: DefaultApiGetEventRequest, options?: AxiosRequestConfig): AxiosPromise<GetEventResponse>;
    /**
     * Returns a presigned URL to download the file content.
     * @param {DefaultApiGetFileContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileContent(requestParameters: DefaultApiGetFileContentRequest, options?: AxiosRequestConfig): AxiosPromise<GetFileContentResponse>;
    /**
     * Get file metadata
     * @param {DefaultApiGetFileMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMetadata(requestParameters: DefaultApiGetFileMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<GetFileMetadataResponse>;
    /**
     * Get integration
     * @param {DefaultApiGetIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegration(requestParameters: DefaultApiGetIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationResponse>;
    /**
     * Get integration
     * @param {DefaultApiGetIntegrationByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationByName(requestParameters: DefaultApiGetIntegrationByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationByNameResponse>;
    /**
     * Get integration logs
     * @param {DefaultApiGetIntegrationLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationLogs(requestParameters: DefaultApiGetIntegrationLogsRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationLogsResponse>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig): AxiosPromise<GetMessageResponse>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.
     * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateConversation(requestParameters?: DefaultApiGetOrCreateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateConversationResponse>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.
     * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateMessage(requestParameters?: DefaultApiGetOrCreateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateMessageResponse>;
    /**
     * Retrieves information about a specific table if it exists; otherwise, creates a new table based on the provided schema.
     * @param {DefaultApiGetOrCreateTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateTable(requestParameters: DefaultApiGetOrCreateTableRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateTableResponse>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.
     * @param {DefaultApiGetOrCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateUser(requestParameters?: DefaultApiGetOrCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateUserResponse>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers. If the state does not exist, it creates a new state.
     * @param {DefaultApiGetOrSetStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrSetState(requestParameters: DefaultApiGetOrSetStateRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrSetStateResponse>;
    /**
     * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<GetParticipantResponse>;
    /**
     * Get public integration by name and version
     * @param {DefaultApiGetPublicIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegration(requestParameters: DefaultApiGetPublicIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<GetPublicIntegrationResponse>;
    /**
     * Get public integration by Id
     * @param {DefaultApiGetPublicIntegrationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegrationById(requestParameters: DefaultApiGetPublicIntegrationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<GetPublicIntegrationByIdResponse>;
    /**
     * Get workspace public details
     * @param {DefaultApiGetPublicWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicWorkspace(requestParameters: DefaultApiGetPublicWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<GetPublicWorkspaceResponse>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers.
     * @param {DefaultApiGetStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getState(requestParameters: DefaultApiGetStateRequest, options?: AxiosRequestConfig): AxiosPromise<GetStateResponse>;
    /**
     * Retrieves detailed information about a specific table, identified by its name or unique identifier.
     * @param {DefaultApiGetTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTable(requestParameters: DefaultApiGetTableRequest, options?: AxiosRequestConfig): AxiosPromise<GetTableResponse>;
    /**
     * Fetches a specific row from a table using the row\'s unique identifier.
     * @param {DefaultApiGetTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTableRow(requestParameters: DefaultApiGetTableRowRequest, options?: AxiosRequestConfig): AxiosPromise<GetTableRowResponse>;
    /**
     * Retrieves the [Task](#schema_task) object for a valid identifier.
     * @param {DefaultApiGetTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTask(requestParameters: DefaultApiGetTaskRequest, options?: AxiosRequestConfig): AxiosPromise<GetTaskResponse>;
    /**
     * Get upcoming invoice for workspace
     * @param {DefaultApiGetUpcomingInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUpcomingInvoice(requestParameters: DefaultApiGetUpcomingInvoiceRequest, options?: AxiosRequestConfig): AxiosPromise<GetUpcomingInvoiceResponse>;
    /**
     * Get usage
     * @param {DefaultApiGetUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage(requestParameters: DefaultApiGetUsageRequest, options?: AxiosRequestConfig): AxiosPromise<GetUsageResponse>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {DefaultApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<GetUserResponse>;
    /**
     * Get workspace details
     * @param {DefaultApiGetWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspace(requestParameters: DefaultApiGetWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<GetWorkspaceResponse>;
    /**
     * Get workspace quota
     * @param {DefaultApiGetWorkspaceQuotaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceQuota(requestParameters: DefaultApiGetWorkspaceQuotaRequest, options?: AxiosRequestConfig): AxiosPromise<GetWorkspaceQuotaResponse>;
    /**
     * Introspect the API
     * @param {DefaultApiIntrospectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    introspect(requestParameters?: DefaultApiIntrospectRequest, options?: AxiosRequestConfig): AxiosPromise<IntrospectResponse>;
    /**
     * List activities of a task
     * @param {DefaultApiListActivitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActivities(requestParameters: DefaultApiListActivitiesRequest, options?: AxiosRequestConfig): AxiosPromise<ListActivitiesResponse>;
    /**
     * List Events for a Bot Issue
     * @param {DefaultApiListBotIssueEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssueEvents(requestParameters: DefaultApiListBotIssueEventsRequest, options?: AxiosRequestConfig): AxiosPromise<ListBotIssueEventsResponse>;
    /**
     * List Bot Issues
     * @param {DefaultApiListBotIssuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssues(requestParameters: DefaultApiListBotIssuesRequest, options?: AxiosRequestConfig): AxiosPromise<ListBotIssuesResponse>;
    /**
     * List bots
     * @param {DefaultApiListBotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBots(requestParameters?: DefaultApiListBotsRequest, options?: AxiosRequestConfig): AxiosPromise<ListBotsResponse>;
    /**
     * Retrieves a list of [Conversation](#schema_conversation) you’ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversations(requestParameters?: DefaultApiListConversationsRequest, options?: AxiosRequestConfig): AxiosPromise<ListConversationsResponse>;
    /**
     * Retrieves a list of [Event](#schema_event) you’ve previously created. The events are returned in sorted order, with the most recent appearing first.
     * @param {DefaultApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents(requestParameters?: DefaultApiListEventsRequest, options?: AxiosRequestConfig): AxiosPromise<ListEventsResponse>;
    /**
     * List files for bot
     * @param {DefaultApiListFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFiles(requestParameters: DefaultApiListFilesRequest, options?: AxiosRequestConfig): AxiosPromise<ListFilesResponse>;
    /**
     * List IAKs (Integration Api Keys) of an integration
     * @param {DefaultApiListIntegrationApiKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrationApiKeys(requestParameters: DefaultApiListIntegrationApiKeysRequest, options?: AxiosRequestConfig): AxiosPromise<ListIntegrationApiKeysResponse>;
    /**
     * List integrations
     * @param {DefaultApiListIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrations(requestParameters?: DefaultApiListIntegrationsRequest, options?: AxiosRequestConfig): AxiosPromise<ListIntegrationsResponse>;
    /**
     * Retrieves a list of [Messages](#schema_message) you’ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMessages(requestParameters?: DefaultApiListMessagesRequest, options?: AxiosRequestConfig): AxiosPromise<ListMessagesResponse>;
    /**
     * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).
     * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig): AxiosPromise<ListParticipantsResponse>;
    /**
     * List PATs (Personal Access Tokens) of account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens(options?: AxiosRequestConfig): AxiosPromise<ListPersonalAccessTokensResponse>;
    /**
     * List public integration
     * @param {DefaultApiListPublicIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicIntegrations(requestParameters?: DefaultApiListPublicIntegrationsRequest, options?: AxiosRequestConfig): AxiosPromise<ListPublicIntegrationsResponse>;
    /**
     * Retrieves a list of all tables associated with your bot.
     * @param {DefaultApiListTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTables(requestParameters?: DefaultApiListTablesRequest, options?: AxiosRequestConfig): AxiosPromise<ListTablesResponse>;
    /**
     * Retrieves a list of [Task](#schema_task) you\'ve previously created. The tasks are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTasks(requestParameters?: DefaultApiListTasksRequest, options?: AxiosRequestConfig): AxiosPromise<ListTasksResponse>;
    /**
     * Get usage history
     * @param {DefaultApiListUsageHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsageHistory(requestParameters: DefaultApiListUsageHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<ListUsageHistoryResponse>;
    /**
     * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(requestParameters?: DefaultApiListUsersRequest, options?: AxiosRequestConfig): AxiosPromise<ListUsersResponse>;
    /**
     * List invoices billed to workspace
     * @param {DefaultApiListWorkspaceInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceInvoices(requestParameters: DefaultApiListWorkspaceInvoicesRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceInvoicesResponse>;
    /**
     * Lists all the members in a workspace
     * @param {DefaultApiListWorkspaceMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceMembers(requestParameters?: DefaultApiListWorkspaceMembersRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceMembersResponse>;
    /**
     * List workspace quotas
     * @param {DefaultApiListWorkspaceQuotasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceQuotas(requestParameters: DefaultApiListWorkspaceQuotasRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceQuotasResponse>;
    /**
     * List workspace usages
     * @param {DefaultApiListWorkspaceUsagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceUsages(requestParameters: DefaultApiListWorkspaceUsagesRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceUsagesResponse>;
    /**
     * List workspaces the user has access to
     * @param {DefaultApiListWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces(requestParameters?: DefaultApiListWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspacesResponse>;
    /**
     * Updates the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {DefaultApiPatchStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchState(requestParameters: DefaultApiPatchStateRequest, options?: AxiosRequestConfig): AxiosPromise<PatchStateResponse>;
    /**
     * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Renames an existing column within a table to better reflect its content or usage. The operation targets a specific table and requires the current and new column names.
     * @param {DefaultApiRenameTableColumnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameTableColumn(requestParameters: DefaultApiRenameTableColumnRequest, options?: AxiosRequestConfig): AxiosPromise<RenameTableColumnResponse>;
    /**
     * Run a VRL script
     * @param {DefaultApiRunVrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runVrl(requestParameters?: DefaultApiRunVrlRequest, options?: AxiosRequestConfig): AxiosPromise<RunVrlResponse>;
    /**
     * Search files
     * @param {DefaultApiSearchFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchFiles(requestParameters: DefaultApiSearchFilesRequest, options?: AxiosRequestConfig): AxiosPromise<SearchFilesResponse>;
    /**
     * Set a preference for the account
     * @param {DefaultApiSetAccountPreferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAccountPreference(requestParameters: DefaultApiSetAccountPreferenceRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Overrides the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {DefaultApiSetStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setState(requestParameters: DefaultApiSetStateRequest, options?: AxiosRequestConfig): AxiosPromise<SetStateResponse>;
    /**
     * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.
     * @param {DefaultApiSetWorkspacePaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePaymentMethod(requestParameters: DefaultApiSetWorkspacePaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<SetWorkspacePaymentMethodResponse>;
    /**
     * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.
     * @param {DefaultApiTransferBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferBot(requestParameters: DefaultApiTransferBotRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Update details of the account associated with authenticated user
     * @param {DefaultApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount(requestParameters?: DefaultApiUpdateAccountRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateAccountResponse>;
    /**
     * Update bot
     * @param {DefaultApiUpdateBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBot(requestParameters: DefaultApiUpdateBotRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateBotResponse>;
    /**
     * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateConversationResponse>;
    /**
     * Update file metadata
     * @param {DefaultApiUpdateFileMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFileMetadata(requestParameters: DefaultApiUpdateFileMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateFileMetadataResponse>;
    /**
     * Update integration
     * @param {DefaultApiUpdateIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIntegration(requestParameters: DefaultApiUpdateIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateIntegrationResponse>;
    /**
     * Update a message
     * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateMessageResponse>;
    /**
     * Updates the schema or the name of an existing table.
     * @param {DefaultApiUpdateTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTable(requestParameters: DefaultApiUpdateTableRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateTableResponse>;
    /**
     * Updates specified rows in a table, allowing partial success with detailed feedback on errors.
     * @param {DefaultApiUpdateTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTableRows(requestParameters: DefaultApiUpdateTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateTableRowsResponse>;
    /**
     * Update a [Task](#schema_task) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {DefaultApiUpdateTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTask(requestParameters: DefaultApiUpdateTaskRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateTaskResponse>;
    /**
     * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateUserResponse>;
    /**
     * Update workspace
     * @param {DefaultApiUpdateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspace(requestParameters: DefaultApiUpdateWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateWorkspaceResponse1>;
    /**
     * Update the member of a workspace
     * @param {DefaultApiUpdateWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceMember(requestParameters: DefaultApiUpdateWorkspaceMemberRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateWorkspaceMemberResponse>;
    /**
     * Inserts or updates rows based on a key. If a row exists, it is updated; otherwise, a new row is created.
     * @param {DefaultApiUpsertTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsertTableRows(requestParameters: DefaultApiUpsertTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<UpsertTableRowsResponse>;
};
/**
 * Request parameters for addParticipant operation in DefaultApi.
 * @export
 * @interface DefaultApiAddParticipantRequest
 */
export interface DefaultApiAddParticipantRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiAddParticipant
     */
    readonly id: string;
    /**
     * Participant data
     * @type {AddParticipantBody}
     * @memberof DefaultApiAddParticipant
     */
    readonly addParticipantBody?: AddParticipantBody;
}
/**
 * Request parameters for breakDownWorkspaceUsageByBot operation in DefaultApi.
 * @export
 * @interface DefaultApiBreakDownWorkspaceUsageByBotRequest
 */
export interface DefaultApiBreakDownWorkspaceUsageByBotRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiBreakDownWorkspaceUsageByBot
     */
    readonly id: string;
    /**
     * Type of usage
     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}
     * @memberof DefaultApiBreakDownWorkspaceUsageByBot
     */
    readonly type: BreakDownWorkspaceUsageByBotTypeEnum;
    /**
     * Period to get
     * @type {string}
     * @memberof DefaultApiBreakDownWorkspaceUsageByBot
     */
    readonly period?: string;
}
/**
 * Request parameters for callAction operation in DefaultApi.
 * @export
 * @interface DefaultApiCallActionRequest
 */
export interface DefaultApiCallActionRequest {
    /**
     * Action payload
     * @type {CallActionBody}
     * @memberof DefaultApiCallAction
     */
    readonly callActionBody?: CallActionBody;
}
/**
 * Request parameters for changeAISpendQuota operation in DefaultApi.
 * @export
 * @interface DefaultApiChangeAISpendQuotaRequest
 */
export interface DefaultApiChangeAISpendQuotaRequest {
    /**
     * New AI Spend quota
     * @type {ChangeAISpendQuotaBody}
     * @memberof DefaultApiChangeAISpendQuota
     */
    readonly changeAISpendQuotaBody?: ChangeAISpendQuotaBody;
}
/**
 * Request parameters for changeWorkspacePlan operation in DefaultApi.
 * @export
 * @interface DefaultApiChangeWorkspacePlanRequest
 */
export interface DefaultApiChangeWorkspacePlanRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiChangeWorkspacePlan
     */
    readonly id: string;
    /**
     * Billing plan to change the workspace to
     * @type {ChangeWorkspacePlanBody}
     * @memberof DefaultApiChangeWorkspacePlan
     */
    readonly changeWorkspacePlanBody?: ChangeWorkspacePlanBody;
}
/**
 * Request parameters for chargeWorkspaceUnpaidInvoices operation in DefaultApi.
 * @export
 * @interface DefaultApiChargeWorkspaceUnpaidInvoicesRequest
 */
export interface DefaultApiChargeWorkspaceUnpaidInvoicesRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiChargeWorkspaceUnpaidInvoices
     */
    readonly id: string;
    /**
     *
     * @type {ChargeWorkspaceUnpaidInvoicesBody}
     * @memberof DefaultApiChargeWorkspaceUnpaidInvoices
     */
    readonly chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody;
}
/**
 * Request parameters for checkHandleAvailability operation in DefaultApi.
 * @export
 * @interface DefaultApiCheckHandleAvailabilityRequest
 */
export interface DefaultApiCheckHandleAvailabilityRequest {
    /**
     * Workspace handle availability
     * @type {CheckHandleAvailabilityBody}
     * @memberof DefaultApiCheckHandleAvailability
     */
    readonly checkHandleAvailabilityBody?: CheckHandleAvailabilityBody;
}
/**
 * Request parameters for configureIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiConfigureIntegrationRequest
 */
export interface DefaultApiConfigureIntegrationRequest {
    /**
     * Configuration of the integration
     * @type {ConfigureIntegrationBody}
     * @memberof DefaultApiConfigureIntegration
     */
    readonly configureIntegrationBody?: ConfigureIntegrationBody;
}
/**
 * Request parameters for createBot operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateBotRequest
 */
export interface DefaultApiCreateBotRequest {
    /**
     * Bot metadata
     * @type {CreateBotBody}
     * @memberof DefaultApiCreateBot
     */
    readonly createBotBody?: CreateBotBody;
}
/**
 * Request parameters for createConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateConversationRequest
 */
export interface DefaultApiCreateConversationRequest {
    /**
     * Conversation data
     * @type {CreateConversationBody}
     * @memberof DefaultApiCreateConversation
     */
    readonly createConversationBody?: CreateConversationBody;
}
/**
 * Request parameters for createEvent operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateEventRequest
 */
export interface DefaultApiCreateEventRequest {
    /**
     * Event data
     * @type {CreateEventBody}
     * @memberof DefaultApiCreateEvent
     */
    readonly createEventBody?: CreateEventBody;
}
/**
 * Request parameters for createFile operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateFileRequest
 */
export interface DefaultApiCreateFileRequest {
    /**
     * File name
     * @type {string}
     * @memberof DefaultApiCreateFile
     */
    readonly xName?: string;
    /**
     * File tags as URL-encoded JSON string representing an object of key-value pairs.
     * @type {string}
     * @memberof DefaultApiCreateFile
     */
    readonly xTags?: string;
    /**
     * File access policies, comma-separated. Add \&quot;public_content\&quot; to allow public access to the file content. Add \&quot;integrations\&quot; to allo read, search and list operations for any integration installed in the bot.
     * @type {string}
     * @memberof DefaultApiCreateFile
     */
    readonly xAccessPolicies?: string;
    /**
     * Set to a value of \&quot;true\&quot; to index the file in vector storage (default: false). Only PDFs, Office documents, and text-based files are currently supported. Note that if a file is indexed, it will count towards the Vector Storage quota of the workspace rather than the File Storage quota.
     * @type {boolean}
     * @memberof DefaultApiCreateFile
     */
    readonly xIndex?: boolean;
    /**
     * File content type. If omitted, the content type will be inferred from the file extension. If a type cannot be inferred, the default is \&quot;application/octet-stream\&quot;.
     * @type {string}
     * @memberof DefaultApiCreateFile
     */
    readonly contentType?: string;
    /**
     * File content length
     * @type {string}
     * @memberof DefaultApiCreateFile
     */
    readonly contentLength?: string;
    /**
     * The file to upload.
     * @type {CreateFileBody}
     * @memberof DefaultApiCreateFile
     */
    readonly createFileBody?: CreateFileBody;
}
/**
 * Request parameters for createIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateIntegrationRequest
 */
export interface DefaultApiCreateIntegrationRequest {
    /**
     * Integration
     * @type {CreateIntegrationBody}
     * @memberof DefaultApiCreateIntegration
     */
    readonly createIntegrationBody?: CreateIntegrationBody;
}
/**
 * Request parameters for createIntegrationApiKey operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateIntegrationApiKeyRequest
 */
export interface DefaultApiCreateIntegrationApiKeyRequest {
    /**
     * IAK metadata
     * @type {CreateIntegrationApiKeyBody}
     * @memberof DefaultApiCreateIntegrationApiKey
     */
    readonly createIntegrationApiKeyBody?: CreateIntegrationApiKeyBody;
}
/**
 * Request parameters for createMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateMessageRequest
 */
export interface DefaultApiCreateMessageRequest {
    /**
     * Message data
     * @type {CreateMessageBody}
     * @memberof DefaultApiCreateMessage
     */
    readonly createMessageBody?: CreateMessageBody;
}
/**
 * Request parameters for createPersonalAccessToken operation in DefaultApi.
 * @export
 * @interface DefaultApiCreatePersonalAccessTokenRequest
 */
export interface DefaultApiCreatePersonalAccessTokenRequest {
    /**
     *
     * @type {CreatePersonalAccessTokenBody}
     * @memberof DefaultApiCreatePersonalAccessToken
     */
    readonly createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody;
}
/**
 * Request parameters for createTable operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateTableRequest
 */
export interface DefaultApiCreateTableRequest {
    /**
     * Schema defining the structure of the new table
     * @type {CreateTableBody}
     * @memberof DefaultApiCreateTable
     */
    readonly createTableBody?: CreateTableBody;
}
/**
 * Request parameters for createTableRows operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateTableRowsRequest
 */
export interface DefaultApiCreateTableRowsRequest {
    /**
     * The table\&#39;s name or unique identifier for targeting specific table operations.
     * @type {string}
     * @memberof DefaultApiCreateTableRows
     */
    readonly table: string;
    /**
     * A batch of new rows to insert into the table. Each row must adhere to the table’s schema. A maximum of 1000 rows can be inserted in a single request.
     * @type {CreateTableRowsBody}
     * @memberof DefaultApiCreateTableRows
     */
    readonly createTableRowsBody?: CreateTableRowsBody;
}
/**
 * Request parameters for createTask operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateTaskRequest
 */
export interface DefaultApiCreateTaskRequest {
    /**
     * Task data
     * @type {CreateTaskBody}
     * @memberof DefaultApiCreateTask
     */
    readonly createTaskBody?: CreateTaskBody;
}
/**
 * Request parameters for createUser operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateUserRequest
 */
export interface DefaultApiCreateUserRequest {
    /**
     * User data
     * @type {CreateUserBody}
     * @memberof DefaultApiCreateUser
     */
    readonly createUserBody?: CreateUserBody;
}
/**
 * Request parameters for createWorkspace operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateWorkspaceRequest
 */
export interface DefaultApiCreateWorkspaceRequest {
    /**
     * Workspace metadata
     * @type {CreateWorkspaceBody}
     * @memberof DefaultApiCreateWorkspace
     */
    readonly createWorkspaceBody?: CreateWorkspaceBody;
}
/**
 * Request parameters for createWorkspaceMember operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateWorkspaceMemberRequest
 */
export interface DefaultApiCreateWorkspaceMemberRequest {
    /**
     * Workspace member metadata
     * @type {CreateWorkspaceMemberBody}
     * @memberof DefaultApiCreateWorkspaceMember
     */
    readonly createWorkspaceMemberBody?: CreateWorkspaceMemberBody;
}
/**
 * Request parameters for deleteBot operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteBotRequest
 */
export interface DefaultApiDeleteBotRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiDeleteBot
     */
    readonly id: string;
}
/**
 * Request parameters for deleteBotIssue operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteBotIssueRequest
 */
export interface DefaultApiDeleteBotIssueRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiDeleteBotIssue
     */
    readonly id: string;
    /**
     * Issue ID
     * @type {string}
     * @memberof DefaultApiDeleteBotIssue
     */
    readonly issueId: string;
}
/**
 * Request parameters for deleteConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteConversationRequest
 */
export interface DefaultApiDeleteConversationRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiDeleteConversation
     */
    readonly id: string;
}
/**
 * Request parameters for deleteFile operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteFileRequest
 */
export interface DefaultApiDeleteFileRequest {
    /**
     * File ID
     * @type {string}
     * @memberof DefaultApiDeleteFile
     */
    readonly id: string;
}
/**
 * Request parameters for deleteIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteIntegrationRequest
 */
export interface DefaultApiDeleteIntegrationRequest {
    /**
     * Integration ID
     * @type {string}
     * @memberof DefaultApiDeleteIntegration
     */
    readonly id: string;
}
/**
 * Request parameters for deleteIntegrationApiKey operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteIntegrationApiKeyRequest
 */
export interface DefaultApiDeleteIntegrationApiKeyRequest {
    /**
     * ID of Integration Api Key
     * @type {string}
     * @memberof DefaultApiDeleteIntegrationApiKey
     */
    readonly id: string;
}
/**
 * Request parameters for deleteMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteMessageRequest
 */
export interface DefaultApiDeleteMessageRequest {
    /**
     * Message id
     * @type {string}
     * @memberof DefaultApiDeleteMessage
     */
    readonly id: string;
}
/**
 * Request parameters for deletePersonalAccessToken operation in DefaultApi.
 * @export
 * @interface DefaultApiDeletePersonalAccessTokenRequest
 */
export interface DefaultApiDeletePersonalAccessTokenRequest {
    /**
     * ID of Personal Access Token
     * @type {string}
     * @memberof DefaultApiDeletePersonalAccessToken
     */
    readonly id: string;
}
/**
 * Request parameters for deleteTable operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteTableRequest
 */
export interface DefaultApiDeleteTableRequest {
    /**
     * The table\&#39;s name or unique identifier for targeting specific table operations.
     * @type {string}
     * @memberof DefaultApiDeleteTable
     */
    readonly table: string;
}
/**
 * Request parameters for deleteTableRows operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteTableRowsRequest
 */
export interface DefaultApiDeleteTableRowsRequest {
    /**
     * The table\&#39;s name or unique identifier for targeting specific table operations.
     * @type {string}
     * @memberof DefaultApiDeleteTableRows
     */
    readonly table: string;
    /**
     * Identifiers of the rows to be deleted.
     * @type {DeleteTableRowsBody}
     * @memberof DefaultApiDeleteTableRows
     */
    readonly deleteTableRowsBody?: DeleteTableRowsBody;
}
/**
 * Request parameters for deleteTask operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteTaskRequest
 */
export interface DefaultApiDeleteTaskRequest {
    /**
     * Task id
     * @type {string}
     * @memberof DefaultApiDeleteTask
     */
    readonly id: string;
}
/**
 * Request parameters for deleteUser operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteUserRequest
 */
export interface DefaultApiDeleteUserRequest {
    /**
     * User ID
     * @type {string}
     * @memberof DefaultApiDeleteUser
     */
    readonly id: string;
}
/**
 * Request parameters for deleteWorkspace operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteWorkspaceRequest
 */
export interface DefaultApiDeleteWorkspaceRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiDeleteWorkspace
     */
    readonly id: string;
}
/**
 * Request parameters for deleteWorkspaceMember operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteWorkspaceMemberRequest
 */
export interface DefaultApiDeleteWorkspaceMemberRequest {
    /**
     * Workspace member ID
     * @type {string}
     * @memberof DefaultApiDeleteWorkspaceMember
     */
    readonly id: string;
}
/**
 * Request parameters for duplicateTable operation in DefaultApi.
 * @export
 * @interface DefaultApiDuplicateTableRequest
 */
export interface DefaultApiDuplicateTableRequest {
    /**
     * The table\&#39;s unique identifier
     * @type {string}
     * @memberof DefaultApiDuplicateTable
     */
    readonly sourceTableId: string;
    /**
     * Parameters for the duplication operation.
     * @type {DuplicateTableBody}
     * @memberof DefaultApiDuplicateTable
     */
    readonly duplicateTableBody?: DuplicateTableBody;
}
/**
 * Request parameters for findTableRows operation in DefaultApi.
 * @export
 * @interface DefaultApiFindTableRowsRequest
 */
export interface DefaultApiFindTableRowsRequest {
    /**
     * The table\&#39;s name or unique identifier for targeting specific table operations.
     * @type {string}
     * @memberof DefaultApiFindTableRows
     */
    readonly table: string;
    /**
     * The search criteria and filters to apply when searching for rows. This includes conditions, search terms, and pagination options.
     * @type {FindTableRowsBody}
     * @memberof DefaultApiFindTableRows
     */
    readonly findTableRowsBody?: FindTableRowsBody;
}
/**
 * Request parameters for getAccountPreference operation in DefaultApi.
 * @export
 * @interface DefaultApiGetAccountPreferenceRequest
 */
export interface DefaultApiGetAccountPreferenceRequest {
    /**
     * Preference key
     * @type {string}
     * @memberof DefaultApiGetAccountPreference
     */
    readonly key: string;
}
/**
 * Request parameters for getAuditRecords operation in DefaultApi.
 * @export
 * @interface DefaultApiGetAuditRecordsRequest
 */
export interface DefaultApiGetAuditRecordsRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiGetAuditRecords
     */
    readonly id: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiGetAuditRecords
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for getBot operation in DefaultApi.
 * @export
 * @interface DefaultApiGetBotRequest
 */
export interface DefaultApiGetBotRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiGetBot
     */
    readonly id: string;
}
/**
 * Request parameters for getBotAnalytics operation in DefaultApi.
 * @export
 * @interface DefaultApiGetBotAnalyticsRequest
 */
export interface DefaultApiGetBotAnalyticsRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiGetBotAnalytics
     */
    readonly id: string;
    /**
     * Start date/time (inclusive)
     * @type {string}
     * @memberof DefaultApiGetBotAnalytics
     */
    readonly startDate: string;
    /**
     * End date/time (exclusive)
     * @type {string}
     * @memberof DefaultApiGetBotAnalytics
     */
    readonly endDate: string;
}
/**
 * Request parameters for getBotLogs operation in DefaultApi.
 * @export
 * @interface DefaultApiGetBotLogsRequest
 */
export interface DefaultApiGetBotLogsRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiGetBotLogs
     */
    readonly id: string;
    /**
     * Beginning of the time range to get logs from
     * @type {string}
     * @memberof DefaultApiGetBotLogs
     */
    readonly timeStart: string;
    /**
     * End of the time range to get logs from
     * @type {string}
     * @memberof DefaultApiGetBotLogs
     */
    readonly timeEnd: string;
    /**
     * Token to get the next page of logs
     * @type {string}
     * @memberof DefaultApiGetBotLogs
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for getBotWebchat operation in DefaultApi.
 * @export
 * @interface DefaultApiGetBotWebchatRequest
 */
export interface DefaultApiGetBotWebchatRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiGetBotWebchat
     */
    readonly id: string;
    /**
     * type of script to get
     * @type {'preconfigured' | 'configurable' | 'fullscreen' | 'sharableUrl'}
     * @memberof DefaultApiGetBotWebchat
     */
    readonly type: GetBotWebchatTypeEnum;
}
/**
 * Request parameters for getConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiGetConversationRequest
 */
export interface DefaultApiGetConversationRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiGetConversation
     */
    readonly id: string;
}
/**
 * Request parameters for getEvent operation in DefaultApi.
 * @export
 * @interface DefaultApiGetEventRequest
 */
export interface DefaultApiGetEventRequest {
    /**
     * Event id
     * @type {string}
     * @memberof DefaultApiGetEvent
     */
    readonly id: string;
}
/**
 * Request parameters for getFileContent operation in DefaultApi.
 * @export
 * @interface DefaultApiGetFileContentRequest
 */
export interface DefaultApiGetFileContentRequest {
    /**
     * File ID
     * @type {string}
     * @memberof DefaultApiGetFileContent
     */
    readonly id: string;
}
/**
 * Request parameters for getFileMetadata operation in DefaultApi.
 * @export
 * @interface DefaultApiGetFileMetadataRequest
 */
export interface DefaultApiGetFileMetadataRequest {
    /**
     * File ID
     * @type {string}
     * @memberof DefaultApiGetFileMetadata
     */
    readonly id: string;
}
/**
 * Request parameters for getIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiGetIntegrationRequest
 */
export interface DefaultApiGetIntegrationRequest {
    /**
     * Integration ID
     * @type {string}
     * @memberof DefaultApiGetIntegration
     */
    readonly id: string;
}
/**
 * Request parameters for getIntegrationByName operation in DefaultApi.
 * @export
 * @interface DefaultApiGetIntegrationByNameRequest
 */
export interface DefaultApiGetIntegrationByNameRequest {
    /**
     * Integration Name
     * @type {string}
     * @memberof DefaultApiGetIntegrationByName
     */
    readonly name: string;
    /**
     * Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @type {string}
     * @memberof DefaultApiGetIntegrationByName
     */
    readonly version: string;
}
/**
 * Request parameters for getIntegrationLogs operation in DefaultApi.
 * @export
 * @interface DefaultApiGetIntegrationLogsRequest
 */
export interface DefaultApiGetIntegrationLogsRequest {
    /**
     * Integration ID
     * @type {string}
     * @memberof DefaultApiGetIntegrationLogs
     */
    readonly id: string;
    /**
     * Beginning of the time range to get logs from
     * @type {string}
     * @memberof DefaultApiGetIntegrationLogs
     */
    readonly timeStart: string;
    /**
     * End of the time range to get logs from
     * @type {string}
     * @memberof DefaultApiGetIntegrationLogs
     */
    readonly timeEnd: string;
    /**
     * Token to get the next page of logs
     * @type {string}
     * @memberof DefaultApiGetIntegrationLogs
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for getMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiGetMessageRequest
 */
export interface DefaultApiGetMessageRequest {
    /**
     * Id of the Message
     * @type {string}
     * @memberof DefaultApiGetMessage
     */
    readonly id: string;
}
/**
 * Request parameters for getOrCreateConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrCreateConversationRequest
 */
export interface DefaultApiGetOrCreateConversationRequest {
    /**
     * Conversation data
     * @type {GetOrCreateConversationBody}
     * @memberof DefaultApiGetOrCreateConversation
     */
    readonly getOrCreateConversationBody?: GetOrCreateConversationBody;
}
/**
 * Request parameters for getOrCreateMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrCreateMessageRequest
 */
export interface DefaultApiGetOrCreateMessageRequest {
    /**
     * Message data
     * @type {GetOrCreateMessageBody}
     * @memberof DefaultApiGetOrCreateMessage
     */
    readonly getOrCreateMessageBody?: GetOrCreateMessageBody;
}
/**
 * Request parameters for getOrCreateTable operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrCreateTableRequest
 */
export interface DefaultApiGetOrCreateTableRequest {
    /**
     * The table\&#39;s name or unique identifier for targeting specific table operations.
     * @type {string}
     * @memberof DefaultApiGetOrCreateTable
     */
    readonly table: string;
    /**
     * Schema defining the structure of the table
     * @type {GetOrCreateTableBody}
     * @memberof DefaultApiGetOrCreateTable
     */
    readonly getOrCreateTableBody?: GetOrCreateTableBody;
}
/**
 * Request parameters for getOrCreateUser operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrCreateUserRequest
 */
export interface DefaultApiGetOrCreateUserRequest {
    /**
     * User data
     * @type {GetOrCreateUserBody}
     * @memberof DefaultApiGetOrCreateUser
     */
    readonly getOrCreateUserBody?: GetOrCreateUserBody;
}
/**
 * Request parameters for getOrSetState operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrSetStateRequest
 */
export interface DefaultApiGetOrSetStateRequest {
    /**
     * State type
     * @type {'conversation' | 'user' | 'bot' | 'integration' | 'task'}
     * @memberof DefaultApiGetOrSetState
     */
    readonly type: GetOrSetStateTypeEnum;
    /**
     * State id
     * @type {string}
     * @memberof DefaultApiGetOrSetState
     */
    readonly id: string;
    /**
     * State name
     * @type {string}
     * @memberof DefaultApiGetOrSetState
     */
    readonly name: string;
    /**
     * State content
     * @type {GetOrSetStateBody}
     * @memberof DefaultApiGetOrSetState
     */
    readonly getOrSetStateBody?: GetOrSetStateBody;
}
/**
 * Request parameters for getParticipant operation in DefaultApi.
 * @export
 * @interface DefaultApiGetParticipantRequest
 */
export interface DefaultApiGetParticipantRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiGetParticipant
     */
    readonly id: string;
    /**
     * User id
     * @type {string}
     * @memberof DefaultApiGetParticipant
     */
    readonly userId: string;
}
/**
 * Request parameters for getPublicIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiGetPublicIntegrationRequest
 */
export interface DefaultApiGetPublicIntegrationRequest {
    /**
     * Integration Name
     * @type {string}
     * @memberof DefaultApiGetPublicIntegration
     */
    readonly name: string;
    /**
     * Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @type {string}
     * @memberof DefaultApiGetPublicIntegration
     */
    readonly version: string;
}
/**
 * Request parameters for getPublicIntegrationById operation in DefaultApi.
 * @export
 * @interface DefaultApiGetPublicIntegrationByIdRequest
 */
export interface DefaultApiGetPublicIntegrationByIdRequest {
    /**
     * Integration ID
     * @type {string}
     * @memberof DefaultApiGetPublicIntegrationById
     */
    readonly id: string;
}
/**
 * Request parameters for getPublicWorkspace operation in DefaultApi.
 * @export
 * @interface DefaultApiGetPublicWorkspaceRequest
 */
export interface DefaultApiGetPublicWorkspaceRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiGetPublicWorkspace
     */
    readonly id: string;
}
/**
 * Request parameters for getState operation in DefaultApi.
 * @export
 * @interface DefaultApiGetStateRequest
 */
export interface DefaultApiGetStateRequest {
    /**
     * State type
     * @type {'conversation' | 'user' | 'bot' | 'integration' | 'task'}
     * @memberof DefaultApiGetState
     */
    readonly type: GetStateTypeEnum;
    /**
     * State id
     * @type {string}
     * @memberof DefaultApiGetState
     */
    readonly id: string;
    /**
     * State name
     * @type {string}
     * @memberof DefaultApiGetState
     */
    readonly name: string;
}
/**
 * Request parameters for getTable operation in DefaultApi.
 * @export
 * @interface DefaultApiGetTableRequest
 */
export interface DefaultApiGetTableRequest {
    /**
     * The table\&#39;s name or unique identifier for targeting specific table operations.
     * @type {string}
     * @memberof DefaultApiGetTable
     */
    readonly table: string;
}
/**
 * Request parameters for getTableRow operation in DefaultApi.
 * @export
 * @interface DefaultApiGetTableRowRequest
 */
export interface DefaultApiGetTableRowRequest {
    /**
     * The table\&#39;s name or unique identifier for targeting specific table operations.
     * @type {string}
     * @memberof DefaultApiGetTableRow
     */
    readonly table: string;
    /**
     * Identifier of the row within the table.
     * @type {number}
     * @memberof DefaultApiGetTableRow
     */
    readonly id: number;
}
/**
 * Request parameters for getTask operation in DefaultApi.
 * @export
 * @interface DefaultApiGetTaskRequest
 */
export interface DefaultApiGetTaskRequest {
    /**
     * Task id
     * @type {string}
     * @memberof DefaultApiGetTask
     */
    readonly id: string;
}
/**
 * Request parameters for getUpcomingInvoice operation in DefaultApi.
 * @export
 * @interface DefaultApiGetUpcomingInvoiceRequest
 */
export interface DefaultApiGetUpcomingInvoiceRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiGetUpcomingInvoice
     */
    readonly id: string;
}
/**
 * Request parameters for getUsage operation in DefaultApi.
 * @export
 * @interface DefaultApiGetUsageRequest
 */
export interface DefaultApiGetUsageRequest {
    /**
     * Type of usage
     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}
     * @memberof DefaultApiGetUsage
     */
    readonly type: GetUsageTypeEnum;
    /**
     * ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @type {string}
     * @memberof DefaultApiGetUsage
     */
    readonly id: string;
    /**
     * Period to get
     * @type {string}
     * @memberof DefaultApiGetUsage
     */
    readonly period?: string;
}
/**
 * Request parameters for getUser operation in DefaultApi.
 * @export
 * @interface DefaultApiGetUserRequest
 */
export interface DefaultApiGetUserRequest {
    /**
     * User ID
     * @type {string}
     * @memberof DefaultApiGetUser
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkspace operation in DefaultApi.
 * @export
 * @interface DefaultApiGetWorkspaceRequest
 */
export interface DefaultApiGetWorkspaceRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiGetWorkspace
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkspaceQuota operation in DefaultApi.
 * @export
 * @interface DefaultApiGetWorkspaceQuotaRequest
 */
export interface DefaultApiGetWorkspaceQuotaRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiGetWorkspaceQuota
     */
    readonly id: string;
    /**
     * Type of usage
     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}
     * @memberof DefaultApiGetWorkspaceQuota
     */
    readonly type: GetWorkspaceQuotaTypeEnum;
    /**
     * Period to get
     * @type {string}
     * @memberof DefaultApiGetWorkspaceQuota
     */
    readonly period?: string;
}
/**
 * Request parameters for introspect operation in DefaultApi.
 * @export
 * @interface DefaultApiIntrospectRequest
 */
export interface DefaultApiIntrospectRequest {
    /**
     *
     * @type {IntrospectBody}
     * @memberof DefaultApiIntrospect
     */
    readonly introspectBody?: IntrospectBody;
}
/**
 * Request parameters for listActivities operation in DefaultApi.
 * @export
 * @interface DefaultApiListActivitiesRequest
 */
export interface DefaultApiListActivitiesRequest {
    /**
     * ID of the task to list activities for
     * @type {string}
     * @memberof DefaultApiListActivities
     */
    readonly taskId: string;
    /**
     * ID of the bot to list activities for
     * @type {string}
     * @memberof DefaultApiListActivities
     */
    readonly botId: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListActivities
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listBotIssueEvents operation in DefaultApi.
 * @export
 * @interface DefaultApiListBotIssueEventsRequest
 */
export interface DefaultApiListBotIssueEventsRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiListBotIssueEvents
     */
    readonly id: string;
    /**
     * Issue ID
     * @type {string}
     * @memberof DefaultApiListBotIssueEvents
     */
    readonly issueId: string;
}
/**
 * Request parameters for listBotIssues operation in DefaultApi.
 * @export
 * @interface DefaultApiListBotIssuesRequest
 */
export interface DefaultApiListBotIssuesRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiListBotIssues
     */
    readonly id: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListBotIssues
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listBots operation in DefaultApi.
 * @export
 * @interface DefaultApiListBotsRequest
 */
export interface DefaultApiListBotsRequest {
    /**
     * If true, only dev bots are returned. Otherwise, only production bots are returned.
     * @type {boolean}
     * @memberof DefaultApiListBots
     */
    readonly dev?: boolean;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListBots
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listConversations operation in DefaultApi.
 * @export
 * @interface DefaultApiListConversationsRequest
 */
export interface DefaultApiListConversationsRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListConversations
     */
    readonly nextToken?: string;
    /**
     * Filter by tags
     * @type {{ [key: string]: string; }}
     * @memberof DefaultApiListConversations
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * Filter by participant ids
     * @type {Array<string>}
     * @memberof DefaultApiListConversations
     */
    readonly participantIds?: Array<string>;
}
/**
 * Request parameters for listEvents operation in DefaultApi.
 * @export
 * @interface DefaultApiListEventsRequest
 */
export interface DefaultApiListEventsRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListEvents
     */
    readonly nextToken?: string;
    /**
     * Filter by event type
     * @type {string}
     * @memberof DefaultApiListEvents
     */
    readonly type?: string;
    /**
     * Filter by conversation id
     * @type {string}
     * @memberof DefaultApiListEvents
     */
    readonly conversationId?: string;
    /**
     * Filter by user id
     * @type {string}
     * @memberof DefaultApiListEvents
     */
    readonly userId?: string;
    /**
     * Filter by message id
     * @type {string}
     * @memberof DefaultApiListEvents
     */
    readonly messageId?: string;
    /**
     * Filter by status. Allowed values: pending, ignored, processed, failed.
     * @type {string}
     * @memberof DefaultApiListEvents
     */
    readonly status?: string;
}
/**
 * Request parameters for listFiles operation in DefaultApi.
 * @export
 * @interface DefaultApiListFilesRequest
 */
export interface DefaultApiListFilesRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiListFiles
     */
    readonly botId: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListFiles
     */
    readonly nextToken?: string;
    /**
     * Filter by tags
     * @type {{ [key: string]: string; }}
     * @memberof DefaultApiListFiles
     */
    readonly tags?: {
        [key: string]: string;
    };
}
/**
 * Request parameters for listIntegrationApiKeys operation in DefaultApi.
 * @export
 * @interface DefaultApiListIntegrationApiKeysRequest
 */
export interface DefaultApiListIntegrationApiKeysRequest {
    /**
     * ID of the integration version
     * @type {string}
     * @memberof DefaultApiListIntegrationApiKeys
     */
    readonly integrationVersionId: string;
}
/**
 * Request parameters for listIntegrations operation in DefaultApi.
 * @export
 * @interface DefaultApiListIntegrationsRequest
 */
export interface DefaultApiListIntegrationsRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListIntegrations
     */
    readonly nextToken?: string;
    /**
     * Integration Name
     * @type {string}
     * @memberof DefaultApiListIntegrations
     */
    readonly name?: string;
    /**
     * Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @type {string}
     * @memberof DefaultApiListIntegrations
     */
    readonly version?: string;
    /**
     * If true, only dev integrations are returned. Otherwise, only production integrations are returned.
     * @type {boolean}
     * @memberof DefaultApiListIntegrations
     */
    readonly dev?: boolean;
}
/**
 * Request parameters for listMessages operation in DefaultApi.
 * @export
 * @interface DefaultApiListMessagesRequest
 */
export interface DefaultApiListMessagesRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListMessages
     */
    readonly nextToken?: string;
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiListMessages
     */
    readonly conversationId?: string;
    /**
     * Filter by tags
     * @type {{ [key: string]: string; }}
     * @memberof DefaultApiListMessages
     */
    readonly tags?: {
        [key: string]: string;
    };
}
/**
 * Request parameters for listParticipants operation in DefaultApi.
 * @export
 * @interface DefaultApiListParticipantsRequest
 */
export interface DefaultApiListParticipantsRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiListParticipants
     */
    readonly id: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListParticipants
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listPublicIntegrations operation in DefaultApi.
 * @export
 * @interface DefaultApiListPublicIntegrationsRequest
 */
export interface DefaultApiListPublicIntegrationsRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListPublicIntegrations
     */
    readonly nextToken?: string;
    /**
     * Integration Name
     * @type {string}
     * @memberof DefaultApiListPublicIntegrations
     */
    readonly name?: string;
    /**
     * Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @type {string}
     * @memberof DefaultApiListPublicIntegrations
     */
    readonly version?: string;
}
/**
 * Request parameters for listTables operation in DefaultApi.
 * @export
 * @interface DefaultApiListTablesRequest
 */
export interface DefaultApiListTablesRequest {
    /**
     * Optional filters to narrow down the list by tags associated with tables.
     * @type {{ [key: string]: string; }}
     * @memberof DefaultApiListTables
     */
    readonly tags?: {
        [key: string]: string;
    };
}
/**
 * Request parameters for listTasks operation in DefaultApi.
 * @export
 * @interface DefaultApiListTasksRequest
 */
export interface DefaultApiListTasksRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListTasks
     */
    readonly nextToken?: string;
    /**
     * Filter by tags
     * @type {{ [key: string]: string; }}
     * @memberof DefaultApiListTasks
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiListTasks
     */
    readonly conversationId?: string;
    /**
     * User id
     * @type {string}
     * @memberof DefaultApiListTasks
     */
    readonly userId?: string;
    /**
     * Parent task id
     * @type {string}
     * @memberof DefaultApiListTasks
     */
    readonly parentTaskId?: string;
    /**
     * Status
     * @type {Array<'pending' | 'in_progress' | 'failed' | 'completed' | 'blocked' | 'paused' | 'timeout' | 'cancelled'>}
     * @memberof DefaultApiListTasks
     */
    readonly status?: Array<ListTasksStatusEnum>;
    /**
     * Type
     * @type {string}
     * @memberof DefaultApiListTasks
     */
    readonly type?: string;
}
/**
 * Request parameters for listUsageHistory operation in DefaultApi.
 * @export
 * @interface DefaultApiListUsageHistoryRequest
 */
export interface DefaultApiListUsageHistoryRequest {
    /**
     * Type of usage
     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}
     * @memberof DefaultApiListUsageHistory
     */
    readonly type: ListUsageHistoryTypeEnum;
    /**
     * ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @type {string}
     * @memberof DefaultApiListUsageHistory
     */
    readonly id: string;
}
/**
 * Request parameters for listUsers operation in DefaultApi.
 * @export
 * @interface DefaultApiListUsersRequest
 */
export interface DefaultApiListUsersRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListUsers
     */
    readonly nextToken?: string;
    /**
     * Filter by conversation id. This will return all users that have participated in the conversation.
     * @type {string}
     * @memberof DefaultApiListUsers
     */
    readonly conversationId?: string;
    /**
     * Filter by tags
     * @type {{ [key: string]: string; }}
     * @memberof DefaultApiListUsers
     */
    readonly tags?: {
        [key: string]: string;
    };
}
/**
 * Request parameters for listWorkspaceInvoices operation in DefaultApi.
 * @export
 * @interface DefaultApiListWorkspaceInvoicesRequest
 */
export interface DefaultApiListWorkspaceInvoicesRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiListWorkspaceInvoices
     */
    readonly id: string;
}
/**
 * Request parameters for listWorkspaceMembers operation in DefaultApi.
 * @export
 * @interface DefaultApiListWorkspaceMembersRequest
 */
export interface DefaultApiListWorkspaceMembersRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListWorkspaceMembers
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listWorkspaceQuotas operation in DefaultApi.
 * @export
 * @interface DefaultApiListWorkspaceQuotasRequest
 */
export interface DefaultApiListWorkspaceQuotasRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiListWorkspaceQuotas
     */
    readonly id: string;
    /**
     * Period to get
     * @type {string}
     * @memberof DefaultApiListWorkspaceQuotas
     */
    readonly period?: string;
}
/**
 * Request parameters for listWorkspaceUsages operation in DefaultApi.
 * @export
 * @interface DefaultApiListWorkspaceUsagesRequest
 */
export interface DefaultApiListWorkspaceUsagesRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiListWorkspaceUsages
     */
    readonly id: string;
    /**
     * Type of usage
     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}
     * @memberof DefaultApiListWorkspaceUsages
     */
    readonly type: ListWorkspaceUsagesTypeEnum;
    /**
     * Period to get
     * @type {string}
     * @memberof DefaultApiListWorkspaceUsages
     */
    readonly period?: string;
}
/**
 * Request parameters for listWorkspaces operation in DefaultApi.
 * @export
 * @interface DefaultApiListWorkspacesRequest
 */
export interface DefaultApiListWorkspacesRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListWorkspaces
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for patchState operation in DefaultApi.
 * @export
 * @interface DefaultApiPatchStateRequest
 */
export interface DefaultApiPatchStateRequest {
    /**
     * State type
     * @type {'conversation' | 'user' | 'bot' | 'integration' | 'task'}
     * @memberof DefaultApiPatchState
     */
    readonly type: PatchStateTypeEnum;
    /**
     * State id
     * @type {string}
     * @memberof DefaultApiPatchState
     */
    readonly id: string;
    /**
     * State name
     * @type {string}
     * @memberof DefaultApiPatchState
     */
    readonly name: string;
    /**
     * State content
     * @type {PatchStateBody}
     * @memberof DefaultApiPatchState
     */
    readonly patchStateBody?: PatchStateBody;
}
/**
 * Request parameters for removeParticipant operation in DefaultApi.
 * @export
 * @interface DefaultApiRemoveParticipantRequest
 */
export interface DefaultApiRemoveParticipantRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiRemoveParticipant
     */
    readonly id: string;
    /**
     * User id
     * @type {string}
     * @memberof DefaultApiRemoveParticipant
     */
    readonly userId: string;
}
/**
 * Request parameters for renameTableColumn operation in DefaultApi.
 * @export
 * @interface DefaultApiRenameTableColumnRequest
 */
export interface DefaultApiRenameTableColumnRequest {
    /**
     * The table\&#39;s name or unique identifier for targeting specific table operations.
     * @type {string}
     * @memberof DefaultApiRenameTableColumn
     */
    readonly table: string;
    /**
     * Details of the column to be renamed, including its current name and the desired new name.
     * @type {RenameTableColumnBody}
     * @memberof DefaultApiRenameTableColumn
     */
    readonly renameTableColumnBody?: RenameTableColumnBody;
}
/**
 * Request parameters for runVrl operation in DefaultApi.
 * @export
 * @interface DefaultApiRunVrlRequest
 */
export interface DefaultApiRunVrlRequest {
    /**
     * VRL script
     * @type {RunVrlBody}
     * @memberof DefaultApiRunVrl
     */
    readonly runVrlBody?: RunVrlBody;
}
/**
 * Request parameters for searchFiles operation in DefaultApi.
 * @export
 * @interface DefaultApiSearchFilesRequest
 */
export interface DefaultApiSearchFilesRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiSearchFiles
     */
    readonly botId: string;
    /**
     * Query expressed in natural language to retrieve matching text passages within all indexed files in the bot using semantical search.
     * @type {string}
     * @memberof DefaultApiSearchFiles
     */
    readonly query: string;
    /**
     * Filter by tags
     * @type {{ [key: string]: string; }}
     * @memberof DefaultApiSearchFiles
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * The number of neighbor passages to prepend and append as surrounding context to the content of each returned passage. Default: 0, Maximum: 10
     * @type {number}
     * @memberof DefaultApiSearchFiles
     */
    readonly contextDepth?: number;
    /**
     * The maximum number of passages to return.
     * @type {number}
     * @memberof DefaultApiSearchFiles
     */
    readonly limit?: number;
}
/**
 * Request parameters for setAccountPreference operation in DefaultApi.
 * @export
 * @interface DefaultApiSetAccountPreferenceRequest
 */
export interface DefaultApiSetAccountPreferenceRequest {
    /**
     * Preference key
     * @type {string}
     * @memberof DefaultApiSetAccountPreference
     */
    readonly key: string;
    /**
     * Preference value
     * @type {SetAccountPreferenceBody}
     * @memberof DefaultApiSetAccountPreference
     */
    readonly setAccountPreferenceBody?: SetAccountPreferenceBody;
}
/**
 * Request parameters for setState operation in DefaultApi.
 * @export
 * @interface DefaultApiSetStateRequest
 */
export interface DefaultApiSetStateRequest {
    /**
     * State type
     * @type {'conversation' | 'user' | 'bot' | 'integration' | 'task'}
     * @memberof DefaultApiSetState
     */
    readonly type: SetStateTypeEnum;
    /**
     * State id
     * @type {string}
     * @memberof DefaultApiSetState
     */
    readonly id: string;
    /**
     * State name
     * @type {string}
     * @memberof DefaultApiSetState
     */
    readonly name: string;
    /**
     * State content
     * @type {SetStateBody}
     * @memberof DefaultApiSetState
     */
    readonly setStateBody?: SetStateBody;
}
/**
 * Request parameters for setWorkspacePaymentMethod operation in DefaultApi.
 * @export
 * @interface DefaultApiSetWorkspacePaymentMethodRequest
 */
export interface DefaultApiSetWorkspacePaymentMethodRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiSetWorkspacePaymentMethod
     */
    readonly id: string;
    /**
     *
     * @type {SetWorkspacePaymentMethodBody}
     * @memberof DefaultApiSetWorkspacePaymentMethod
     */
    readonly setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody;
}
/**
 * Request parameters for transferBot operation in DefaultApi.
 * @export
 * @interface DefaultApiTransferBotRequest
 */
export interface DefaultApiTransferBotRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiTransferBot
     */
    readonly id: string;
    /**
     * Bot transfer request
     * @type {TransferBotBody}
     * @memberof DefaultApiTransferBot
     */
    readonly transferBotBody?: TransferBotBody;
}
/**
 * Request parameters for updateAccount operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateAccountRequest
 */
export interface DefaultApiUpdateAccountRequest {
    /**
     * Account Data
     * @type {UpdateAccountBody}
     * @memberof DefaultApiUpdateAccount
     */
    readonly updateAccountBody?: UpdateAccountBody;
}
/**
 * Request parameters for updateBot operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateBotRequest
 */
export interface DefaultApiUpdateBotRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiUpdateBot
     */
    readonly id: string;
    /**
     * Bot metadata
     * @type {UpdateBotBody}
     * @memberof DefaultApiUpdateBot
     */
    readonly updateBotBody?: UpdateBotBody;
}
/**
 * Request parameters for updateConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateConversationRequest
 */
export interface DefaultApiUpdateConversationRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiUpdateConversation
     */
    readonly id: string;
    /**
     * Conversation data
     * @type {UpdateConversationBody}
     * @memberof DefaultApiUpdateConversation
     */
    readonly updateConversationBody?: UpdateConversationBody;
}
/**
 * Request parameters for updateFileMetadata operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateFileMetadataRequest
 */
export interface DefaultApiUpdateFileMetadataRequest {
    /**
     * File ID
     * @type {string}
     * @memberof DefaultApiUpdateFileMetadata
     */
    readonly id: string;
    /**
     * File metadata to update.
     * @type {UpdateFileMetadataBody}
     * @memberof DefaultApiUpdateFileMetadata
     */
    readonly updateFileMetadataBody?: UpdateFileMetadataBody;
}
/**
 * Request parameters for updateIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateIntegrationRequest
 */
export interface DefaultApiUpdateIntegrationRequest {
    /**
     * Integration ID
     * @type {string}
     * @memberof DefaultApiUpdateIntegration
     */
    readonly id: string;
    /**
     * Integration
     * @type {UpdateIntegrationBody}
     * @memberof DefaultApiUpdateIntegration
     */
    readonly updateIntegrationBody?: UpdateIntegrationBody;
}
/**
 * Request parameters for updateMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateMessageRequest
 */
export interface DefaultApiUpdateMessageRequest {
    /**
     * Message id
     * @type {string}
     * @memberof DefaultApiUpdateMessage
     */
    readonly id: string;
    /**
     * Message data
     * @type {UpdateMessageBody}
     * @memberof DefaultApiUpdateMessage
     */
    readonly updateMessageBody?: UpdateMessageBody;
}
/**
 * Request parameters for updateTable operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateTableRequest
 */
export interface DefaultApiUpdateTableRequest {
    /**
     * The table\&#39;s name or unique identifier for targeting specific table operations.
     * @type {string}
     * @memberof DefaultApiUpdateTable
     */
    readonly table: string;
    /**
     * The updated schema/name of the table.
     * @type {UpdateTableBody}
     * @memberof DefaultApiUpdateTable
     */
    readonly updateTableBody?: UpdateTableBody;
}
/**
 * Request parameters for updateTableRows operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateTableRowsRequest
 */
export interface DefaultApiUpdateTableRowsRequest {
    /**
     * The table\&#39;s name or unique identifier for targeting specific table operations.
     * @type {string}
     * @memberof DefaultApiUpdateTableRows
     */
    readonly table: string;
    /**
     * Data for rows to update, including IDs. Errors affect only specific rows, not the entire batch.
     * @type {UpdateTableRowsBody}
     * @memberof DefaultApiUpdateTableRows
     */
    readonly updateTableRowsBody?: UpdateTableRowsBody;
}
/**
 * Request parameters for updateTask operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateTaskRequest
 */
export interface DefaultApiUpdateTaskRequest {
    /**
     * Task id
     * @type {string}
     * @memberof DefaultApiUpdateTask
     */
    readonly id: string;
    /**
     * Task data
     * @type {UpdateTaskBody}
     * @memberof DefaultApiUpdateTask
     */
    readonly updateTaskBody?: UpdateTaskBody;
}
/**
 * Request parameters for updateUser operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateUserRequest
 */
export interface DefaultApiUpdateUserRequest {
    /**
     * User ID
     * @type {string}
     * @memberof DefaultApiUpdateUser
     */
    readonly id: string;
    /**
     * User data
     * @type {UpdateUserBody}
     * @memberof DefaultApiUpdateUser
     */
    readonly updateUserBody?: UpdateUserBody;
}
/**
 * Request parameters for updateWorkspace operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateWorkspaceRequest
 */
export interface DefaultApiUpdateWorkspaceRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiUpdateWorkspace
     */
    readonly id: string;
    /**
     * Workspace metadata
     * @type {UpdateWorkspaceBody}
     * @memberof DefaultApiUpdateWorkspace
     */
    readonly updateWorkspaceBody?: UpdateWorkspaceBody;
}
/**
 * Request parameters for updateWorkspaceMember operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateWorkspaceMemberRequest
 */
export interface DefaultApiUpdateWorkspaceMemberRequest {
    /**
     * Workspace member ID
     * @type {string}
     * @memberof DefaultApiUpdateWorkspaceMember
     */
    readonly id: string;
    /**
     * Workspace member metadata
     * @type {UpdateWorkspaceMemberBody}
     * @memberof DefaultApiUpdateWorkspaceMember
     */
    readonly updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody;
}
/**
 * Request parameters for upsertTableRows operation in DefaultApi.
 * @export
 * @interface DefaultApiUpsertTableRowsRequest
 */
export interface DefaultApiUpsertTableRowsRequest {
    /**
     * The table\&#39;s name or unique identifier for targeting specific table operations.
     * @type {string}
     * @memberof DefaultApiUpsertTableRows
     */
    readonly table: string;
    /**
     * Rows for insertion or update, with a key column to determine action. Supports partial successes.
     * @type {UpsertTableRowsBody}
     * @memberof DefaultApiUpsertTableRows
     */
    readonly upsertTableRowsBody?: UpsertTableRowsBody;
}
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).
     * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AddParticipantResponse, any>>;
    /**
     * Break down workspace usage by bot
     * @param {DefaultApiBreakDownWorkspaceUsageByBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    breakDownWorkspaceUsageByBot(requestParameters: DefaultApiBreakDownWorkspaceUsageByBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BreakDownWorkspaceUsageByBotResponse, any>>;
    /**
     * Call an action
     * @param {DefaultApiCallActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    callAction(requestParameters?: DefaultApiCallActionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CallActionResponse, any>>;
    /**
     * Change AI Spend quota
     * @param {DefaultApiChangeAISpendQuotaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    changeAISpendQuota(requestParameters?: DefaultApiChangeAISpendQuotaRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Change workspace billing plan
     * @param {DefaultApiChangeWorkspacePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    changeWorkspacePlan(requestParameters: DefaultApiChangeWorkspacePlanRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChangeWorkspacePlanResponse, any>>;
    /**
     * Charge unpaid invoices of a workspace.
     * @param {DefaultApiChargeWorkspaceUnpaidInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    chargeWorkspaceUnpaidInvoices(requestParameters: DefaultApiChargeWorkspaceUnpaidInvoicesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChargeWorkspaceUnpaidInvoicesResponse, any>>;
    /**
     * Check if a workspace handle is available
     * @param {DefaultApiCheckHandleAvailabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    checkHandleAvailability(requestParameters?: DefaultApiCheckHandleAvailabilityRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CheckHandleAvailabilityResponse, any>>;
    /**
     * An integration can call this endpoint to configure itself
     * @param {DefaultApiConfigureIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    configureIntegration(requestParameters?: DefaultApiConfigureIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Create bot
     * @param {DefaultApiCreateBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createBot(requestParameters?: DefaultApiCreateBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateBotResponse, any>>;
    /**
     * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createConversation(requestParameters?: DefaultApiCreateConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateConversationResponse, any>>;
    /**
     * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createEvent(requestParameters?: DefaultApiCreateEventRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateEventResponse, any>>;
    /**
     * Creates a file.
     * @param {DefaultApiCreateFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createFile(requestParameters?: DefaultApiCreateFileRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateFileResponse, any>>;
    /**
     * Create integration
     * @param {DefaultApiCreateIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createIntegration(requestParameters?: DefaultApiCreateIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateIntegrationResponse, any>>;
    /**
     * Create an IAK
     * @param {DefaultApiCreateIntegrationApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createIntegrationApiKey(requestParameters?: DefaultApiCreateIntegrationApiKeyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateIntegrationApiKeyResponse, any>>;
    /**
     * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createMessage(requestParameters?: DefaultApiCreateMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateMessageResponse, any>>;
    /**
     * Create a PAT
     * @param {DefaultApiCreatePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createPersonalAccessToken(requestParameters?: DefaultApiCreatePersonalAccessTokenRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreatePersonalAccessTokenResponse, any>>;
    /**
     * Initiates the creation of a new table based on the provided schema, excluding system-managed fields like IDs and timestamps.
     * @param {DefaultApiCreateTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createTable(requestParameters?: DefaultApiCreateTableRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateTableResponse, any>>;
    /**
     * Inserts one or multiple new rows into the specified table.
     * @param {DefaultApiCreateTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createTableRows(requestParameters: DefaultApiCreateTableRowsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateTableRowsResponse, any>>;
    /**
     * Creates a new [Task](#schema_task). When creating a new [Task](#schema_task), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createTask(requestParameters?: DefaultApiCreateTaskRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateTaskResponse, any>>;
    /**
     * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createUser(requestParameters?: DefaultApiCreateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateUserResponse, any>>;
    /**
     * Create workspace
     * @param {DefaultApiCreateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createWorkspace(requestParameters?: DefaultApiCreateWorkspaceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateWorkspaceResponse, any>>;
    /**
     * Add a member to the workspace
     * @param {DefaultApiCreateWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createWorkspaceMember(requestParameters?: DefaultApiCreateWorkspaceMemberRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateWorkspaceMemberResponse, any>>;
    /**
     * Delete bot
     * @param {DefaultApiDeleteBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteBot(requestParameters: DefaultApiDeleteBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Delete Bot Issue
     * @param {DefaultApiDeleteBotIssueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteBotIssue(requestParameters: DefaultApiDeleteBotIssueRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Deletes a file.
     * @param {DefaultApiDeleteFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteFile(requestParameters: DefaultApiDeleteFileRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Delete integration
     * @param {DefaultApiDeleteIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteIntegration(requestParameters: DefaultApiDeleteIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Delete an IAK
     * @param {DefaultApiDeleteIntegrationApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteIntegrationApiKey(requestParameters: DefaultApiDeleteIntegrationApiKeyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Delete a PAT
     * @param {DefaultApiDeletePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deletePersonalAccessToken(requestParameters: DefaultApiDeletePersonalAccessTokenRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Permanently deletes a table and all its associated data from the system. Use with caution, as this action cannot be undone.
     * @param {DefaultApiDeleteTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteTable(requestParameters: DefaultApiDeleteTableRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Allows selective deletion of rows or complete clearance of a table.
     * @param {DefaultApiDeleteTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteTableRows(requestParameters: DefaultApiDeleteTableRowsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteTableRowsResponse, any>>;
    /**
     * Permanently deletes a [Task](#schema_task). It cannot be undone.
     * @param {DefaultApiDeleteTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteTask(requestParameters: DefaultApiDeleteTaskRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Delete workspace
     * @param {DefaultApiDeleteWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteWorkspace(requestParameters: DefaultApiDeleteWorkspaceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Remove a member of a workspace
     * @param {DefaultApiDeleteWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteWorkspaceMember(requestParameters: DefaultApiDeleteWorkspaceMemberRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Duplicates the table schema & content
     * @param {DefaultApiDuplicateTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    duplicateTable(requestParameters: DefaultApiDuplicateTableRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DuplicateTableResponse, any>>;
    /**
     * Enables the search and filtering of rows within a table based on specific criteria. This operation supports complex queries for advanced data manipulation and retrieval.
     * @param {DefaultApiFindTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    findTableRows(requestParameters: DefaultApiFindTableRowsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FindTableRowsResponse, any>>;
    /**
     * Get details of the account authenticating with this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAccount(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetAccountResponse, any>>;
    /**
     * Get a preference of the account
     * @param {DefaultApiGetAccountPreferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAccountPreference(requestParameters: DefaultApiGetAccountPreferenceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetAccountPreferenceResponse, any>>;
    /**
     * For a user, gets a map of workspace IDs to their highest quota completion rate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAllWorkspaceQuotaCompletion(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<{
        [key: string]: GetAllWorkspaceQuotaCompletionResponse;
    }, any>>;
    /**
     * Get the audit records of a workspace, sorted from most recent to oldest.
     * @param {DefaultApiGetAuditRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAuditRecords(requestParameters: DefaultApiGetAuditRecordsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetAuditRecordsResponse, any>>;
    /**
     * Get bot details
     * @param {DefaultApiGetBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBot(requestParameters: DefaultApiGetBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBotResponse, any>>;
    /**
     * Get bot analytics
     * @param {DefaultApiGetBotAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBotAnalytics(requestParameters: DefaultApiGetBotAnalyticsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBotAnalyticsResponse, any>>;
    /**
     * Get bot logs
     * @param {DefaultApiGetBotLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBotLogs(requestParameters: DefaultApiGetBotLogsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBotLogsResponse, any>>;
    /**
     * Get the webchat code/URL for a bot
     * @param {DefaultApiGetBotWebchatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBotWebchat(requestParameters: DefaultApiGetBotWebchatRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBotWebchatResponse, any>>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetConversationResponse, any>>;
    /**
     * Retrieves the [Event](#schema_event) object for a valid identifiers.
     * @param {DefaultApiGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getEvent(requestParameters: DefaultApiGetEventRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetEventResponse, any>>;
    /**
     * Returns a presigned URL to download the file content.
     * @param {DefaultApiGetFileContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getFileContent(requestParameters: DefaultApiGetFileContentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFileContentResponse, any>>;
    /**
     * Get file metadata
     * @param {DefaultApiGetFileMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getFileMetadata(requestParameters: DefaultApiGetFileMetadataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFileMetadataResponse, any>>;
    /**
     * Get integration
     * @param {DefaultApiGetIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getIntegration(requestParameters: DefaultApiGetIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetIntegrationResponse, any>>;
    /**
     * Get integration
     * @param {DefaultApiGetIntegrationByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getIntegrationByName(requestParameters: DefaultApiGetIntegrationByNameRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetIntegrationByNameResponse, any>>;
    /**
     * Get integration logs
     * @param {DefaultApiGetIntegrationLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getIntegrationLogs(requestParameters: DefaultApiGetIntegrationLogsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetIntegrationLogsResponse, any>>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMessageResponse, any>>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.
     * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrCreateConversation(requestParameters?: DefaultApiGetOrCreateConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrCreateConversationResponse, any>>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.
     * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrCreateMessage(requestParameters?: DefaultApiGetOrCreateMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrCreateMessageResponse, any>>;
    /**
     * Retrieves information about a specific table if it exists; otherwise, creates a new table based on the provided schema.
     * @param {DefaultApiGetOrCreateTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrCreateTable(requestParameters: DefaultApiGetOrCreateTableRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrCreateTableResponse, any>>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.
     * @param {DefaultApiGetOrCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrCreateUser(requestParameters?: DefaultApiGetOrCreateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrCreateUserResponse, any>>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers. If the state does not exist, it creates a new state.
     * @param {DefaultApiGetOrSetStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrSetState(requestParameters: DefaultApiGetOrSetStateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrSetStateResponse, any>>;
    /**
     * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetParticipantResponse, any>>;
    /**
     * Get public integration by name and version
     * @param {DefaultApiGetPublicIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPublicIntegration(requestParameters: DefaultApiGetPublicIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPublicIntegrationResponse, any>>;
    /**
     * Get public integration by Id
     * @param {DefaultApiGetPublicIntegrationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPublicIntegrationById(requestParameters: DefaultApiGetPublicIntegrationByIdRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPublicIntegrationByIdResponse, any>>;
    /**
     * Get workspace public details
     * @param {DefaultApiGetPublicWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPublicWorkspace(requestParameters: DefaultApiGetPublicWorkspaceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPublicWorkspaceResponse, any>>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers.
     * @param {DefaultApiGetStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getState(requestParameters: DefaultApiGetStateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetStateResponse, any>>;
    /**
     * Retrieves detailed information about a specific table, identified by its name or unique identifier.
     * @param {DefaultApiGetTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTable(requestParameters: DefaultApiGetTableRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetTableResponse, any>>;
    /**
     * Fetches a specific row from a table using the row\'s unique identifier.
     * @param {DefaultApiGetTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTableRow(requestParameters: DefaultApiGetTableRowRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetTableRowResponse, any>>;
    /**
     * Retrieves the [Task](#schema_task) object for a valid identifier.
     * @param {DefaultApiGetTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTask(requestParameters: DefaultApiGetTaskRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetTaskResponse, any>>;
    /**
     * Get upcoming invoice for workspace
     * @param {DefaultApiGetUpcomingInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getUpcomingInvoice(requestParameters: DefaultApiGetUpcomingInvoiceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUpcomingInvoiceResponse, any>>;
    /**
     * Get usage
     * @param {DefaultApiGetUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getUsage(requestParameters: DefaultApiGetUsageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUsageResponse, any>>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {DefaultApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUserResponse, any>>;
    /**
     * Get workspace details
     * @param {DefaultApiGetWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getWorkspace(requestParameters: DefaultApiGetWorkspaceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetWorkspaceResponse, any>>;
    /**
     * Get workspace quota
     * @param {DefaultApiGetWorkspaceQuotaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getWorkspaceQuota(requestParameters: DefaultApiGetWorkspaceQuotaRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetWorkspaceQuotaResponse, any>>;
    /**
     * Introspect the API
     * @param {DefaultApiIntrospectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    introspect(requestParameters?: DefaultApiIntrospectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IntrospectResponse, any>>;
    /**
     * List activities of a task
     * @param {DefaultApiListActivitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listActivities(requestParameters: DefaultApiListActivitiesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListActivitiesResponse, any>>;
    /**
     * List Events for a Bot Issue
     * @param {DefaultApiListBotIssueEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listBotIssueEvents(requestParameters: DefaultApiListBotIssueEventsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListBotIssueEventsResponse, any>>;
    /**
     * List Bot Issues
     * @param {DefaultApiListBotIssuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listBotIssues(requestParameters: DefaultApiListBotIssuesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListBotIssuesResponse, any>>;
    /**
     * List bots
     * @param {DefaultApiListBotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listBots(requestParameters?: DefaultApiListBotsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListBotsResponse, any>>;
    /**
     * Retrieves a list of [Conversation](#schema_conversation) you’ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listConversations(requestParameters?: DefaultApiListConversationsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListConversationsResponse, any>>;
    /**
     * Retrieves a list of [Event](#schema_event) you’ve previously created. The events are returned in sorted order, with the most recent appearing first.
     * @param {DefaultApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listEvents(requestParameters?: DefaultApiListEventsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListEventsResponse, any>>;
    /**
     * List files for bot
     * @param {DefaultApiListFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listFiles(requestParameters: DefaultApiListFilesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListFilesResponse, any>>;
    /**
     * List IAKs (Integration Api Keys) of an integration
     * @param {DefaultApiListIntegrationApiKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listIntegrationApiKeys(requestParameters: DefaultApiListIntegrationApiKeysRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListIntegrationApiKeysResponse, any>>;
    /**
     * List integrations
     * @param {DefaultApiListIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listIntegrations(requestParameters?: DefaultApiListIntegrationsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListIntegrationsResponse, any>>;
    /**
     * Retrieves a list of [Messages](#schema_message) you’ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listMessages(requestParameters?: DefaultApiListMessagesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListMessagesResponse, any>>;
    /**
     * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).
     * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListParticipantsResponse, any>>;
    /**
     * List PATs (Personal Access Tokens) of account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listPersonalAccessTokens(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListPersonalAccessTokensResponse, any>>;
    /**
     * List public integration
     * @param {DefaultApiListPublicIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listPublicIntegrations(requestParameters?: DefaultApiListPublicIntegrationsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListPublicIntegrationsResponse, any>>;
    /**
     * Retrieves a list of all tables associated with your bot.
     * @param {DefaultApiListTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listTables(requestParameters?: DefaultApiListTablesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListTablesResponse, any>>;
    /**
     * Retrieves a list of [Task](#schema_task) you\'ve previously created. The tasks are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listTasks(requestParameters?: DefaultApiListTasksRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListTasksResponse, any>>;
    /**
     * Get usage history
     * @param {DefaultApiListUsageHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listUsageHistory(requestParameters: DefaultApiListUsageHistoryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListUsageHistoryResponse, any>>;
    /**
     * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listUsers(requestParameters?: DefaultApiListUsersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListUsersResponse, any>>;
    /**
     * List invoices billed to workspace
     * @param {DefaultApiListWorkspaceInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listWorkspaceInvoices(requestParameters: DefaultApiListWorkspaceInvoicesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspaceInvoicesResponse, any>>;
    /**
     * Lists all the members in a workspace
     * @param {DefaultApiListWorkspaceMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listWorkspaceMembers(requestParameters?: DefaultApiListWorkspaceMembersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspaceMembersResponse, any>>;
    /**
     * List workspace quotas
     * @param {DefaultApiListWorkspaceQuotasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listWorkspaceQuotas(requestParameters: DefaultApiListWorkspaceQuotasRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspaceQuotasResponse, any>>;
    /**
     * List workspace usages
     * @param {DefaultApiListWorkspaceUsagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listWorkspaceUsages(requestParameters: DefaultApiListWorkspaceUsagesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspaceUsagesResponse, any>>;
    /**
     * List workspaces the user has access to
     * @param {DefaultApiListWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listWorkspaces(requestParameters?: DefaultApiListWorkspacesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspacesResponse, any>>;
    /**
     * Updates the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {DefaultApiPatchStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    patchState(requestParameters: DefaultApiPatchStateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PatchStateResponse, any>>;
    /**
     * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Renames an existing column within a table to better reflect its content or usage. The operation targets a specific table and requires the current and new column names.
     * @param {DefaultApiRenameTableColumnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    renameTableColumn(requestParameters: DefaultApiRenameTableColumnRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RenameTableColumnResponse, any>>;
    /**
     * Run a VRL script
     * @param {DefaultApiRunVrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    runVrl(requestParameters?: DefaultApiRunVrlRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RunVrlResponse, any>>;
    /**
     * Search files
     * @param {DefaultApiSearchFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    searchFiles(requestParameters: DefaultApiSearchFilesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SearchFilesResponse, any>>;
    /**
     * Set a preference for the account
     * @param {DefaultApiSetAccountPreferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    setAccountPreference(requestParameters: DefaultApiSetAccountPreferenceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Overrides the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {DefaultApiSetStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    setState(requestParameters: DefaultApiSetStateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetStateResponse, any>>;
    /**
     * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.
     * @param {DefaultApiSetWorkspacePaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    setWorkspacePaymentMethod(requestParameters: DefaultApiSetWorkspacePaymentMethodRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetWorkspacePaymentMethodResponse, any>>;
    /**
     * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.
     * @param {DefaultApiTransferBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transferBot(requestParameters: DefaultApiTransferBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Update details of the account associated with authenticated user
     * @param {DefaultApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateAccount(requestParameters?: DefaultApiUpdateAccountRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateAccountResponse, any>>;
    /**
     * Update bot
     * @param {DefaultApiUpdateBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateBot(requestParameters: DefaultApiUpdateBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateBotResponse, any>>;
    /**
     * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateConversationResponse, any>>;
    /**
     * Update file metadata
     * @param {DefaultApiUpdateFileMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateFileMetadata(requestParameters: DefaultApiUpdateFileMetadataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateFileMetadataResponse, any>>;
    /**
     * Update integration
     * @param {DefaultApiUpdateIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateIntegration(requestParameters: DefaultApiUpdateIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateIntegrationResponse, any>>;
    /**
     * Update a message
     * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateMessageResponse, any>>;
    /**
     * Updates the schema or the name of an existing table.
     * @param {DefaultApiUpdateTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateTable(requestParameters: DefaultApiUpdateTableRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateTableResponse, any>>;
    /**
     * Updates specified rows in a table, allowing partial success with detailed feedback on errors.
     * @param {DefaultApiUpdateTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateTableRows(requestParameters: DefaultApiUpdateTableRowsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateTableRowsResponse, any>>;
    /**
     * Update a [Task](#schema_task) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {DefaultApiUpdateTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateTask(requestParameters: DefaultApiUpdateTaskRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateTaskResponse, any>>;
    /**
     * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateUserResponse, any>>;
    /**
     * Update workspace
     * @param {DefaultApiUpdateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateWorkspace(requestParameters: DefaultApiUpdateWorkspaceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateWorkspaceResponse1, any>>;
    /**
     * Update the member of a workspace
     * @param {DefaultApiUpdateWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateWorkspaceMember(requestParameters: DefaultApiUpdateWorkspaceMemberRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateWorkspaceMemberResponse, any>>;
    /**
     * Inserts or updates rows based on a key. If a row exists, it is updated; otherwise, a new row is created.
     * @param {DefaultApiUpsertTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    upsertTableRows(requestParameters: DefaultApiUpsertTableRowsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpsertTableRowsResponse, any>>;
}
/**
 * @export
 */
export declare const BreakDownWorkspaceUsageByBotTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type BreakDownWorkspaceUsageByBotTypeEnum = typeof BreakDownWorkspaceUsageByBotTypeEnum[keyof typeof BreakDownWorkspaceUsageByBotTypeEnum];
/**
 * @export
 */
export declare const GetBotWebchatTypeEnum: {
    readonly Preconfigured: "preconfigured";
    readonly Configurable: "configurable";
    readonly Fullscreen: "fullscreen";
    readonly SharableUrl: "sharableUrl";
};
export type GetBotWebchatTypeEnum = typeof GetBotWebchatTypeEnum[keyof typeof GetBotWebchatTypeEnum];
/**
 * @export
 */
export declare const GetOrSetStateTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
    readonly Integration: "integration";
    readonly Task: "task";
};
export type GetOrSetStateTypeEnum = typeof GetOrSetStateTypeEnum[keyof typeof GetOrSetStateTypeEnum];
/**
 * @export
 */
export declare const GetStateTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
    readonly Integration: "integration";
    readonly Task: "task";
};
export type GetStateTypeEnum = typeof GetStateTypeEnum[keyof typeof GetStateTypeEnum];
/**
 * @export
 */
export declare const GetUsageTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type GetUsageTypeEnum = typeof GetUsageTypeEnum[keyof typeof GetUsageTypeEnum];
/**
 * @export
 */
export declare const GetWorkspaceQuotaTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type GetWorkspaceQuotaTypeEnum = typeof GetWorkspaceQuotaTypeEnum[keyof typeof GetWorkspaceQuotaTypeEnum];
/**
 * @export
 */
export declare const ListTasksStatusEnum: {
    readonly Pending: "pending";
    readonly InProgress: "in_progress";
    readonly Failed: "failed";
    readonly Completed: "completed";
    readonly Blocked: "blocked";
    readonly Paused: "paused";
    readonly Timeout: "timeout";
    readonly Cancelled: "cancelled";
};
export type ListTasksStatusEnum = typeof ListTasksStatusEnum[keyof typeof ListTasksStatusEnum];
/**
 * @export
 */
export declare const ListUsageHistoryTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type ListUsageHistoryTypeEnum = typeof ListUsageHistoryTypeEnum[keyof typeof ListUsageHistoryTypeEnum];
/**
 * @export
 */
export declare const ListWorkspaceUsagesTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type ListWorkspaceUsagesTypeEnum = typeof ListWorkspaceUsagesTypeEnum[keyof typeof ListWorkspaceUsagesTypeEnum];
/**
 * @export
 */
export declare const PatchStateTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
    readonly Integration: "integration";
    readonly Task: "task";
};
export type PatchStateTypeEnum = typeof PatchStateTypeEnum[keyof typeof PatchStateTypeEnum];
/**
 * @export
 */
export declare const SetStateTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
    readonly Integration: "integration";
    readonly Task: "task";
};
export type SetStateTypeEnum = typeof SetStateTypeEnum[keyof typeof SetStateTypeEnum];
